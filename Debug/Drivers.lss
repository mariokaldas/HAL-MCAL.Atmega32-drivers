
Drivers.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000042fa  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000110  00800060  000042fa  0000438e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000008  00800170  00800170  0000449e  2**0
                  ALLOC
  3 .stab         00004a58  00000000  00000000  000044a0  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00003f30  00000000  00000000  00008ef8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001c0  00000000  00000000  0000ce28  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000214  00000000  00000000  0000cfe8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002612  00000000  00000000  0000d1fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000014ce  00000000  00000000  0000f80e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   0000130b  00000000  00000000  00010cdc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001e0  00000000  00000000  00011fe8  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000307  00000000  00000000  000121c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00000a1a  00000000  00000000  000124cf  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  00012ee9  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 f8 07 	jmp	0xff0	; 0xff0 <__vector_5>
      18:	0c 94 c1 0f 	jmp	0x1f82	; 0x1f82 <__vector_6>
      1c:	0c 94 ee 0f 	jmp	0x1fdc	; 0x1fdc <__vector_7>
      20:	0c 94 94 0f 	jmp	0x1f28	; 0x1f28 <__vector_8>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 75 07 	jmp	0xeea	; 0xeea <__vector_14>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ea ef       	ldi	r30, 0xFA	; 250
      68:	f2 e4       	ldi	r31, 0x42	; 66
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a0 37       	cpi	r26, 0x70	; 112
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	a0 e7       	ldi	r26, 0x70	; 112
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a8 37       	cpi	r26, 0x78	; 120
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 b5 20 	call	0x416a	; 0x416a <main>
      8a:	0c 94 7b 21 	jmp	0x42f6	; 0x42f6 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 b3 04 	call	0x966	; 0x966 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 b3 04 	call	0x966	; 0x966 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 ff 20 	jmp	0x41fe	; 0x41fe <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 1b 21 	jmp	0x4236	; 0x4236 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 0b 21 	jmp	0x4216	; 0x4216 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 27 21 	jmp	0x424e	; 0x424e <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 0b 21 	jmp	0x4216	; 0x4216 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 27 21 	jmp	0x424e	; 0x424e <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 ff 20 	jmp	0x41fe	; 0x41fe <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__stack+0x3f>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__stack+0x55>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__stack+0x2d>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__stack+0x3f>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__stack+0x35>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__stack+0x3b>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__stack+0x55>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__stack+0x1c7>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__stack+0x51>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__stack+0x1c7>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__stack+0x67>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__stack+0x1c7>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__stack+0xd3>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__stack+0xc7>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__stack+0xef>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__stack+0x109>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__stack+0x8f>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__stack+0x14d>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__stack+0x141>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__stack+0x11f>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__stack+0x16b>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__stack+0x153>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__stack+0x1ad>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__stack+0x1ad>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__stack+0x1ad>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__stack+0x1b7>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 1b 21 	jmp	0x4236	; 0x4236 <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 07 21 	jmp	0x420e	; 0x420e <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	60 e6       	ldi	r22, 0x60	; 96
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 23 21 	jmp	0x4246	; 0x4246 <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 0b 21 	jmp	0x4216	; 0x4216 <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 1c 07 	call	0xe38	; 0xe38 <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 27 21 	jmp	0x424e	; 0x424e <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 0b 21 	jmp	0x4216	; 0x4216 <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 1c 07 	call	0xe38	; 0xe38 <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 27 21 	jmp	0x424e	; 0x424e <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 0b 21 	jmp	0x4216	; 0x4216 <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__ltsf2+0x56>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__ltsf2+0x56>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 1c 07 	call	0xe38	; 0xe38 <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__ltsf2+0x58>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 27 21 	jmp	0x424e	; 0x424e <__epilogue_restores__+0x18>

000008aa <__floatsisf>:
     8aa:	a8 e0       	ldi	r26, 0x08	; 8
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 08 21 	jmp	0x4210	; 0x4210 <__prologue_saves__+0x12>
     8b6:	9b 01       	movw	r18, r22
     8b8:	ac 01       	movw	r20, r24
     8ba:	83 e0       	ldi	r24, 0x03	; 3
     8bc:	89 83       	std	Y+1, r24	; 0x01
     8be:	da 01       	movw	r26, r20
     8c0:	c9 01       	movw	r24, r18
     8c2:	88 27       	eor	r24, r24
     8c4:	b7 fd       	sbrc	r27, 7
     8c6:	83 95       	inc	r24
     8c8:	99 27       	eor	r25, r25
     8ca:	aa 27       	eor	r26, r26
     8cc:	bb 27       	eor	r27, r27
     8ce:	b8 2e       	mov	r11, r24
     8d0:	21 15       	cp	r18, r1
     8d2:	31 05       	cpc	r19, r1
     8d4:	41 05       	cpc	r20, r1
     8d6:	51 05       	cpc	r21, r1
     8d8:	19 f4       	brne	.+6      	; 0x8e0 <__floatsisf+0x36>
     8da:	82 e0       	ldi	r24, 0x02	; 2
     8dc:	89 83       	std	Y+1, r24	; 0x01
     8de:	3a c0       	rjmp	.+116    	; 0x954 <__floatsisf+0xaa>
     8e0:	88 23       	and	r24, r24
     8e2:	a9 f0       	breq	.+42     	; 0x90e <__floatsisf+0x64>
     8e4:	20 30       	cpi	r18, 0x00	; 0
     8e6:	80 e0       	ldi	r24, 0x00	; 0
     8e8:	38 07       	cpc	r19, r24
     8ea:	80 e0       	ldi	r24, 0x00	; 0
     8ec:	48 07       	cpc	r20, r24
     8ee:	80 e8       	ldi	r24, 0x80	; 128
     8f0:	58 07       	cpc	r21, r24
     8f2:	29 f4       	brne	.+10     	; 0x8fe <__floatsisf+0x54>
     8f4:	60 e0       	ldi	r22, 0x00	; 0
     8f6:	70 e0       	ldi	r23, 0x00	; 0
     8f8:	80 e0       	ldi	r24, 0x00	; 0
     8fa:	9f ec       	ldi	r25, 0xCF	; 207
     8fc:	30 c0       	rjmp	.+96     	; 0x95e <__floatsisf+0xb4>
     8fe:	ee 24       	eor	r14, r14
     900:	ff 24       	eor	r15, r15
     902:	87 01       	movw	r16, r14
     904:	e2 1a       	sub	r14, r18
     906:	f3 0a       	sbc	r15, r19
     908:	04 0b       	sbc	r16, r20
     90a:	15 0b       	sbc	r17, r21
     90c:	02 c0       	rjmp	.+4      	; 0x912 <__floatsisf+0x68>
     90e:	79 01       	movw	r14, r18
     910:	8a 01       	movw	r16, r20
     912:	8e e1       	ldi	r24, 0x1E	; 30
     914:	c8 2e       	mov	r12, r24
     916:	d1 2c       	mov	r13, r1
     918:	dc 82       	std	Y+4, r13	; 0x04
     91a:	cb 82       	std	Y+3, r12	; 0x03
     91c:	ed 82       	std	Y+5, r14	; 0x05
     91e:	fe 82       	std	Y+6, r15	; 0x06
     920:	0f 83       	std	Y+7, r16	; 0x07
     922:	18 87       	std	Y+8, r17	; 0x08
     924:	c8 01       	movw	r24, r16
     926:	b7 01       	movw	r22, r14
     928:	0e 94 80 05 	call	0xb00	; 0xb00 <__clzsi2>
     92c:	01 97       	sbiw	r24, 0x01	; 1
     92e:	18 16       	cp	r1, r24
     930:	19 06       	cpc	r1, r25
     932:	84 f4       	brge	.+32     	; 0x954 <__floatsisf+0xaa>
     934:	08 2e       	mov	r0, r24
     936:	04 c0       	rjmp	.+8      	; 0x940 <__floatsisf+0x96>
     938:	ee 0c       	add	r14, r14
     93a:	ff 1c       	adc	r15, r15
     93c:	00 1f       	adc	r16, r16
     93e:	11 1f       	adc	r17, r17
     940:	0a 94       	dec	r0
     942:	d2 f7       	brpl	.-12     	; 0x938 <__floatsisf+0x8e>
     944:	ed 82       	std	Y+5, r14	; 0x05
     946:	fe 82       	std	Y+6, r15	; 0x06
     948:	0f 83       	std	Y+7, r16	; 0x07
     94a:	18 87       	std	Y+8, r17	; 0x08
     94c:	c8 1a       	sub	r12, r24
     94e:	d9 0a       	sbc	r13, r25
     950:	dc 82       	std	Y+4, r13	; 0x04
     952:	cb 82       	std	Y+3, r12	; 0x03
     954:	ba 82       	std	Y+2, r11	; 0x02
     956:	ce 01       	movw	r24, r28
     958:	01 96       	adiw	r24, 0x01	; 1
     95a:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__pack_f>
     95e:	28 96       	adiw	r28, 0x08	; 8
     960:	e9 e0       	ldi	r30, 0x09	; 9
     962:	0c 94 24 21 	jmp	0x4248	; 0x4248 <__epilogue_restores__+0x12>

00000966 <__fixsfsi>:
     966:	ac e0       	ldi	r26, 0x0C	; 12
     968:	b0 e0       	ldi	r27, 0x00	; 0
     96a:	e9 eb       	ldi	r30, 0xB9	; 185
     96c:	f4 e0       	ldi	r31, 0x04	; 4
     96e:	0c 94 0f 21 	jmp	0x421e	; 0x421e <__prologue_saves__+0x20>
     972:	69 83       	std	Y+1, r22	; 0x01
     974:	7a 83       	std	Y+2, r23	; 0x02
     976:	8b 83       	std	Y+3, r24	; 0x03
     978:	9c 83       	std	Y+4, r25	; 0x04
     97a:	ce 01       	movw	r24, r28
     97c:	01 96       	adiw	r24, 0x01	; 1
     97e:	be 01       	movw	r22, r28
     980:	6b 5f       	subi	r22, 0xFB	; 251
     982:	7f 4f       	sbci	r23, 0xFF	; 255
     984:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     988:	8d 81       	ldd	r24, Y+5	; 0x05
     98a:	82 30       	cpi	r24, 0x02	; 2
     98c:	61 f1       	breq	.+88     	; 0x9e6 <__fixsfsi+0x80>
     98e:	82 30       	cpi	r24, 0x02	; 2
     990:	50 f1       	brcs	.+84     	; 0x9e6 <__fixsfsi+0x80>
     992:	84 30       	cpi	r24, 0x04	; 4
     994:	21 f4       	brne	.+8      	; 0x99e <__fixsfsi+0x38>
     996:	8e 81       	ldd	r24, Y+6	; 0x06
     998:	88 23       	and	r24, r24
     99a:	51 f1       	breq	.+84     	; 0x9f0 <__fixsfsi+0x8a>
     99c:	2e c0       	rjmp	.+92     	; 0x9fa <__fixsfsi+0x94>
     99e:	2f 81       	ldd	r18, Y+7	; 0x07
     9a0:	38 85       	ldd	r19, Y+8	; 0x08
     9a2:	37 fd       	sbrc	r19, 7
     9a4:	20 c0       	rjmp	.+64     	; 0x9e6 <__fixsfsi+0x80>
     9a6:	6e 81       	ldd	r22, Y+6	; 0x06
     9a8:	2f 31       	cpi	r18, 0x1F	; 31
     9aa:	31 05       	cpc	r19, r1
     9ac:	1c f0       	brlt	.+6      	; 0x9b4 <__fixsfsi+0x4e>
     9ae:	66 23       	and	r22, r22
     9b0:	f9 f0       	breq	.+62     	; 0x9f0 <__fixsfsi+0x8a>
     9b2:	23 c0       	rjmp	.+70     	; 0x9fa <__fixsfsi+0x94>
     9b4:	8e e1       	ldi	r24, 0x1E	; 30
     9b6:	90 e0       	ldi	r25, 0x00	; 0
     9b8:	82 1b       	sub	r24, r18
     9ba:	93 0b       	sbc	r25, r19
     9bc:	29 85       	ldd	r18, Y+9	; 0x09
     9be:	3a 85       	ldd	r19, Y+10	; 0x0a
     9c0:	4b 85       	ldd	r20, Y+11	; 0x0b
     9c2:	5c 85       	ldd	r21, Y+12	; 0x0c
     9c4:	04 c0       	rjmp	.+8      	; 0x9ce <__fixsfsi+0x68>
     9c6:	56 95       	lsr	r21
     9c8:	47 95       	ror	r20
     9ca:	37 95       	ror	r19
     9cc:	27 95       	ror	r18
     9ce:	8a 95       	dec	r24
     9d0:	d2 f7       	brpl	.-12     	; 0x9c6 <__fixsfsi+0x60>
     9d2:	66 23       	and	r22, r22
     9d4:	b1 f0       	breq	.+44     	; 0xa02 <__fixsfsi+0x9c>
     9d6:	50 95       	com	r21
     9d8:	40 95       	com	r20
     9da:	30 95       	com	r19
     9dc:	21 95       	neg	r18
     9de:	3f 4f       	sbci	r19, 0xFF	; 255
     9e0:	4f 4f       	sbci	r20, 0xFF	; 255
     9e2:	5f 4f       	sbci	r21, 0xFF	; 255
     9e4:	0e c0       	rjmp	.+28     	; 0xa02 <__fixsfsi+0x9c>
     9e6:	20 e0       	ldi	r18, 0x00	; 0
     9e8:	30 e0       	ldi	r19, 0x00	; 0
     9ea:	40 e0       	ldi	r20, 0x00	; 0
     9ec:	50 e0       	ldi	r21, 0x00	; 0
     9ee:	09 c0       	rjmp	.+18     	; 0xa02 <__fixsfsi+0x9c>
     9f0:	2f ef       	ldi	r18, 0xFF	; 255
     9f2:	3f ef       	ldi	r19, 0xFF	; 255
     9f4:	4f ef       	ldi	r20, 0xFF	; 255
     9f6:	5f e7       	ldi	r21, 0x7F	; 127
     9f8:	04 c0       	rjmp	.+8      	; 0xa02 <__fixsfsi+0x9c>
     9fa:	20 e0       	ldi	r18, 0x00	; 0
     9fc:	30 e0       	ldi	r19, 0x00	; 0
     9fe:	40 e0       	ldi	r20, 0x00	; 0
     a00:	50 e8       	ldi	r21, 0x80	; 128
     a02:	b9 01       	movw	r22, r18
     a04:	ca 01       	movw	r24, r20
     a06:	2c 96       	adiw	r28, 0x0c	; 12
     a08:	e2 e0       	ldi	r30, 0x02	; 2
     a0a:	0c 94 2b 21 	jmp	0x4256	; 0x4256 <__epilogue_restores__+0x20>

00000a0e <__floatunsisf>:
     a0e:	a8 e0       	ldi	r26, 0x08	; 8
     a10:	b0 e0       	ldi	r27, 0x00	; 0
     a12:	ed e0       	ldi	r30, 0x0D	; 13
     a14:	f5 e0       	ldi	r31, 0x05	; 5
     a16:	0c 94 07 21 	jmp	0x420e	; 0x420e <__prologue_saves__+0x10>
     a1a:	7b 01       	movw	r14, r22
     a1c:	8c 01       	movw	r16, r24
     a1e:	61 15       	cp	r22, r1
     a20:	71 05       	cpc	r23, r1
     a22:	81 05       	cpc	r24, r1
     a24:	91 05       	cpc	r25, r1
     a26:	19 f4       	brne	.+6      	; 0xa2e <__floatunsisf+0x20>
     a28:	82 e0       	ldi	r24, 0x02	; 2
     a2a:	89 83       	std	Y+1, r24	; 0x01
     a2c:	60 c0       	rjmp	.+192    	; 0xaee <__floatunsisf+0xe0>
     a2e:	83 e0       	ldi	r24, 0x03	; 3
     a30:	89 83       	std	Y+1, r24	; 0x01
     a32:	8e e1       	ldi	r24, 0x1E	; 30
     a34:	c8 2e       	mov	r12, r24
     a36:	d1 2c       	mov	r13, r1
     a38:	dc 82       	std	Y+4, r13	; 0x04
     a3a:	cb 82       	std	Y+3, r12	; 0x03
     a3c:	ed 82       	std	Y+5, r14	; 0x05
     a3e:	fe 82       	std	Y+6, r15	; 0x06
     a40:	0f 83       	std	Y+7, r16	; 0x07
     a42:	18 87       	std	Y+8, r17	; 0x08
     a44:	c8 01       	movw	r24, r16
     a46:	b7 01       	movw	r22, r14
     a48:	0e 94 80 05 	call	0xb00	; 0xb00 <__clzsi2>
     a4c:	fc 01       	movw	r30, r24
     a4e:	31 97       	sbiw	r30, 0x01	; 1
     a50:	f7 ff       	sbrs	r31, 7
     a52:	3b c0       	rjmp	.+118    	; 0xaca <__floatunsisf+0xbc>
     a54:	22 27       	eor	r18, r18
     a56:	33 27       	eor	r19, r19
     a58:	2e 1b       	sub	r18, r30
     a5a:	3f 0b       	sbc	r19, r31
     a5c:	57 01       	movw	r10, r14
     a5e:	68 01       	movw	r12, r16
     a60:	02 2e       	mov	r0, r18
     a62:	04 c0       	rjmp	.+8      	; 0xa6c <__floatunsisf+0x5e>
     a64:	d6 94       	lsr	r13
     a66:	c7 94       	ror	r12
     a68:	b7 94       	ror	r11
     a6a:	a7 94       	ror	r10
     a6c:	0a 94       	dec	r0
     a6e:	d2 f7       	brpl	.-12     	; 0xa64 <__floatunsisf+0x56>
     a70:	40 e0       	ldi	r20, 0x00	; 0
     a72:	50 e0       	ldi	r21, 0x00	; 0
     a74:	60 e0       	ldi	r22, 0x00	; 0
     a76:	70 e0       	ldi	r23, 0x00	; 0
     a78:	81 e0       	ldi	r24, 0x01	; 1
     a7a:	90 e0       	ldi	r25, 0x00	; 0
     a7c:	a0 e0       	ldi	r26, 0x00	; 0
     a7e:	b0 e0       	ldi	r27, 0x00	; 0
     a80:	04 c0       	rjmp	.+8      	; 0xa8a <__floatunsisf+0x7c>
     a82:	88 0f       	add	r24, r24
     a84:	99 1f       	adc	r25, r25
     a86:	aa 1f       	adc	r26, r26
     a88:	bb 1f       	adc	r27, r27
     a8a:	2a 95       	dec	r18
     a8c:	d2 f7       	brpl	.-12     	; 0xa82 <__floatunsisf+0x74>
     a8e:	01 97       	sbiw	r24, 0x01	; 1
     a90:	a1 09       	sbc	r26, r1
     a92:	b1 09       	sbc	r27, r1
     a94:	8e 21       	and	r24, r14
     a96:	9f 21       	and	r25, r15
     a98:	a0 23       	and	r26, r16
     a9a:	b1 23       	and	r27, r17
     a9c:	00 97       	sbiw	r24, 0x00	; 0
     a9e:	a1 05       	cpc	r26, r1
     aa0:	b1 05       	cpc	r27, r1
     aa2:	21 f0       	breq	.+8      	; 0xaac <__floatunsisf+0x9e>
     aa4:	41 e0       	ldi	r20, 0x01	; 1
     aa6:	50 e0       	ldi	r21, 0x00	; 0
     aa8:	60 e0       	ldi	r22, 0x00	; 0
     aaa:	70 e0       	ldi	r23, 0x00	; 0
     aac:	4a 29       	or	r20, r10
     aae:	5b 29       	or	r21, r11
     ab0:	6c 29       	or	r22, r12
     ab2:	7d 29       	or	r23, r13
     ab4:	4d 83       	std	Y+5, r20	; 0x05
     ab6:	5e 83       	std	Y+6, r21	; 0x06
     ab8:	6f 83       	std	Y+7, r22	; 0x07
     aba:	78 87       	std	Y+8, r23	; 0x08
     abc:	8e e1       	ldi	r24, 0x1E	; 30
     abe:	90 e0       	ldi	r25, 0x00	; 0
     ac0:	8e 1b       	sub	r24, r30
     ac2:	9f 0b       	sbc	r25, r31
     ac4:	9c 83       	std	Y+4, r25	; 0x04
     ac6:	8b 83       	std	Y+3, r24	; 0x03
     ac8:	12 c0       	rjmp	.+36     	; 0xaee <__floatunsisf+0xe0>
     aca:	30 97       	sbiw	r30, 0x00	; 0
     acc:	81 f0       	breq	.+32     	; 0xaee <__floatunsisf+0xe0>
     ace:	0e 2e       	mov	r0, r30
     ad0:	04 c0       	rjmp	.+8      	; 0xada <__floatunsisf+0xcc>
     ad2:	ee 0c       	add	r14, r14
     ad4:	ff 1c       	adc	r15, r15
     ad6:	00 1f       	adc	r16, r16
     ad8:	11 1f       	adc	r17, r17
     ada:	0a 94       	dec	r0
     adc:	d2 f7       	brpl	.-12     	; 0xad2 <__floatunsisf+0xc4>
     ade:	ed 82       	std	Y+5, r14	; 0x05
     ae0:	fe 82       	std	Y+6, r15	; 0x06
     ae2:	0f 83       	std	Y+7, r16	; 0x07
     ae4:	18 87       	std	Y+8, r17	; 0x08
     ae6:	ce 1a       	sub	r12, r30
     ae8:	df 0a       	sbc	r13, r31
     aea:	dc 82       	std	Y+4, r13	; 0x04
     aec:	cb 82       	std	Y+3, r12	; 0x03
     aee:	1a 82       	std	Y+2, r1	; 0x02
     af0:	ce 01       	movw	r24, r28
     af2:	01 96       	adiw	r24, 0x01	; 1
     af4:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__pack_f>
     af8:	28 96       	adiw	r28, 0x08	; 8
     afa:	ea e0       	ldi	r30, 0x0A	; 10
     afc:	0c 94 23 21 	jmp	0x4246	; 0x4246 <__epilogue_restores__+0x10>

00000b00 <__clzsi2>:
     b00:	ef 92       	push	r14
     b02:	ff 92       	push	r15
     b04:	0f 93       	push	r16
     b06:	1f 93       	push	r17
     b08:	7b 01       	movw	r14, r22
     b0a:	8c 01       	movw	r16, r24
     b0c:	80 e0       	ldi	r24, 0x00	; 0
     b0e:	e8 16       	cp	r14, r24
     b10:	80 e0       	ldi	r24, 0x00	; 0
     b12:	f8 06       	cpc	r15, r24
     b14:	81 e0       	ldi	r24, 0x01	; 1
     b16:	08 07       	cpc	r16, r24
     b18:	80 e0       	ldi	r24, 0x00	; 0
     b1a:	18 07       	cpc	r17, r24
     b1c:	88 f4       	brcc	.+34     	; 0xb40 <__clzsi2+0x40>
     b1e:	8f ef       	ldi	r24, 0xFF	; 255
     b20:	e8 16       	cp	r14, r24
     b22:	f1 04       	cpc	r15, r1
     b24:	01 05       	cpc	r16, r1
     b26:	11 05       	cpc	r17, r1
     b28:	31 f0       	breq	.+12     	; 0xb36 <__clzsi2+0x36>
     b2a:	28 f0       	brcs	.+10     	; 0xb36 <__clzsi2+0x36>
     b2c:	88 e0       	ldi	r24, 0x08	; 8
     b2e:	90 e0       	ldi	r25, 0x00	; 0
     b30:	a0 e0       	ldi	r26, 0x00	; 0
     b32:	b0 e0       	ldi	r27, 0x00	; 0
     b34:	17 c0       	rjmp	.+46     	; 0xb64 <__clzsi2+0x64>
     b36:	80 e0       	ldi	r24, 0x00	; 0
     b38:	90 e0       	ldi	r25, 0x00	; 0
     b3a:	a0 e0       	ldi	r26, 0x00	; 0
     b3c:	b0 e0       	ldi	r27, 0x00	; 0
     b3e:	12 c0       	rjmp	.+36     	; 0xb64 <__clzsi2+0x64>
     b40:	80 e0       	ldi	r24, 0x00	; 0
     b42:	e8 16       	cp	r14, r24
     b44:	80 e0       	ldi	r24, 0x00	; 0
     b46:	f8 06       	cpc	r15, r24
     b48:	80 e0       	ldi	r24, 0x00	; 0
     b4a:	08 07       	cpc	r16, r24
     b4c:	81 e0       	ldi	r24, 0x01	; 1
     b4e:	18 07       	cpc	r17, r24
     b50:	28 f0       	brcs	.+10     	; 0xb5c <__clzsi2+0x5c>
     b52:	88 e1       	ldi	r24, 0x18	; 24
     b54:	90 e0       	ldi	r25, 0x00	; 0
     b56:	a0 e0       	ldi	r26, 0x00	; 0
     b58:	b0 e0       	ldi	r27, 0x00	; 0
     b5a:	04 c0       	rjmp	.+8      	; 0xb64 <__clzsi2+0x64>
     b5c:	80 e1       	ldi	r24, 0x10	; 16
     b5e:	90 e0       	ldi	r25, 0x00	; 0
     b60:	a0 e0       	ldi	r26, 0x00	; 0
     b62:	b0 e0       	ldi	r27, 0x00	; 0
     b64:	20 e2       	ldi	r18, 0x20	; 32
     b66:	30 e0       	ldi	r19, 0x00	; 0
     b68:	40 e0       	ldi	r20, 0x00	; 0
     b6a:	50 e0       	ldi	r21, 0x00	; 0
     b6c:	28 1b       	sub	r18, r24
     b6e:	39 0b       	sbc	r19, r25
     b70:	4a 0b       	sbc	r20, r26
     b72:	5b 0b       	sbc	r21, r27
     b74:	04 c0       	rjmp	.+8      	; 0xb7e <__clzsi2+0x7e>
     b76:	16 95       	lsr	r17
     b78:	07 95       	ror	r16
     b7a:	f7 94       	ror	r15
     b7c:	e7 94       	ror	r14
     b7e:	8a 95       	dec	r24
     b80:	d2 f7       	brpl	.-12     	; 0xb76 <__clzsi2+0x76>
     b82:	f7 01       	movw	r30, r14
     b84:	e8 59       	subi	r30, 0x98	; 152
     b86:	ff 4f       	sbci	r31, 0xFF	; 255
     b88:	80 81       	ld	r24, Z
     b8a:	28 1b       	sub	r18, r24
     b8c:	31 09       	sbc	r19, r1
     b8e:	41 09       	sbc	r20, r1
     b90:	51 09       	sbc	r21, r1
     b92:	c9 01       	movw	r24, r18
     b94:	1f 91       	pop	r17
     b96:	0f 91       	pop	r16
     b98:	ff 90       	pop	r15
     b9a:	ef 90       	pop	r14
     b9c:	08 95       	ret

00000b9e <__pack_f>:
     b9e:	df 92       	push	r13
     ba0:	ef 92       	push	r14
     ba2:	ff 92       	push	r15
     ba4:	0f 93       	push	r16
     ba6:	1f 93       	push	r17
     ba8:	fc 01       	movw	r30, r24
     baa:	e4 80       	ldd	r14, Z+4	; 0x04
     bac:	f5 80       	ldd	r15, Z+5	; 0x05
     bae:	06 81       	ldd	r16, Z+6	; 0x06
     bb0:	17 81       	ldd	r17, Z+7	; 0x07
     bb2:	d1 80       	ldd	r13, Z+1	; 0x01
     bb4:	80 81       	ld	r24, Z
     bb6:	82 30       	cpi	r24, 0x02	; 2
     bb8:	48 f4       	brcc	.+18     	; 0xbcc <__pack_f+0x2e>
     bba:	80 e0       	ldi	r24, 0x00	; 0
     bbc:	90 e0       	ldi	r25, 0x00	; 0
     bbe:	a0 e1       	ldi	r26, 0x10	; 16
     bc0:	b0 e0       	ldi	r27, 0x00	; 0
     bc2:	e8 2a       	or	r14, r24
     bc4:	f9 2a       	or	r15, r25
     bc6:	0a 2b       	or	r16, r26
     bc8:	1b 2b       	or	r17, r27
     bca:	a5 c0       	rjmp	.+330    	; 0xd16 <__pack_f+0x178>
     bcc:	84 30       	cpi	r24, 0x04	; 4
     bce:	09 f4       	brne	.+2      	; 0xbd2 <__pack_f+0x34>
     bd0:	9f c0       	rjmp	.+318    	; 0xd10 <__pack_f+0x172>
     bd2:	82 30       	cpi	r24, 0x02	; 2
     bd4:	21 f4       	brne	.+8      	; 0xbde <__pack_f+0x40>
     bd6:	ee 24       	eor	r14, r14
     bd8:	ff 24       	eor	r15, r15
     bda:	87 01       	movw	r16, r14
     bdc:	05 c0       	rjmp	.+10     	; 0xbe8 <__pack_f+0x4a>
     bde:	e1 14       	cp	r14, r1
     be0:	f1 04       	cpc	r15, r1
     be2:	01 05       	cpc	r16, r1
     be4:	11 05       	cpc	r17, r1
     be6:	19 f4       	brne	.+6      	; 0xbee <__pack_f+0x50>
     be8:	e0 e0       	ldi	r30, 0x00	; 0
     bea:	f0 e0       	ldi	r31, 0x00	; 0
     bec:	96 c0       	rjmp	.+300    	; 0xd1a <__pack_f+0x17c>
     bee:	62 81       	ldd	r22, Z+2	; 0x02
     bf0:	73 81       	ldd	r23, Z+3	; 0x03
     bf2:	9f ef       	ldi	r25, 0xFF	; 255
     bf4:	62 38       	cpi	r22, 0x82	; 130
     bf6:	79 07       	cpc	r23, r25
     bf8:	0c f0       	brlt	.+2      	; 0xbfc <__pack_f+0x5e>
     bfa:	5b c0       	rjmp	.+182    	; 0xcb2 <__pack_f+0x114>
     bfc:	22 e8       	ldi	r18, 0x82	; 130
     bfe:	3f ef       	ldi	r19, 0xFF	; 255
     c00:	26 1b       	sub	r18, r22
     c02:	37 0b       	sbc	r19, r23
     c04:	2a 31       	cpi	r18, 0x1A	; 26
     c06:	31 05       	cpc	r19, r1
     c08:	2c f0       	brlt	.+10     	; 0xc14 <__pack_f+0x76>
     c0a:	20 e0       	ldi	r18, 0x00	; 0
     c0c:	30 e0       	ldi	r19, 0x00	; 0
     c0e:	40 e0       	ldi	r20, 0x00	; 0
     c10:	50 e0       	ldi	r21, 0x00	; 0
     c12:	2a c0       	rjmp	.+84     	; 0xc68 <__pack_f+0xca>
     c14:	b8 01       	movw	r22, r16
     c16:	a7 01       	movw	r20, r14
     c18:	02 2e       	mov	r0, r18
     c1a:	04 c0       	rjmp	.+8      	; 0xc24 <__pack_f+0x86>
     c1c:	76 95       	lsr	r23
     c1e:	67 95       	ror	r22
     c20:	57 95       	ror	r21
     c22:	47 95       	ror	r20
     c24:	0a 94       	dec	r0
     c26:	d2 f7       	brpl	.-12     	; 0xc1c <__pack_f+0x7e>
     c28:	81 e0       	ldi	r24, 0x01	; 1
     c2a:	90 e0       	ldi	r25, 0x00	; 0
     c2c:	a0 e0       	ldi	r26, 0x00	; 0
     c2e:	b0 e0       	ldi	r27, 0x00	; 0
     c30:	04 c0       	rjmp	.+8      	; 0xc3a <__pack_f+0x9c>
     c32:	88 0f       	add	r24, r24
     c34:	99 1f       	adc	r25, r25
     c36:	aa 1f       	adc	r26, r26
     c38:	bb 1f       	adc	r27, r27
     c3a:	2a 95       	dec	r18
     c3c:	d2 f7       	brpl	.-12     	; 0xc32 <__pack_f+0x94>
     c3e:	01 97       	sbiw	r24, 0x01	; 1
     c40:	a1 09       	sbc	r26, r1
     c42:	b1 09       	sbc	r27, r1
     c44:	8e 21       	and	r24, r14
     c46:	9f 21       	and	r25, r15
     c48:	a0 23       	and	r26, r16
     c4a:	b1 23       	and	r27, r17
     c4c:	00 97       	sbiw	r24, 0x00	; 0
     c4e:	a1 05       	cpc	r26, r1
     c50:	b1 05       	cpc	r27, r1
     c52:	21 f0       	breq	.+8      	; 0xc5c <__pack_f+0xbe>
     c54:	81 e0       	ldi	r24, 0x01	; 1
     c56:	90 e0       	ldi	r25, 0x00	; 0
     c58:	a0 e0       	ldi	r26, 0x00	; 0
     c5a:	b0 e0       	ldi	r27, 0x00	; 0
     c5c:	9a 01       	movw	r18, r20
     c5e:	ab 01       	movw	r20, r22
     c60:	28 2b       	or	r18, r24
     c62:	39 2b       	or	r19, r25
     c64:	4a 2b       	or	r20, r26
     c66:	5b 2b       	or	r21, r27
     c68:	da 01       	movw	r26, r20
     c6a:	c9 01       	movw	r24, r18
     c6c:	8f 77       	andi	r24, 0x7F	; 127
     c6e:	90 70       	andi	r25, 0x00	; 0
     c70:	a0 70       	andi	r26, 0x00	; 0
     c72:	b0 70       	andi	r27, 0x00	; 0
     c74:	80 34       	cpi	r24, 0x40	; 64
     c76:	91 05       	cpc	r25, r1
     c78:	a1 05       	cpc	r26, r1
     c7a:	b1 05       	cpc	r27, r1
     c7c:	39 f4       	brne	.+14     	; 0xc8c <__pack_f+0xee>
     c7e:	27 ff       	sbrs	r18, 7
     c80:	09 c0       	rjmp	.+18     	; 0xc94 <__pack_f+0xf6>
     c82:	20 5c       	subi	r18, 0xC0	; 192
     c84:	3f 4f       	sbci	r19, 0xFF	; 255
     c86:	4f 4f       	sbci	r20, 0xFF	; 255
     c88:	5f 4f       	sbci	r21, 0xFF	; 255
     c8a:	04 c0       	rjmp	.+8      	; 0xc94 <__pack_f+0xf6>
     c8c:	21 5c       	subi	r18, 0xC1	; 193
     c8e:	3f 4f       	sbci	r19, 0xFF	; 255
     c90:	4f 4f       	sbci	r20, 0xFF	; 255
     c92:	5f 4f       	sbci	r21, 0xFF	; 255
     c94:	e0 e0       	ldi	r30, 0x00	; 0
     c96:	f0 e0       	ldi	r31, 0x00	; 0
     c98:	20 30       	cpi	r18, 0x00	; 0
     c9a:	a0 e0       	ldi	r26, 0x00	; 0
     c9c:	3a 07       	cpc	r19, r26
     c9e:	a0 e0       	ldi	r26, 0x00	; 0
     ca0:	4a 07       	cpc	r20, r26
     ca2:	a0 e4       	ldi	r26, 0x40	; 64
     ca4:	5a 07       	cpc	r21, r26
     ca6:	10 f0       	brcs	.+4      	; 0xcac <__pack_f+0x10e>
     ca8:	e1 e0       	ldi	r30, 0x01	; 1
     caa:	f0 e0       	ldi	r31, 0x00	; 0
     cac:	79 01       	movw	r14, r18
     cae:	8a 01       	movw	r16, r20
     cb0:	27 c0       	rjmp	.+78     	; 0xd00 <__pack_f+0x162>
     cb2:	60 38       	cpi	r22, 0x80	; 128
     cb4:	71 05       	cpc	r23, r1
     cb6:	64 f5       	brge	.+88     	; 0xd10 <__pack_f+0x172>
     cb8:	fb 01       	movw	r30, r22
     cba:	e1 58       	subi	r30, 0x81	; 129
     cbc:	ff 4f       	sbci	r31, 0xFF	; 255
     cbe:	d8 01       	movw	r26, r16
     cc0:	c7 01       	movw	r24, r14
     cc2:	8f 77       	andi	r24, 0x7F	; 127
     cc4:	90 70       	andi	r25, 0x00	; 0
     cc6:	a0 70       	andi	r26, 0x00	; 0
     cc8:	b0 70       	andi	r27, 0x00	; 0
     cca:	80 34       	cpi	r24, 0x40	; 64
     ccc:	91 05       	cpc	r25, r1
     cce:	a1 05       	cpc	r26, r1
     cd0:	b1 05       	cpc	r27, r1
     cd2:	39 f4       	brne	.+14     	; 0xce2 <__pack_f+0x144>
     cd4:	e7 fe       	sbrs	r14, 7
     cd6:	0d c0       	rjmp	.+26     	; 0xcf2 <__pack_f+0x154>
     cd8:	80 e4       	ldi	r24, 0x40	; 64
     cda:	90 e0       	ldi	r25, 0x00	; 0
     cdc:	a0 e0       	ldi	r26, 0x00	; 0
     cde:	b0 e0       	ldi	r27, 0x00	; 0
     ce0:	04 c0       	rjmp	.+8      	; 0xcea <__pack_f+0x14c>
     ce2:	8f e3       	ldi	r24, 0x3F	; 63
     ce4:	90 e0       	ldi	r25, 0x00	; 0
     ce6:	a0 e0       	ldi	r26, 0x00	; 0
     ce8:	b0 e0       	ldi	r27, 0x00	; 0
     cea:	e8 0e       	add	r14, r24
     cec:	f9 1e       	adc	r15, r25
     cee:	0a 1f       	adc	r16, r26
     cf0:	1b 1f       	adc	r17, r27
     cf2:	17 ff       	sbrs	r17, 7
     cf4:	05 c0       	rjmp	.+10     	; 0xd00 <__pack_f+0x162>
     cf6:	16 95       	lsr	r17
     cf8:	07 95       	ror	r16
     cfa:	f7 94       	ror	r15
     cfc:	e7 94       	ror	r14
     cfe:	31 96       	adiw	r30, 0x01	; 1
     d00:	87 e0       	ldi	r24, 0x07	; 7
     d02:	16 95       	lsr	r17
     d04:	07 95       	ror	r16
     d06:	f7 94       	ror	r15
     d08:	e7 94       	ror	r14
     d0a:	8a 95       	dec	r24
     d0c:	d1 f7       	brne	.-12     	; 0xd02 <__pack_f+0x164>
     d0e:	05 c0       	rjmp	.+10     	; 0xd1a <__pack_f+0x17c>
     d10:	ee 24       	eor	r14, r14
     d12:	ff 24       	eor	r15, r15
     d14:	87 01       	movw	r16, r14
     d16:	ef ef       	ldi	r30, 0xFF	; 255
     d18:	f0 e0       	ldi	r31, 0x00	; 0
     d1a:	6e 2f       	mov	r22, r30
     d1c:	67 95       	ror	r22
     d1e:	66 27       	eor	r22, r22
     d20:	67 95       	ror	r22
     d22:	90 2f       	mov	r25, r16
     d24:	9f 77       	andi	r25, 0x7F	; 127
     d26:	d7 94       	ror	r13
     d28:	dd 24       	eor	r13, r13
     d2a:	d7 94       	ror	r13
     d2c:	8e 2f       	mov	r24, r30
     d2e:	86 95       	lsr	r24
     d30:	49 2f       	mov	r20, r25
     d32:	46 2b       	or	r20, r22
     d34:	58 2f       	mov	r21, r24
     d36:	5d 29       	or	r21, r13
     d38:	b7 01       	movw	r22, r14
     d3a:	ca 01       	movw	r24, r20
     d3c:	1f 91       	pop	r17
     d3e:	0f 91       	pop	r16
     d40:	ff 90       	pop	r15
     d42:	ef 90       	pop	r14
     d44:	df 90       	pop	r13
     d46:	08 95       	ret

00000d48 <__unpack_f>:
     d48:	fc 01       	movw	r30, r24
     d4a:	db 01       	movw	r26, r22
     d4c:	40 81       	ld	r20, Z
     d4e:	51 81       	ldd	r21, Z+1	; 0x01
     d50:	22 81       	ldd	r18, Z+2	; 0x02
     d52:	62 2f       	mov	r22, r18
     d54:	6f 77       	andi	r22, 0x7F	; 127
     d56:	70 e0       	ldi	r23, 0x00	; 0
     d58:	22 1f       	adc	r18, r18
     d5a:	22 27       	eor	r18, r18
     d5c:	22 1f       	adc	r18, r18
     d5e:	93 81       	ldd	r25, Z+3	; 0x03
     d60:	89 2f       	mov	r24, r25
     d62:	88 0f       	add	r24, r24
     d64:	82 2b       	or	r24, r18
     d66:	28 2f       	mov	r18, r24
     d68:	30 e0       	ldi	r19, 0x00	; 0
     d6a:	99 1f       	adc	r25, r25
     d6c:	99 27       	eor	r25, r25
     d6e:	99 1f       	adc	r25, r25
     d70:	11 96       	adiw	r26, 0x01	; 1
     d72:	9c 93       	st	X, r25
     d74:	11 97       	sbiw	r26, 0x01	; 1
     d76:	21 15       	cp	r18, r1
     d78:	31 05       	cpc	r19, r1
     d7a:	a9 f5       	brne	.+106    	; 0xde6 <__unpack_f+0x9e>
     d7c:	41 15       	cp	r20, r1
     d7e:	51 05       	cpc	r21, r1
     d80:	61 05       	cpc	r22, r1
     d82:	71 05       	cpc	r23, r1
     d84:	11 f4       	brne	.+4      	; 0xd8a <__unpack_f+0x42>
     d86:	82 e0       	ldi	r24, 0x02	; 2
     d88:	37 c0       	rjmp	.+110    	; 0xdf8 <__unpack_f+0xb0>
     d8a:	82 e8       	ldi	r24, 0x82	; 130
     d8c:	9f ef       	ldi	r25, 0xFF	; 255
     d8e:	13 96       	adiw	r26, 0x03	; 3
     d90:	9c 93       	st	X, r25
     d92:	8e 93       	st	-X, r24
     d94:	12 97       	sbiw	r26, 0x02	; 2
     d96:	9a 01       	movw	r18, r20
     d98:	ab 01       	movw	r20, r22
     d9a:	67 e0       	ldi	r22, 0x07	; 7
     d9c:	22 0f       	add	r18, r18
     d9e:	33 1f       	adc	r19, r19
     da0:	44 1f       	adc	r20, r20
     da2:	55 1f       	adc	r21, r21
     da4:	6a 95       	dec	r22
     da6:	d1 f7       	brne	.-12     	; 0xd9c <__unpack_f+0x54>
     da8:	83 e0       	ldi	r24, 0x03	; 3
     daa:	8c 93       	st	X, r24
     dac:	0d c0       	rjmp	.+26     	; 0xdc8 <__unpack_f+0x80>
     dae:	22 0f       	add	r18, r18
     db0:	33 1f       	adc	r19, r19
     db2:	44 1f       	adc	r20, r20
     db4:	55 1f       	adc	r21, r21
     db6:	12 96       	adiw	r26, 0x02	; 2
     db8:	8d 91       	ld	r24, X+
     dba:	9c 91       	ld	r25, X
     dbc:	13 97       	sbiw	r26, 0x03	; 3
     dbe:	01 97       	sbiw	r24, 0x01	; 1
     dc0:	13 96       	adiw	r26, 0x03	; 3
     dc2:	9c 93       	st	X, r25
     dc4:	8e 93       	st	-X, r24
     dc6:	12 97       	sbiw	r26, 0x02	; 2
     dc8:	20 30       	cpi	r18, 0x00	; 0
     dca:	80 e0       	ldi	r24, 0x00	; 0
     dcc:	38 07       	cpc	r19, r24
     dce:	80 e0       	ldi	r24, 0x00	; 0
     dd0:	48 07       	cpc	r20, r24
     dd2:	80 e4       	ldi	r24, 0x40	; 64
     dd4:	58 07       	cpc	r21, r24
     dd6:	58 f3       	brcs	.-42     	; 0xdae <__unpack_f+0x66>
     dd8:	14 96       	adiw	r26, 0x04	; 4
     dda:	2d 93       	st	X+, r18
     ddc:	3d 93       	st	X+, r19
     dde:	4d 93       	st	X+, r20
     de0:	5c 93       	st	X, r21
     de2:	17 97       	sbiw	r26, 0x07	; 7
     de4:	08 95       	ret
     de6:	2f 3f       	cpi	r18, 0xFF	; 255
     de8:	31 05       	cpc	r19, r1
     dea:	79 f4       	brne	.+30     	; 0xe0a <__unpack_f+0xc2>
     dec:	41 15       	cp	r20, r1
     dee:	51 05       	cpc	r21, r1
     df0:	61 05       	cpc	r22, r1
     df2:	71 05       	cpc	r23, r1
     df4:	19 f4       	brne	.+6      	; 0xdfc <__unpack_f+0xb4>
     df6:	84 e0       	ldi	r24, 0x04	; 4
     df8:	8c 93       	st	X, r24
     dfa:	08 95       	ret
     dfc:	64 ff       	sbrs	r22, 4
     dfe:	03 c0       	rjmp	.+6      	; 0xe06 <__unpack_f+0xbe>
     e00:	81 e0       	ldi	r24, 0x01	; 1
     e02:	8c 93       	st	X, r24
     e04:	12 c0       	rjmp	.+36     	; 0xe2a <__unpack_f+0xe2>
     e06:	1c 92       	st	X, r1
     e08:	10 c0       	rjmp	.+32     	; 0xe2a <__unpack_f+0xe2>
     e0a:	2f 57       	subi	r18, 0x7F	; 127
     e0c:	30 40       	sbci	r19, 0x00	; 0
     e0e:	13 96       	adiw	r26, 0x03	; 3
     e10:	3c 93       	st	X, r19
     e12:	2e 93       	st	-X, r18
     e14:	12 97       	sbiw	r26, 0x02	; 2
     e16:	83 e0       	ldi	r24, 0x03	; 3
     e18:	8c 93       	st	X, r24
     e1a:	87 e0       	ldi	r24, 0x07	; 7
     e1c:	44 0f       	add	r20, r20
     e1e:	55 1f       	adc	r21, r21
     e20:	66 1f       	adc	r22, r22
     e22:	77 1f       	adc	r23, r23
     e24:	8a 95       	dec	r24
     e26:	d1 f7       	brne	.-12     	; 0xe1c <__unpack_f+0xd4>
     e28:	70 64       	ori	r23, 0x40	; 64
     e2a:	14 96       	adiw	r26, 0x04	; 4
     e2c:	4d 93       	st	X+, r20
     e2e:	5d 93       	st	X+, r21
     e30:	6d 93       	st	X+, r22
     e32:	7c 93       	st	X, r23
     e34:	17 97       	sbiw	r26, 0x07	; 7
     e36:	08 95       	ret

00000e38 <__fpcmp_parts_f>:
     e38:	1f 93       	push	r17
     e3a:	dc 01       	movw	r26, r24
     e3c:	fb 01       	movw	r30, r22
     e3e:	9c 91       	ld	r25, X
     e40:	92 30       	cpi	r25, 0x02	; 2
     e42:	08 f4       	brcc	.+2      	; 0xe46 <__fpcmp_parts_f+0xe>
     e44:	47 c0       	rjmp	.+142    	; 0xed4 <__fpcmp_parts_f+0x9c>
     e46:	80 81       	ld	r24, Z
     e48:	82 30       	cpi	r24, 0x02	; 2
     e4a:	08 f4       	brcc	.+2      	; 0xe4e <__fpcmp_parts_f+0x16>
     e4c:	43 c0       	rjmp	.+134    	; 0xed4 <__fpcmp_parts_f+0x9c>
     e4e:	94 30       	cpi	r25, 0x04	; 4
     e50:	51 f4       	brne	.+20     	; 0xe66 <__fpcmp_parts_f+0x2e>
     e52:	11 96       	adiw	r26, 0x01	; 1
     e54:	1c 91       	ld	r17, X
     e56:	84 30       	cpi	r24, 0x04	; 4
     e58:	99 f5       	brne	.+102    	; 0xec0 <__fpcmp_parts_f+0x88>
     e5a:	81 81       	ldd	r24, Z+1	; 0x01
     e5c:	68 2f       	mov	r22, r24
     e5e:	70 e0       	ldi	r23, 0x00	; 0
     e60:	61 1b       	sub	r22, r17
     e62:	71 09       	sbc	r23, r1
     e64:	3f c0       	rjmp	.+126    	; 0xee4 <__fpcmp_parts_f+0xac>
     e66:	84 30       	cpi	r24, 0x04	; 4
     e68:	21 f0       	breq	.+8      	; 0xe72 <__fpcmp_parts_f+0x3a>
     e6a:	92 30       	cpi	r25, 0x02	; 2
     e6c:	31 f4       	brne	.+12     	; 0xe7a <__fpcmp_parts_f+0x42>
     e6e:	82 30       	cpi	r24, 0x02	; 2
     e70:	b9 f1       	breq	.+110    	; 0xee0 <__fpcmp_parts_f+0xa8>
     e72:	81 81       	ldd	r24, Z+1	; 0x01
     e74:	88 23       	and	r24, r24
     e76:	89 f1       	breq	.+98     	; 0xeda <__fpcmp_parts_f+0xa2>
     e78:	2d c0       	rjmp	.+90     	; 0xed4 <__fpcmp_parts_f+0x9c>
     e7a:	11 96       	adiw	r26, 0x01	; 1
     e7c:	1c 91       	ld	r17, X
     e7e:	11 97       	sbiw	r26, 0x01	; 1
     e80:	82 30       	cpi	r24, 0x02	; 2
     e82:	f1 f0       	breq	.+60     	; 0xec0 <__fpcmp_parts_f+0x88>
     e84:	81 81       	ldd	r24, Z+1	; 0x01
     e86:	18 17       	cp	r17, r24
     e88:	d9 f4       	brne	.+54     	; 0xec0 <__fpcmp_parts_f+0x88>
     e8a:	12 96       	adiw	r26, 0x02	; 2
     e8c:	2d 91       	ld	r18, X+
     e8e:	3c 91       	ld	r19, X
     e90:	13 97       	sbiw	r26, 0x03	; 3
     e92:	82 81       	ldd	r24, Z+2	; 0x02
     e94:	93 81       	ldd	r25, Z+3	; 0x03
     e96:	82 17       	cp	r24, r18
     e98:	93 07       	cpc	r25, r19
     e9a:	94 f0       	brlt	.+36     	; 0xec0 <__fpcmp_parts_f+0x88>
     e9c:	28 17       	cp	r18, r24
     e9e:	39 07       	cpc	r19, r25
     ea0:	bc f0       	brlt	.+46     	; 0xed0 <__fpcmp_parts_f+0x98>
     ea2:	14 96       	adiw	r26, 0x04	; 4
     ea4:	8d 91       	ld	r24, X+
     ea6:	9d 91       	ld	r25, X+
     ea8:	0d 90       	ld	r0, X+
     eaa:	bc 91       	ld	r27, X
     eac:	a0 2d       	mov	r26, r0
     eae:	24 81       	ldd	r18, Z+4	; 0x04
     eb0:	35 81       	ldd	r19, Z+5	; 0x05
     eb2:	46 81       	ldd	r20, Z+6	; 0x06
     eb4:	57 81       	ldd	r21, Z+7	; 0x07
     eb6:	28 17       	cp	r18, r24
     eb8:	39 07       	cpc	r19, r25
     eba:	4a 07       	cpc	r20, r26
     ebc:	5b 07       	cpc	r21, r27
     ebe:	18 f4       	brcc	.+6      	; 0xec6 <__fpcmp_parts_f+0x8e>
     ec0:	11 23       	and	r17, r17
     ec2:	41 f0       	breq	.+16     	; 0xed4 <__fpcmp_parts_f+0x9c>
     ec4:	0a c0       	rjmp	.+20     	; 0xeda <__fpcmp_parts_f+0xa2>
     ec6:	82 17       	cp	r24, r18
     ec8:	93 07       	cpc	r25, r19
     eca:	a4 07       	cpc	r26, r20
     ecc:	b5 07       	cpc	r27, r21
     ece:	40 f4       	brcc	.+16     	; 0xee0 <__fpcmp_parts_f+0xa8>
     ed0:	11 23       	and	r17, r17
     ed2:	19 f0       	breq	.+6      	; 0xeda <__fpcmp_parts_f+0xa2>
     ed4:	61 e0       	ldi	r22, 0x01	; 1
     ed6:	70 e0       	ldi	r23, 0x00	; 0
     ed8:	05 c0       	rjmp	.+10     	; 0xee4 <__fpcmp_parts_f+0xac>
     eda:	6f ef       	ldi	r22, 0xFF	; 255
     edc:	7f ef       	ldi	r23, 0xFF	; 255
     ede:	02 c0       	rjmp	.+4      	; 0xee4 <__fpcmp_parts_f+0xac>
     ee0:	60 e0       	ldi	r22, 0x00	; 0
     ee2:	70 e0       	ldi	r23, 0x00	; 0
     ee4:	cb 01       	movw	r24, r22
     ee6:	1f 91       	pop	r17
     ee8:	08 95       	ret

00000eea <__vector_14>:
volatile uint16 g_channelReading;

/**************************************************************************
 *                    Interrupt service routine
 * ***********************************************************************/
ISR(ADC_vect){
     eea:	1f 92       	push	r1
     eec:	0f 92       	push	r0
     eee:	0f b6       	in	r0, 0x3f	; 63
     ef0:	0f 92       	push	r0
     ef2:	11 24       	eor	r1, r1
     ef4:	8f 93       	push	r24
     ef6:	9f 93       	push	r25
     ef8:	ef 93       	push	r30
     efa:	ff 93       	push	r31
     efc:	df 93       	push	r29
     efe:	cf 93       	push	r28
     f00:	cd b7       	in	r28, 0x3d	; 61
     f02:	de b7       	in	r29, 0x3e	; 62

	g_channelReading = ADC_R;
     f04:	e4 e2       	ldi	r30, 0x24	; 36
     f06:	f0 e0       	ldi	r31, 0x00	; 0
     f08:	80 81       	ld	r24, Z
     f0a:	91 81       	ldd	r25, Z+1	; 0x01
     f0c:	90 93 77 01 	sts	0x0177, r25
     f10:	80 93 76 01 	sts	0x0176, r24
}//end ISR
     f14:	cf 91       	pop	r28
     f16:	df 91       	pop	r29
     f18:	ff 91       	pop	r31
     f1a:	ef 91       	pop	r30
     f1c:	9f 91       	pop	r25
     f1e:	8f 91       	pop	r24
     f20:	0f 90       	pop	r0
     f22:	0f be       	out	0x3f, r0	; 63
     f24:	0f 90       	pop	r0
     f26:	1f 90       	pop	r1
     f28:	18 95       	reti

00000f2a <ADC_init>:
/*************************************************************************
 *                           Functions definition
 * **********************************************************************/


void ADC_init(const ADC_configType* ptr){
     f2a:	df 93       	push	r29
     f2c:	cf 93       	push	r28
     f2e:	00 d0       	rcall	.+0      	; 0xf30 <ADC_init+0x6>
     f30:	cd b7       	in	r28, 0x3d	; 61
     f32:	de b7       	in	r29, 0x3e	; 62
     f34:	9a 83       	std	Y+2, r25	; 0x02
     f36:	89 83       	std	Y+1, r24	; 0x01

	ADMUX_R.bit.REFS_bit = ptr->Vref; /* Adjust reference voltage to VCC */
     f38:	a7 e2       	ldi	r26, 0x27	; 39
     f3a:	b0 e0       	ldi	r27, 0x00	; 0
     f3c:	e9 81       	ldd	r30, Y+1	; 0x01
     f3e:	fa 81       	ldd	r31, Y+2	; 0x02
     f40:	80 81       	ld	r24, Z
     f42:	83 70       	andi	r24, 0x03	; 3
     f44:	98 2f       	mov	r25, r24
     f46:	92 95       	swap	r25
     f48:	99 0f       	add	r25, r25
     f4a:	99 0f       	add	r25, r25
     f4c:	90 7c       	andi	r25, 0xC0	; 192
     f4e:	8c 91       	ld	r24, X
     f50:	8f 73       	andi	r24, 0x3F	; 63
     f52:	89 2b       	or	r24, r25
     f54:	8c 93       	st	X, r24
	ADMUX_R.bit.ADLAR_bit = 0; /* Turn off ADC left adjust result */
     f56:	e7 e2       	ldi	r30, 0x27	; 39
     f58:	f0 e0       	ldi	r31, 0x00	; 0
     f5a:	80 81       	ld	r24, Z
     f5c:	8f 7d       	andi	r24, 0xDF	; 223
     f5e:	80 83       	st	Z, r24
	ADMUX_R.bit.MUX_bit = 0; /* Initialize channel */
     f60:	e7 e2       	ldi	r30, 0x27	; 39
     f62:	f0 e0       	ldi	r31, 0x00	; 0
     f64:	80 81       	ld	r24, Z
     f66:	80 7e       	andi	r24, 0xE0	; 224
     f68:	80 83       	st	Z, r24

	ADCSRA_R.bit.ADEN_bit = 1; /* Enable module */
     f6a:	e6 e2       	ldi	r30, 0x26	; 38
     f6c:	f0 e0       	ldi	r31, 0x00	; 0
     f6e:	80 81       	ld	r24, Z
     f70:	80 68       	ori	r24, 0x80	; 128
     f72:	80 83       	st	Z, r24
#ifdef POLLING
	ADCSRA_R.bit.ADIE_bit = 0; /* Turn off interrupt */
     f74:	e6 e2       	ldi	r30, 0x26	; 38
     f76:	f0 e0       	ldi	r31, 0x00	; 0
     f78:	80 81       	ld	r24, Z
     f7a:	87 7f       	andi	r24, 0xF7	; 247
     f7c:	80 83       	st	Z, r24
#endif

#ifdef INTERRUPT
	ADCSRA_R.bit.ADIE_bit = 1; /* Turn on interrupt */
#endif
	ADCSRA_R.bit.ADPS_bit = ptr->prescaler; /* Adjust pre-scaler to 128 */
     f7e:	a6 e2       	ldi	r26, 0x26	; 38
     f80:	b0 e0       	ldi	r27, 0x00	; 0
     f82:	e9 81       	ldd	r30, Y+1	; 0x01
     f84:	fa 81       	ldd	r31, Y+2	; 0x02
     f86:	81 81       	ldd	r24, Z+1	; 0x01
     f88:	87 70       	andi	r24, 0x07	; 7
     f8a:	98 2f       	mov	r25, r24
     f8c:	97 70       	andi	r25, 0x07	; 7
     f8e:	8c 91       	ld	r24, X
     f90:	88 7f       	andi	r24, 0xF8	; 248
     f92:	89 2b       	or	r24, r25
     f94:	8c 93       	st	X, r24

}//end ADC_init
     f96:	0f 90       	pop	r0
     f98:	0f 90       	pop	r0
     f9a:	cf 91       	pop	r28
     f9c:	df 91       	pop	r29
     f9e:	08 95       	ret

00000fa0 <ADC_readChannel>:

#ifdef POLLING
uint16 ADC_readChannel(uint8 ch_num){
     fa0:	df 93       	push	r29
     fa2:	cf 93       	push	r28
     fa4:	0f 92       	push	r0
     fa6:	cd b7       	in	r28, 0x3d	; 61
     fa8:	de b7       	in	r29, 0x3e	; 62
     faa:	89 83       	std	Y+1, r24	; 0x01

	ADMUX_R.bit.MUX_bit = ch_num; /* Insert desired channel number */
     fac:	e7 e2       	ldi	r30, 0x27	; 39
     fae:	f0 e0       	ldi	r31, 0x00	; 0
     fb0:	89 81       	ldd	r24, Y+1	; 0x01
     fb2:	8f 71       	andi	r24, 0x1F	; 31
     fb4:	98 2f       	mov	r25, r24
     fb6:	9f 71       	andi	r25, 0x1F	; 31
     fb8:	80 81       	ld	r24, Z
     fba:	80 7e       	andi	r24, 0xE0	; 224
     fbc:	89 2b       	or	r24, r25
     fbe:	80 83       	st	Z, r24

	ADCSRA_R.bit.ADSC_bit = 1; /* Start conversion */
     fc0:	e6 e2       	ldi	r30, 0x26	; 38
     fc2:	f0 e0       	ldi	r31, 0x00	; 0
     fc4:	80 81       	ld	r24, Z
     fc6:	80 64       	ori	r24, 0x40	; 64
     fc8:	80 83       	st	Z, r24

	while(ADCSRA_R.bit.ADIF_bit == 0); /* Polling till conversion ends */
     fca:	e6 e2       	ldi	r30, 0x26	; 38
     fcc:	f0 e0       	ldi	r31, 0x00	; 0
     fce:	80 81       	ld	r24, Z
     fd0:	80 71       	andi	r24, 0x10	; 16
     fd2:	88 23       	and	r24, r24
     fd4:	d1 f3       	breq	.-12     	; 0xfca <ADC_readChannel+0x2a>

	ADCSRA_R.bit.ADIF_bit = 1; /* clear flag */
     fd6:	e6 e2       	ldi	r30, 0x26	; 38
     fd8:	f0 e0       	ldi	r31, 0x00	; 0
     fda:	80 81       	ld	r24, Z
     fdc:	80 61       	ori	r24, 0x10	; 16
     fde:	80 83       	st	Z, r24

	return ADC_R;
     fe0:	e4 e2       	ldi	r30, 0x24	; 36
     fe2:	f0 e0       	ldi	r31, 0x00	; 0
     fe4:	80 81       	ld	r24, Z
     fe6:	91 81       	ldd	r25, Z+1	; 0x01

}//end ADC_readChannel
     fe8:	0f 90       	pop	r0
     fea:	cf 91       	pop	r28
     fec:	df 91       	pop	r29
     fee:	08 95       	ret

00000ff0 <__vector_5>:

/************************************************************************
 *                        Interrupt service routine
 ***********************************************************************/

ISR(TIMER1_CAPT_vect){
     ff0:	1f 92       	push	r1
     ff2:	0f 92       	push	r0
     ff4:	0f b6       	in	r0, 0x3f	; 63
     ff6:	0f 92       	push	r0
     ff8:	11 24       	eor	r1, r1
     ffa:	2f 93       	push	r18
     ffc:	3f 93       	push	r19
     ffe:	4f 93       	push	r20
    1000:	5f 93       	push	r21
    1002:	6f 93       	push	r22
    1004:	7f 93       	push	r23
    1006:	8f 93       	push	r24
    1008:	9f 93       	push	r25
    100a:	af 93       	push	r26
    100c:	bf 93       	push	r27
    100e:	ef 93       	push	r30
    1010:	ff 93       	push	r31
    1012:	df 93       	push	r29
    1014:	cf 93       	push	r28
    1016:	cd b7       	in	r28, 0x3d	; 61
    1018:	de b7       	in	r29, 0x3e	; 62

	if(g_callBackPtr != NULL_PTR)
    101a:	80 91 70 01 	lds	r24, 0x0170
    101e:	90 91 71 01 	lds	r25, 0x0171
    1022:	00 97       	sbiw	r24, 0x00	; 0
    1024:	29 f0       	breq	.+10     	; 0x1030 <__vector_5+0x40>
	(*g_callBackPtr)();
    1026:	e0 91 70 01 	lds	r30, 0x0170
    102a:	f0 91 71 01 	lds	r31, 0x0171
    102e:	09 95       	icall
}
    1030:	cf 91       	pop	r28
    1032:	df 91       	pop	r29
    1034:	ff 91       	pop	r31
    1036:	ef 91       	pop	r30
    1038:	bf 91       	pop	r27
    103a:	af 91       	pop	r26
    103c:	9f 91       	pop	r25
    103e:	8f 91       	pop	r24
    1040:	7f 91       	pop	r23
    1042:	6f 91       	pop	r22
    1044:	5f 91       	pop	r21
    1046:	4f 91       	pop	r20
    1048:	3f 91       	pop	r19
    104a:	2f 91       	pop	r18
    104c:	0f 90       	pop	r0
    104e:	0f be       	out	0x3f, r0	; 63
    1050:	0f 90       	pop	r0
    1052:	1f 90       	pop	r1
    1054:	18 95       	reti

00001056 <ICU_init>:

/************************************************************************
 *                          Functions definition
 ***********************************************************************/
void ICU_init(ICU_configType * ptr){
    1056:	df 93       	push	r29
    1058:	cf 93       	push	r28
    105a:	00 d0       	rcall	.+0      	; 0x105c <ICU_init+0x6>
    105c:	cd b7       	in	r28, 0x3d	; 61
    105e:	de b7       	in	r29, 0x3e	; 62
    1060:	9a 83       	std	Y+2, r25	; 0x02
    1062:	89 83       	std	Y+1, r24	; 0x01

	DDRD_R.bit.DDRD6_bit = 0;
    1064:	e1 e3       	ldi	r30, 0x31	; 49
    1066:	f0 e0       	ldi	r31, 0x00	; 0
    1068:	80 81       	ld	r24, Z
    106a:	8f 7b       	andi	r24, 0xBF	; 191
    106c:	80 83       	st	Z, r24

	TCCR1A_R.bit.FOC1A_bit = 1; /* NON-PWM mode */
    106e:	ef e4       	ldi	r30, 0x4F	; 79
    1070:	f0 e0       	ldi	r31, 0x00	; 0
    1072:	80 81       	ld	r24, Z
    1074:	88 60       	ori	r24, 0x08	; 8
    1076:	80 83       	st	Z, r24
	TCCR1A_R.bit.FOC1B_bit = 1;
    1078:	ef e4       	ldi	r30, 0x4F	; 79
    107a:	f0 e0       	ldi	r31, 0x00	; 0
    107c:	80 81       	ld	r24, Z
    107e:	84 60       	ori	r24, 0x04	; 4
    1080:	80 83       	st	Z, r24

	TCCR1B_R.bit.CS1_bit = ptr->clock ; /* Adjust clock and pre-scaler */
    1082:	ae e4       	ldi	r26, 0x4E	; 78
    1084:	b0 e0       	ldi	r27, 0x00	; 0
    1086:	e9 81       	ldd	r30, Y+1	; 0x01
    1088:	fa 81       	ldd	r31, Y+2	; 0x02
    108a:	80 81       	ld	r24, Z
    108c:	87 70       	andi	r24, 0x07	; 7
    108e:	98 2f       	mov	r25, r24
    1090:	97 70       	andi	r25, 0x07	; 7
    1092:	8c 91       	ld	r24, X
    1094:	88 7f       	andi	r24, 0xF8	; 248
    1096:	89 2b       	or	r24, r25
    1098:	8c 93       	st	X, r24

	TCCR1B_R.bit.ICES1_bit = ptr->edge ; /* Selecting edge */
    109a:	ae e4       	ldi	r26, 0x4E	; 78
    109c:	b0 e0       	ldi	r27, 0x00	; 0
    109e:	e9 81       	ldd	r30, Y+1	; 0x01
    10a0:	fa 81       	ldd	r31, Y+2	; 0x02
    10a2:	81 81       	ldd	r24, Z+1	; 0x01
    10a4:	81 70       	andi	r24, 0x01	; 1
    10a6:	81 70       	andi	r24, 0x01	; 1
    10a8:	98 2f       	mov	r25, r24
    10aa:	92 95       	swap	r25
    10ac:	99 0f       	add	r25, r25
    10ae:	99 0f       	add	r25, r25
    10b0:	90 7c       	andi	r25, 0xC0	; 192
    10b2:	8c 91       	ld	r24, X
    10b4:	8f 7b       	andi	r24, 0xBF	; 191
    10b6:	89 2b       	or	r24, r25
    10b8:	8c 93       	st	X, r24

	TCNT1_R = 0; /* Initialize counter */
    10ba:	ec e4       	ldi	r30, 0x4C	; 76
    10bc:	f0 e0       	ldi	r31, 0x00	; 0
    10be:	11 82       	std	Z+1, r1	; 0x01
    10c0:	10 82       	st	Z, r1

	ICR1_R = 0; /* Initialize data register */
    10c2:	e6 e4       	ldi	r30, 0x46	; 70
    10c4:	f0 e0       	ldi	r31, 0x00	; 0
    10c6:	11 82       	std	Z+1, r1	; 0x01
    10c8:	10 82       	st	Z, r1

	TIMSK_R.bit.TICIE1_bit = 1;
    10ca:	e9 e5       	ldi	r30, 0x59	; 89
    10cc:	f0 e0       	ldi	r31, 0x00	; 0
    10ce:	80 81       	ld	r24, Z
    10d0:	80 62       	ori	r24, 0x20	; 32
    10d2:	80 83       	st	Z, r24

}//end ICU_init
    10d4:	0f 90       	pop	r0
    10d6:	0f 90       	pop	r0
    10d8:	cf 91       	pop	r28
    10da:	df 91       	pop	r29
    10dc:	08 95       	ret

000010de <ICU_setCallBack>:

void ICU_setCallBack(void (*ptr)(void)){
    10de:	df 93       	push	r29
    10e0:	cf 93       	push	r28
    10e2:	00 d0       	rcall	.+0      	; 0x10e4 <ICU_setCallBack+0x6>
    10e4:	cd b7       	in	r28, 0x3d	; 61
    10e6:	de b7       	in	r29, 0x3e	; 62
    10e8:	9a 83       	std	Y+2, r25	; 0x02
    10ea:	89 83       	std	Y+1, r24	; 0x01
	g_callBackPtr = ptr;
    10ec:	89 81       	ldd	r24, Y+1	; 0x01
    10ee:	9a 81       	ldd	r25, Y+2	; 0x02
    10f0:	90 93 71 01 	sts	0x0171, r25
    10f4:	80 93 70 01 	sts	0x0170, r24
}
    10f8:	0f 90       	pop	r0
    10fa:	0f 90       	pop	r0
    10fc:	cf 91       	pop	r28
    10fe:	df 91       	pop	r29
    1100:	08 95       	ret

00001102 <ICU_setEdgeDetectionType>:

void ICU_setEdgeDetectionType(ICU_edgeConfig edgeType){
    1102:	df 93       	push	r29
    1104:	cf 93       	push	r28
    1106:	0f 92       	push	r0
    1108:	cd b7       	in	r28, 0x3d	; 61
    110a:	de b7       	in	r29, 0x3e	; 62
    110c:	89 83       	std	Y+1, r24	; 0x01

	TCCR1B_R.bit.ICES1_bit = edgeType;
    110e:	ee e4       	ldi	r30, 0x4E	; 78
    1110:	f0 e0       	ldi	r31, 0x00	; 0
    1112:	89 81       	ldd	r24, Y+1	; 0x01
    1114:	81 70       	andi	r24, 0x01	; 1
    1116:	81 70       	andi	r24, 0x01	; 1
    1118:	98 2f       	mov	r25, r24
    111a:	92 95       	swap	r25
    111c:	99 0f       	add	r25, r25
    111e:	99 0f       	add	r25, r25
    1120:	90 7c       	andi	r25, 0xC0	; 192
    1122:	80 81       	ld	r24, Z
    1124:	8f 7b       	andi	r24, 0xBF	; 191
    1126:	89 2b       	or	r24, r25
    1128:	80 83       	st	Z, r24

}
    112a:	0f 90       	pop	r0
    112c:	cf 91       	pop	r28
    112e:	df 91       	pop	r29
    1130:	08 95       	ret

00001132 <ICU_getInputCaptureValue>:

uint16 ICU_getInputCaptureValue(void){
    1132:	df 93       	push	r29
    1134:	cf 93       	push	r28
    1136:	cd b7       	in	r28, 0x3d	; 61
    1138:	de b7       	in	r29, 0x3e	; 62

	return ICR1_R;
    113a:	e6 e4       	ldi	r30, 0x46	; 70
    113c:	f0 e0       	ldi	r31, 0x00	; 0
    113e:	80 81       	ld	r24, Z
    1140:	91 81       	ldd	r25, Z+1	; 0x01
}
    1142:	cf 91       	pop	r28
    1144:	df 91       	pop	r29
    1146:	08 95       	ret

00001148 <ICU_clearTimer>:

void ICU_clearTimer(void){
    1148:	df 93       	push	r29
    114a:	cf 93       	push	r28
    114c:	cd b7       	in	r28, 0x3d	; 61
    114e:	de b7       	in	r29, 0x3e	; 62

	TCNT1_R = 0;
    1150:	ec e4       	ldi	r30, 0x4C	; 76
    1152:	f0 e0       	ldi	r31, 0x00	; 0
    1154:	11 82       	std	Z+1, r1	; 0x01
    1156:	10 82       	st	Z, r1
}
    1158:	cf 91       	pop	r28
    115a:	df 91       	pop	r29
    115c:	08 95       	ret

0000115e <ICU_deInit>:

void ICU_deInit(void){
    115e:	df 93       	push	r29
    1160:	cf 93       	push	r28
    1162:	cd b7       	in	r28, 0x3d	; 61
    1164:	de b7       	in	r29, 0x3e	; 62

	TCCR1A_R.Byte = 0;
    1166:	ef e4       	ldi	r30, 0x4F	; 79
    1168:	f0 e0       	ldi	r31, 0x00	; 0
    116a:	10 82       	st	Z, r1
	TCCR1B_R.bit.CS1_bit = 0;
    116c:	ee e4       	ldi	r30, 0x4E	; 78
    116e:	f0 e0       	ldi	r31, 0x00	; 0
    1170:	80 81       	ld	r24, Z
    1172:	88 7f       	andi	r24, 0xF8	; 248
    1174:	80 83       	st	Z, r24
	TCNT1_R = 0;
    1176:	ec e4       	ldi	r30, 0x4C	; 76
    1178:	f0 e0       	ldi	r31, 0x00	; 0
    117a:	11 82       	std	Z+1, r1	; 0x01
    117c:	10 82       	st	Z, r1
	ICR1_R = 0;
    117e:	e6 e4       	ldi	r30, 0x46	; 70
    1180:	f0 e0       	ldi	r31, 0x00	; 0
    1182:	11 82       	std	Z+1, r1	; 0x01
    1184:	10 82       	st	Z, r1

	TIMSK_R.bit.TICIE1_bit = 0;
    1186:	e9 e5       	ldi	r30, 0x59	; 89
    1188:	f0 e0       	ldi	r31, 0x00	; 0
    118a:	80 81       	ld	r24, Z
    118c:	8f 7d       	andi	r24, 0xDF	; 223
    118e:	80 83       	st	Z, r24

	g_callBackPtr = NULL_PTR;
    1190:	10 92 71 01 	sts	0x0171, r1
    1194:	10 92 70 01 	sts	0x0170, r1
}
    1198:	cf 91       	pop	r28
    119a:	df 91       	pop	r29
    119c:	08 95       	ret

0000119e <PWM_timer0_start>:
 */

#include"PWM.h"
#include"AVRIO.h"

void PWM_timer0_start(uint8 duty_cycle){
    119e:	df 93       	push	r29
    11a0:	cf 93       	push	r28
    11a2:	00 d0       	rcall	.+0      	; 0x11a4 <PWM_timer0_start+0x6>
    11a4:	cd b7       	in	r28, 0x3d	; 61
    11a6:	de b7       	in	r29, 0x3e	; 62
    11a8:	8a 83       	std	Y+2, r24	; 0x02

	uint8 dutyCycle_percentege;

TCCR0_R.bit.WGM00_bit = 1; /* NON-PWM */
    11aa:	e3 e5       	ldi	r30, 0x53	; 83
    11ac:	f0 e0       	ldi	r31, 0x00	; 0
    11ae:	80 81       	ld	r24, Z
    11b0:	80 64       	ori	r24, 0x40	; 64
    11b2:	80 83       	st	Z, r24
TCCR0_R.bit.WGM01_bit = 1;
    11b4:	e3 e5       	ldi	r30, 0x53	; 83
    11b6:	f0 e0       	ldi	r31, 0x00	; 0
    11b8:	80 81       	ld	r24, Z
    11ba:	88 60       	ori	r24, 0x08	; 8
    11bc:	80 83       	st	Z, r24

TCCR0_R.bit.COM01_bit = 1; /* NON-INVERTING MODE */
    11be:	e3 e5       	ldi	r30, 0x53	; 83
    11c0:	f0 e0       	ldi	r31, 0x00	; 0
    11c2:	80 81       	ld	r24, Z
    11c4:	80 62       	ori	r24, 0x20	; 32
    11c6:	80 83       	st	Z, r24

TCCR0_R.bit.CS01_bit = 1; /* Setup pre-scaler Fcpu/8  */
    11c8:	e3 e5       	ldi	r30, 0x53	; 83
    11ca:	f0 e0       	ldi	r31, 0x00	; 0
    11cc:	80 81       	ld	r24, Z
    11ce:	82 60       	ori	r24, 0x02	; 2
    11d0:	80 83       	st	Z, r24

DDRB_R.bit.DDRB3_bit = 1; /* OC0 pin is output */
    11d2:	e7 e3       	ldi	r30, 0x37	; 55
    11d4:	f0 e0       	ldi	r31, 0x00	; 0
    11d6:	80 81       	ld	r24, Z
    11d8:	88 60       	ori	r24, 0x08	; 8
    11da:	80 83       	st	Z, r24

/* The generated PWM signal is 500 HZ */

TCNT0_R = 0; /* Initialize counter */
    11dc:	e2 e5       	ldi	r30, 0x52	; 82
    11de:	f0 e0       	ldi	r31, 0x00	; 0
    11e0:	10 82       	st	Z, r1

dutyCycle_percentege = (uint8)((uint32)(duty_cycle*255)/100);
    11e2:	8a 81       	ldd	r24, Y+2	; 0x02
    11e4:	48 2f       	mov	r20, r24
    11e6:	50 e0       	ldi	r21, 0x00	; 0
    11e8:	ca 01       	movw	r24, r20
    11ea:	9c 01       	movw	r18, r24
    11ec:	22 0f       	add	r18, r18
    11ee:	33 1f       	adc	r19, r19
    11f0:	c9 01       	movw	r24, r18
    11f2:	96 95       	lsr	r25
    11f4:	98 2f       	mov	r25, r24
    11f6:	88 27       	eor	r24, r24
    11f8:	97 95       	ror	r25
    11fa:	87 95       	ror	r24
    11fc:	82 1b       	sub	r24, r18
    11fe:	93 0b       	sbc	r25, r19
    1200:	84 0f       	add	r24, r20
    1202:	95 1f       	adc	r25, r21
    1204:	aa 27       	eor	r26, r26
    1206:	97 fd       	sbrc	r25, 7
    1208:	a0 95       	com	r26
    120a:	ba 2f       	mov	r27, r26
    120c:	24 e6       	ldi	r18, 0x64	; 100
    120e:	30 e0       	ldi	r19, 0x00	; 0
    1210:	40 e0       	ldi	r20, 0x00	; 0
    1212:	50 e0       	ldi	r21, 0x00	; 0
    1214:	bc 01       	movw	r22, r24
    1216:	cd 01       	movw	r24, r26
    1218:	0e 94 dd 20 	call	0x41ba	; 0x41ba <__udivmodsi4>
    121c:	da 01       	movw	r26, r20
    121e:	c9 01       	movw	r24, r18
    1220:	89 83       	std	Y+1, r24	; 0x01

OCR0_R = dutyCycle_percentege;
    1222:	ec e5       	ldi	r30, 0x5C	; 92
    1224:	f0 e0       	ldi	r31, 0x00	; 0
    1226:	89 81       	ldd	r24, Y+1	; 0x01
    1228:	80 83       	st	Z, r24
}
    122a:	0f 90       	pop	r0
    122c:	0f 90       	pop	r0
    122e:	cf 91       	pop	r28
    1230:	df 91       	pop	r29
    1232:	08 95       	ret

00001234 <SPI_initMaster>:

/**************************************************************************
 *                         Functions definition
 * **********************************************************************/

void SPI_initMaster(void){
    1234:	df 93       	push	r29
    1236:	cf 93       	push	r28
    1238:	cd b7       	in	r28, 0x3d	; 61
    123a:	de b7       	in	r29, 0x3e	; 62
	 * MOSI             : OUTPUT
	 * MISO             : INPUT
	 * SS(active low)   : OUTPUT
	 * */

	GPIO_setupPinDirection(PORTB_ID,4,PIN_OUTPUT);  /* SS */
    123c:	81 e0       	ldi	r24, 0x01	; 1
    123e:	64 e0       	ldi	r22, 0x04	; 4
    1240:	41 e0       	ldi	r20, 0x01	; 1
    1242:	0e 94 28 0c 	call	0x1850	; 0x1850 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(PORTB_ID,5,PIN_OUTPUT);  /* MOSI */
    1246:	81 e0       	ldi	r24, 0x01	; 1
    1248:	65 e0       	ldi	r22, 0x05	; 5
    124a:	41 e0       	ldi	r20, 0x01	; 1
    124c:	0e 94 28 0c 	call	0x1850	; 0x1850 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(PORTB_ID,6,PIN_INPUT);   /* MISO */
    1250:	81 e0       	ldi	r24, 0x01	; 1
    1252:	66 e0       	ldi	r22, 0x06	; 6
    1254:	40 e0       	ldi	r20, 0x00	; 0
    1256:	0e 94 28 0c 	call	0x1850	; 0x1850 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(PORTB_ID,7,PIN_OUTPUT);  /* SCK */
    125a:	81 e0       	ldi	r24, 0x01	; 1
    125c:	67 e0       	ldi	r22, 0x07	; 7
    125e:	41 e0       	ldi	r20, 0x01	; 1
    1260:	0e 94 28 0c 	call	0x1850	; 0x1850 <GPIO_setupPinDirection>

	SPCR_R.bit.MSTR_bit = 1; /* This is MASTER */
    1264:	ed e2       	ldi	r30, 0x2D	; 45
    1266:	f0 e0       	ldi	r31, 0x00	; 0
    1268:	80 81       	ld	r24, Z
    126a:	80 61       	ori	r24, 0x10	; 16
    126c:	80 83       	st	Z, r24
	SPCR_R.bit.SPE_bit =  1; /* SPI enable */
    126e:	ed e2       	ldi	r30, 0x2D	; 45
    1270:	f0 e0       	ldi	r31, 0x00	; 0
    1272:	80 81       	ld	r24, Z
    1274:	80 64       	ori	r24, 0x40	; 64
    1276:	80 83       	st	Z, r24
	SPCR_R.bit.SPIE_bit = 0; /* SPI interrupt DISABLED */
    1278:	ed e2       	ldi	r30, 0x2D	; 45
    127a:	f0 e0       	ldi	r31, 0x00	; 0
    127c:	80 81       	ld	r24, Z
    127e:	8f 77       	andi	r24, 0x7F	; 127
    1280:	80 83       	st	Z, r24
	SPCR_R.bit.DORD_bit = 0; /* Data order is MOST-segnificant_bit */
    1282:	ed e2       	ldi	r30, 0x2D	; 45
    1284:	f0 e0       	ldi	r31, 0x00	; 0
    1286:	80 81       	ld	r24, Z
    1288:	8f 7d       	andi	r24, 0xDF	; 223
    128a:	80 83       	st	Z, r24
	SPCR_R.bit.CPOL_bit = 0; /* Clock polarity ( Leading is rising ) */
    128c:	ed e2       	ldi	r30, 0x2D	; 45
    128e:	f0 e0       	ldi	r31, 0x00	; 0
    1290:	80 81       	ld	r24, Z
    1292:	87 7f       	andi	r24, 0xF7	; 247
    1294:	80 83       	st	Z, r24
	SPCR_R.bit.CPHA_bit = 0; /* Clock phase ( setup is falling ) */
    1296:	ed e2       	ldi	r30, 0x2D	; 45
    1298:	f0 e0       	ldi	r31, 0x00	; 0
    129a:	80 81       	ld	r24, Z
    129c:	8b 7f       	andi	r24, 0xFB	; 251
    129e:	80 83       	st	Z, r24
	SPCR_R.bit.SPR0_bit = 0; /* Clock is Fcpu/4 */
    12a0:	ed e2       	ldi	r30, 0x2D	; 45
    12a2:	f0 e0       	ldi	r31, 0x00	; 0
    12a4:	80 81       	ld	r24, Z
    12a6:	8e 7f       	andi	r24, 0xFE	; 254
    12a8:	80 83       	st	Z, r24
	SPCR_R.bit.SPR1_bit = 0;
    12aa:	ed e2       	ldi	r30, 0x2D	; 45
    12ac:	f0 e0       	ldi	r31, 0x00	; 0
    12ae:	80 81       	ld	r24, Z
    12b0:	8d 7f       	andi	r24, 0xFD	; 253
    12b2:	80 83       	st	Z, r24
	SPSR_R.bit.SPI2X_bit = 0;
    12b4:	ee e2       	ldi	r30, 0x2E	; 46
    12b6:	f0 e0       	ldi	r31, 0x00	; 0
    12b8:	80 81       	ld	r24, Z
    12ba:	8e 7f       	andi	r24, 0xFE	; 254
    12bc:	80 83       	st	Z, r24
}
    12be:	cf 91       	pop	r28
    12c0:	df 91       	pop	r29
    12c2:	08 95       	ret

000012c4 <SPI_initSlave>:

void SPI_initSlave(void){
    12c4:	df 93       	push	r29
    12c6:	cf 93       	push	r28
    12c8:	cd b7       	in	r28, 0x3d	; 61
    12ca:	de b7       	in	r29, 0x3e	; 62
	 * MOSI             : INTPUT
	 * MISO             : OUTPUT
	 * SS(active low)   : INPUT
	 * */

	GPIO_setupPinDirection(PORTB_ID,4,PIN_INPUT);  /* SS */
    12cc:	81 e0       	ldi	r24, 0x01	; 1
    12ce:	64 e0       	ldi	r22, 0x04	; 4
    12d0:	40 e0       	ldi	r20, 0x00	; 0
    12d2:	0e 94 28 0c 	call	0x1850	; 0x1850 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(PORTB_ID,5,PIN_INPUT);  /* MOSI */
    12d6:	81 e0       	ldi	r24, 0x01	; 1
    12d8:	65 e0       	ldi	r22, 0x05	; 5
    12da:	40 e0       	ldi	r20, 0x00	; 0
    12dc:	0e 94 28 0c 	call	0x1850	; 0x1850 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(PORTB_ID,6,PIN_OUTPUT);   /* MISO */
    12e0:	81 e0       	ldi	r24, 0x01	; 1
    12e2:	66 e0       	ldi	r22, 0x06	; 6
    12e4:	41 e0       	ldi	r20, 0x01	; 1
    12e6:	0e 94 28 0c 	call	0x1850	; 0x1850 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(PORTB_ID,7,PIN_INPUT);  /* SCK */
    12ea:	81 e0       	ldi	r24, 0x01	; 1
    12ec:	67 e0       	ldi	r22, 0x07	; 7
    12ee:	40 e0       	ldi	r20, 0x00	; 0
    12f0:	0e 94 28 0c 	call	0x1850	; 0x1850 <GPIO_setupPinDirection>


	SPCR_R.bit.SPE_bit =  1; /* SPI enable */
    12f4:	ed e2       	ldi	r30, 0x2D	; 45
    12f6:	f0 e0       	ldi	r31, 0x00	; 0
    12f8:	80 81       	ld	r24, Z
    12fa:	80 64       	ori	r24, 0x40	; 64
    12fc:	80 83       	st	Z, r24
	SPCR_R.bit.SPIE_bit = 0; /* SPI interrupt DISABLED */
    12fe:	ed e2       	ldi	r30, 0x2D	; 45
    1300:	f0 e0       	ldi	r31, 0x00	; 0
    1302:	80 81       	ld	r24, Z
    1304:	8f 77       	andi	r24, 0x7F	; 127
    1306:	80 83       	st	Z, r24
	SPCR_R.bit.DORD_bit = 0; /* Data order is MOST-segnificant_bit */
    1308:	ed e2       	ldi	r30, 0x2D	; 45
    130a:	f0 e0       	ldi	r31, 0x00	; 0
    130c:	80 81       	ld	r24, Z
    130e:	8f 7d       	andi	r24, 0xDF	; 223
    1310:	80 83       	st	Z, r24
	SPCR_R.bit.MSTR_bit = 0; /* This is SLAVE */
    1312:	ed e2       	ldi	r30, 0x2D	; 45
    1314:	f0 e0       	ldi	r31, 0x00	; 0
    1316:	80 81       	ld	r24, Z
    1318:	8f 7e       	andi	r24, 0xEF	; 239
    131a:	80 83       	st	Z, r24
	SPCR_R.bit.CPOL_bit = 0; /* Clock polarity ( Leading is rising ) */
    131c:	ed e2       	ldi	r30, 0x2D	; 45
    131e:	f0 e0       	ldi	r31, 0x00	; 0
    1320:	80 81       	ld	r24, Z
    1322:	87 7f       	andi	r24, 0xF7	; 247
    1324:	80 83       	st	Z, r24
	SPCR_R.bit.CPHA_bit = 0; /* Clock phase ( setup is falling ) */
    1326:	ed e2       	ldi	r30, 0x2D	; 45
    1328:	f0 e0       	ldi	r31, 0x00	; 0
    132a:	80 81       	ld	r24, Z
    132c:	8b 7f       	andi	r24, 0xFB	; 251
    132e:	80 83       	st	Z, r24
	SPCR_R.bit.SPR0_bit = 0; /* Clock is Fcpu/4 */
    1330:	ed e2       	ldi	r30, 0x2D	; 45
    1332:	f0 e0       	ldi	r31, 0x00	; 0
    1334:	80 81       	ld	r24, Z
    1336:	8e 7f       	andi	r24, 0xFE	; 254
    1338:	80 83       	st	Z, r24
	SPCR_R.bit.SPR1_bit = 0;
    133a:	ed e2       	ldi	r30, 0x2D	; 45
    133c:	f0 e0       	ldi	r31, 0x00	; 0
    133e:	80 81       	ld	r24, Z
    1340:	8d 7f       	andi	r24, 0xFD	; 253
    1342:	80 83       	st	Z, r24
	SPSR_R.bit.SPI2X_bit = 0;
    1344:	ee e2       	ldi	r30, 0x2E	; 46
    1346:	f0 e0       	ldi	r31, 0x00	; 0
    1348:	80 81       	ld	r24, Z
    134a:	8e 7f       	andi	r24, 0xFE	; 254
    134c:	80 83       	st	Z, r24
}
    134e:	cf 91       	pop	r28
    1350:	df 91       	pop	r29
    1352:	08 95       	ret

00001354 <SPI_sendReceiveByte>:

uint8 SPI_sendReceiveByte(uint8 data){
    1354:	df 93       	push	r29
    1356:	cf 93       	push	r28
    1358:	0f 92       	push	r0
    135a:	cd b7       	in	r28, 0x3d	; 61
    135c:	de b7       	in	r29, 0x3e	; 62
    135e:	89 83       	std	Y+1, r24	; 0x01

	SPDR_R = data;
    1360:	ef e2       	ldi	r30, 0x2F	; 47
    1362:	f0 e0       	ldi	r31, 0x00	; 0
    1364:	89 81       	ldd	r24, Y+1	; 0x01
    1366:	80 83       	st	Z, r24

	while(SPSR_R.bit.SPIF_bit == 0);
    1368:	ee e2       	ldi	r30, 0x2E	; 46
    136a:	f0 e0       	ldi	r31, 0x00	; 0
    136c:	80 81       	ld	r24, Z
    136e:	80 78       	andi	r24, 0x80	; 128
    1370:	88 23       	and	r24, r24
    1372:	d1 f3       	breq	.-12     	; 0x1368 <SPI_sendReceiveByte+0x14>

	/* The SPIF flag is cleared when reading the SPIF statues register
	   then accessing the data SPDR register */

	return SPDR_R ;
    1374:	ef e2       	ldi	r30, 0x2F	; 47
    1376:	f0 e0       	ldi	r31, 0x00	; 0
    1378:	80 81       	ld	r24, Z
}
    137a:	0f 90       	pop	r0
    137c:	cf 91       	pop	r28
    137e:	df 91       	pop	r29
    1380:	08 95       	ret

00001382 <SPI_sendString>:

void SPI_sendString(uint8* data){
    1382:	df 93       	push	r29
    1384:	cf 93       	push	r28
    1386:	00 d0       	rcall	.+0      	; 0x1388 <SPI_sendString+0x6>
    1388:	0f 92       	push	r0
    138a:	cd b7       	in	r28, 0x3d	; 61
    138c:	de b7       	in	r29, 0x3e	; 62
    138e:	9b 83       	std	Y+3, r25	; 0x03
    1390:	8a 83       	std	Y+2, r24	; 0x02

	uint8 i;

	for(i=0; data[i] != '\0';i++){
    1392:	19 82       	std	Y+1, r1	; 0x01
    1394:	0e c0       	rjmp	.+28     	; 0x13b2 <SPI_sendString+0x30>

		SPI_sendReceiveByte(data[i]);
    1396:	89 81       	ldd	r24, Y+1	; 0x01
    1398:	28 2f       	mov	r18, r24
    139a:	30 e0       	ldi	r19, 0x00	; 0
    139c:	8a 81       	ldd	r24, Y+2	; 0x02
    139e:	9b 81       	ldd	r25, Y+3	; 0x03
    13a0:	fc 01       	movw	r30, r24
    13a2:	e2 0f       	add	r30, r18
    13a4:	f3 1f       	adc	r31, r19
    13a6:	80 81       	ld	r24, Z
    13a8:	0e 94 aa 09 	call	0x1354	; 0x1354 <SPI_sendReceiveByte>

void SPI_sendString(uint8* data){

	uint8 i;

	for(i=0; data[i] != '\0';i++){
    13ac:	89 81       	ldd	r24, Y+1	; 0x01
    13ae:	8f 5f       	subi	r24, 0xFF	; 255
    13b0:	89 83       	std	Y+1, r24	; 0x01
    13b2:	89 81       	ldd	r24, Y+1	; 0x01
    13b4:	28 2f       	mov	r18, r24
    13b6:	30 e0       	ldi	r19, 0x00	; 0
    13b8:	8a 81       	ldd	r24, Y+2	; 0x02
    13ba:	9b 81       	ldd	r25, Y+3	; 0x03
    13bc:	fc 01       	movw	r30, r24
    13be:	e2 0f       	add	r30, r18
    13c0:	f3 1f       	adc	r31, r19
    13c2:	80 81       	ld	r24, Z
    13c4:	88 23       	and	r24, r24
    13c6:	39 f7       	brne	.-50     	; 0x1396 <SPI_sendString+0x14>

		SPI_sendReceiveByte(data[i]);
	}
}
    13c8:	0f 90       	pop	r0
    13ca:	0f 90       	pop	r0
    13cc:	0f 90       	pop	r0
    13ce:	cf 91       	pop	r28
    13d0:	df 91       	pop	r29
    13d2:	08 95       	ret

000013d4 <SPI_receiveString>:

void SPI_receiveString(uint8* data){
    13d4:	0f 93       	push	r16
    13d6:	1f 93       	push	r17
    13d8:	df 93       	push	r29
    13da:	cf 93       	push	r28
    13dc:	00 d0       	rcall	.+0      	; 0x13de <SPI_receiveString+0xa>
    13de:	0f 92       	push	r0
    13e0:	cd b7       	in	r28, 0x3d	; 61
    13e2:	de b7       	in	r29, 0x3e	; 62
    13e4:	9b 83       	std	Y+3, r25	; 0x03
    13e6:	8a 83       	std	Y+2, r24	; 0x02

	uint8 i=0;
    13e8:	19 82       	std	Y+1, r1	; 0x01

	data[i] = SPI_sendReceiveByte(SPI_DEFAULT);
    13ea:	89 81       	ldd	r24, Y+1	; 0x01
    13ec:	28 2f       	mov	r18, r24
    13ee:	30 e0       	ldi	r19, 0x00	; 0
    13f0:	8a 81       	ldd	r24, Y+2	; 0x02
    13f2:	9b 81       	ldd	r25, Y+3	; 0x03
    13f4:	8c 01       	movw	r16, r24
    13f6:	02 0f       	add	r16, r18
    13f8:	13 1f       	adc	r17, r19
    13fa:	8f ef       	ldi	r24, 0xFF	; 255
    13fc:	0e 94 aa 09 	call	0x1354	; 0x1354 <SPI_sendReceiveByte>
    1400:	f8 01       	movw	r30, r16
    1402:	80 83       	st	Z, r24
    1404:	10 c0       	rjmp	.+32     	; 0x1426 <SPI_receiveString+0x52>

	while( data[i] != '#'){

		i++;
    1406:	89 81       	ldd	r24, Y+1	; 0x01
    1408:	8f 5f       	subi	r24, 0xFF	; 255
    140a:	89 83       	std	Y+1, r24	; 0x01
		data[i] = SPI_sendReceiveByte(SPI_DEFAULT);
    140c:	89 81       	ldd	r24, Y+1	; 0x01
    140e:	28 2f       	mov	r18, r24
    1410:	30 e0       	ldi	r19, 0x00	; 0
    1412:	8a 81       	ldd	r24, Y+2	; 0x02
    1414:	9b 81       	ldd	r25, Y+3	; 0x03
    1416:	8c 01       	movw	r16, r24
    1418:	02 0f       	add	r16, r18
    141a:	13 1f       	adc	r17, r19
    141c:	8f ef       	ldi	r24, 0xFF	; 255
    141e:	0e 94 aa 09 	call	0x1354	; 0x1354 <SPI_sendReceiveByte>
    1422:	f8 01       	movw	r30, r16
    1424:	80 83       	st	Z, r24

	uint8 i=0;

	data[i] = SPI_sendReceiveByte(SPI_DEFAULT);

	while( data[i] != '#'){
    1426:	89 81       	ldd	r24, Y+1	; 0x01
    1428:	28 2f       	mov	r18, r24
    142a:	30 e0       	ldi	r19, 0x00	; 0
    142c:	8a 81       	ldd	r24, Y+2	; 0x02
    142e:	9b 81       	ldd	r25, Y+3	; 0x03
    1430:	fc 01       	movw	r30, r24
    1432:	e2 0f       	add	r30, r18
    1434:	f3 1f       	adc	r31, r19
    1436:	80 81       	ld	r24, Z
    1438:	83 32       	cpi	r24, 0x23	; 35
    143a:	29 f7       	brne	.-54     	; 0x1406 <SPI_receiveString+0x32>

		i++;
		data[i] = SPI_sendReceiveByte(SPI_DEFAULT);
	}

	data[i] = '\0';
    143c:	89 81       	ldd	r24, Y+1	; 0x01
    143e:	28 2f       	mov	r18, r24
    1440:	30 e0       	ldi	r19, 0x00	; 0
    1442:	8a 81       	ldd	r24, Y+2	; 0x02
    1444:	9b 81       	ldd	r25, Y+3	; 0x03
    1446:	fc 01       	movw	r30, r24
    1448:	e2 0f       	add	r30, r18
    144a:	f3 1f       	adc	r31, r19
    144c:	10 82       	st	Z, r1
}
    144e:	0f 90       	pop	r0
    1450:	0f 90       	pop	r0
    1452:	0f 90       	pop	r0
    1454:	cf 91       	pop	r28
    1456:	df 91       	pop	r29
    1458:	1f 91       	pop	r17
    145a:	0f 91       	pop	r16
    145c:	08 95       	ret

0000145e <TWI_init>:

/**************************************************************************
 *                        Functions definitions
 * ************************************************************************/

void TWI_init(TWI_configType* configurations){
    145e:	df 93       	push	r29
    1460:	cf 93       	push	r28
    1462:	00 d0       	rcall	.+0      	; 0x1464 <TWI_init+0x6>
    1464:	0f 92       	push	r0
    1466:	cd b7       	in	r28, 0x3d	; 61
    1468:	de b7       	in	r29, 0x3e	; 62
    146a:	9b 83       	std	Y+3, r25	; 0x03
    146c:	8a 83       	std	Y+2, r24	; 0x02

	uint8 TWBR_value;

	TWBR_value = (((F_CPU/configurations->SCL_FREQ)-16)/8);
    146e:	ea 81       	ldd	r30, Y+2	; 0x02
    1470:	fb 81       	ldd	r31, Y+3	; 0x03
    1472:	21 81       	ldd	r18, Z+1	; 0x01
    1474:	32 81       	ldd	r19, Z+2	; 0x02
    1476:	43 81       	ldd	r20, Z+3	; 0x03
    1478:	54 81       	ldd	r21, Z+4	; 0x04
    147a:	80 e4       	ldi	r24, 0x40	; 64
    147c:	92 e4       	ldi	r25, 0x42	; 66
    147e:	af e0       	ldi	r26, 0x0F	; 15
    1480:	b0 e0       	ldi	r27, 0x00	; 0
    1482:	bc 01       	movw	r22, r24
    1484:	cd 01       	movw	r24, r26
    1486:	0e 94 dd 20 	call	0x41ba	; 0x41ba <__udivmodsi4>
    148a:	da 01       	movw	r26, r20
    148c:	c9 01       	movw	r24, r18
    148e:	40 97       	sbiw	r24, 0x10	; 16
    1490:	a1 09       	sbc	r26, r1
    1492:	b1 09       	sbc	r27, r1
    1494:	68 94       	set
    1496:	12 f8       	bld	r1, 2
    1498:	b6 95       	lsr	r27
    149a:	a7 95       	ror	r26
    149c:	97 95       	ror	r25
    149e:	87 95       	ror	r24
    14a0:	16 94       	lsr	r1
    14a2:	d1 f7       	brne	.-12     	; 0x1498 <TWI_init+0x3a>
    14a4:	89 83       	std	Y+1, r24	; 0x01

	TWBR_R = TWBR_value; /* TWI with 250kHZ and TWPS = 00 and FCPU = 8MHZ */
    14a6:	e0 e2       	ldi	r30, 0x20	; 32
    14a8:	f0 e0       	ldi	r31, 0x00	; 0
    14aa:	89 81       	ldd	r24, Y+1	; 0x01
    14ac:	80 83       	st	Z, r24
	TWSR_R.bit.TWPS_bit = 0; /* For adjusting clock and pre-scaler ( assumed ) */
    14ae:	e1 e2       	ldi	r30, 0x21	; 33
    14b0:	f0 e0       	ldi	r31, 0x00	; 0
    14b2:	80 81       	ld	r24, Z
    14b4:	8c 7f       	andi	r24, 0xFC	; 252
    14b6:	80 83       	st	Z, r24
	TWAR_R.bit.TWA_bit = configurations->address;  /* My address */
    14b8:	a2 e2       	ldi	r26, 0x22	; 34
    14ba:	b0 e0       	ldi	r27, 0x00	; 0
    14bc:	ea 81       	ldd	r30, Y+2	; 0x02
    14be:	fb 81       	ldd	r31, Y+3	; 0x03
    14c0:	80 81       	ld	r24, Z
    14c2:	8f 77       	andi	r24, 0x7F	; 127
    14c4:	98 2f       	mov	r25, r24
    14c6:	99 0f       	add	r25, r25
    14c8:	8c 91       	ld	r24, X
    14ca:	81 70       	andi	r24, 0x01	; 1
    14cc:	89 2b       	or	r24, r25
    14ce:	8c 93       	st	X, r24
	TWCR_R.bit.TWEN_bit = 1; /* TWI enable module */
    14d0:	e6 e5       	ldi	r30, 0x56	; 86
    14d2:	f0 e0       	ldi	r31, 0x00	; 0
    14d4:	80 81       	ld	r24, Z
    14d6:	84 60       	ori	r24, 0x04	; 4
    14d8:	80 83       	st	Z, r24
}
    14da:	0f 90       	pop	r0
    14dc:	0f 90       	pop	r0
    14de:	0f 90       	pop	r0
    14e0:	cf 91       	pop	r28
    14e2:	df 91       	pop	r29
    14e4:	08 95       	ret

000014e6 <TWI_start>:

void TWI_start(void){
    14e6:	df 93       	push	r29
    14e8:	cf 93       	push	r28
    14ea:	cd b7       	in	r28, 0x3d	; 61
    14ec:	de b7       	in	r29, 0x3e	; 62

	TWCR_R.Byte = 4; /* Remove previous actions but leave enable-module = 1 */
    14ee:	e6 e5       	ldi	r30, 0x56	; 86
    14f0:	f0 e0       	ldi	r31, 0x00	; 0
    14f2:	84 e0       	ldi	r24, 0x04	; 4
    14f4:	80 83       	st	Z, r24
	TWCR_R.bit.TWSTA_bit = 1; /* Enable start bit */
    14f6:	e6 e5       	ldi	r30, 0x56	; 86
    14f8:	f0 e0       	ldi	r31, 0x00	; 0
    14fa:	80 81       	ld	r24, Z
    14fc:	80 62       	ori	r24, 0x20	; 32
    14fe:	80 83       	st	Z, r24
	TWCR_R.bit.TWINT_bit = 1; /* Clear flag from any previous action */
    1500:	e6 e5       	ldi	r30, 0x56	; 86
    1502:	f0 e0       	ldi	r31, 0x00	; 0
    1504:	80 81       	ld	r24, Z
    1506:	80 68       	ori	r24, 0x80	; 128
    1508:	80 83       	st	Z, r24

	while(TWCR_R.bit.TWINT_bit == 0); /* Start bit is sent */
    150a:	e6 e5       	ldi	r30, 0x56	; 86
    150c:	f0 e0       	ldi	r31, 0x00	; 0
    150e:	80 81       	ld	r24, Z
    1510:	80 78       	andi	r24, 0x80	; 128
    1512:	88 23       	and	r24, r24
    1514:	d1 f3       	breq	.-12     	; 0x150a <TWI_start+0x24>
}
    1516:	cf 91       	pop	r28
    1518:	df 91       	pop	r29
    151a:	08 95       	ret

0000151c <TWI_stop>:

void TWI_stop(void){
    151c:	df 93       	push	r29
    151e:	cf 93       	push	r28
    1520:	cd b7       	in	r28, 0x3d	; 61
    1522:	de b7       	in	r29, 0x3e	; 62

	TWCR_R.Byte = 4; /* Remove previous actions but leave enable-module = 1 */
    1524:	e6 e5       	ldi	r30, 0x56	; 86
    1526:	f0 e0       	ldi	r31, 0x00	; 0
    1528:	84 e0       	ldi	r24, 0x04	; 4
    152a:	80 83       	st	Z, r24
	TWCR_R.bit.TWSTO_bit = 1; /* Enable start bit */
    152c:	e6 e5       	ldi	r30, 0x56	; 86
    152e:	f0 e0       	ldi	r31, 0x00	; 0
    1530:	80 81       	ld	r24, Z
    1532:	80 61       	ori	r24, 0x10	; 16
    1534:	80 83       	st	Z, r24
	TWCR_R.bit.TWINT_bit = 1; /* Clear flag from any previous action */
    1536:	e6 e5       	ldi	r30, 0x56	; 86
    1538:	f0 e0       	ldi	r31, 0x00	; 0
    153a:	80 81       	ld	r24, Z
    153c:	80 68       	ori	r24, 0x80	; 128
    153e:	80 83       	st	Z, r24

}
    1540:	cf 91       	pop	r28
    1542:	df 91       	pop	r29
    1544:	08 95       	ret

00001546 <TWI_writeByte>:

void TWI_writeByte(uint8 data){
    1546:	df 93       	push	r29
    1548:	cf 93       	push	r28
    154a:	0f 92       	push	r0
    154c:	cd b7       	in	r28, 0x3d	; 61
    154e:	de b7       	in	r29, 0x3e	; 62
    1550:	89 83       	std	Y+1, r24	; 0x01

	TWDR_R = data;
    1552:	e3 e2       	ldi	r30, 0x23	; 35
    1554:	f0 e0       	ldi	r31, 0x00	; 0
    1556:	89 81       	ldd	r24, Y+1	; 0x01
    1558:	80 83       	st	Z, r24

	TWCR_R.Byte = 4; /* Remove previous actions but leave enable-module = 1 */
    155a:	e6 e5       	ldi	r30, 0x56	; 86
    155c:	f0 e0       	ldi	r31, 0x00	; 0
    155e:	84 e0       	ldi	r24, 0x04	; 4
    1560:	80 83       	st	Z, r24
	TWCR_R.bit.TWINT_bit = 1; /* Clear flag from any previous action */
    1562:	e6 e5       	ldi	r30, 0x56	; 86
    1564:	f0 e0       	ldi	r31, 0x00	; 0
    1566:	80 81       	ld	r24, Z
    1568:	80 68       	ori	r24, 0x80	; 128
    156a:	80 83       	st	Z, r24

	while(TWCR_R.bit.TWINT_bit == 0); /* Data is sent */
    156c:	e6 e5       	ldi	r30, 0x56	; 86
    156e:	f0 e0       	ldi	r31, 0x00	; 0
    1570:	80 81       	ld	r24, Z
    1572:	80 78       	andi	r24, 0x80	; 128
    1574:	88 23       	and	r24, r24
    1576:	d1 f3       	breq	.-12     	; 0x156c <TWI_writeByte+0x26>
}
    1578:	0f 90       	pop	r0
    157a:	cf 91       	pop	r28
    157c:	df 91       	pop	r29
    157e:	08 95       	ret

00001580 <TWI_readByteWithACK>:

uint8 TWI_readByteWithACK(void){
    1580:	df 93       	push	r29
    1582:	cf 93       	push	r28
    1584:	cd b7       	in	r28, 0x3d	; 61
    1586:	de b7       	in	r29, 0x3e	; 62

	TWCR_R.Byte = 4; /* Remove previous actions but leave enable-module = 1 */
    1588:	e6 e5       	ldi	r30, 0x56	; 86
    158a:	f0 e0       	ldi	r31, 0x00	; 0
    158c:	84 e0       	ldi	r24, 0x04	; 4
    158e:	80 83       	st	Z, r24
	TWCR_R.bit.TWEA_bit = 1; /* Enable ACK bit */
    1590:	e6 e5       	ldi	r30, 0x56	; 86
    1592:	f0 e0       	ldi	r31, 0x00	; 0
    1594:	80 81       	ld	r24, Z
    1596:	80 64       	ori	r24, 0x40	; 64
    1598:	80 83       	st	Z, r24
	TWCR_R.bit.TWINT_bit = 1; /* Clear flag from any previous action */
    159a:	e6 e5       	ldi	r30, 0x56	; 86
    159c:	f0 e0       	ldi	r31, 0x00	; 0
    159e:	80 81       	ld	r24, Z
    15a0:	80 68       	ori	r24, 0x80	; 128
    15a2:	80 83       	st	Z, r24

	while(TWCR_R.bit.TWINT_bit == 0); /* Data is received */
    15a4:	e6 e5       	ldi	r30, 0x56	; 86
    15a6:	f0 e0       	ldi	r31, 0x00	; 0
    15a8:	80 81       	ld	r24, Z
    15aa:	80 78       	andi	r24, 0x80	; 128
    15ac:	88 23       	and	r24, r24
    15ae:	d1 f3       	breq	.-12     	; 0x15a4 <TWI_readByteWithACK+0x24>

	return TWDR_R;
    15b0:	e3 e2       	ldi	r30, 0x23	; 35
    15b2:	f0 e0       	ldi	r31, 0x00	; 0
    15b4:	80 81       	ld	r24, Z
}
    15b6:	cf 91       	pop	r28
    15b8:	df 91       	pop	r29
    15ba:	08 95       	ret

000015bc <TWI_readByteWithNACK>:

uint8 TWI_readByteWithNACK(void){
    15bc:	df 93       	push	r29
    15be:	cf 93       	push	r28
    15c0:	cd b7       	in	r28, 0x3d	; 61
    15c2:	de b7       	in	r29, 0x3e	; 62

	TWCR_R.Byte = 4; /* Remove previous actions but leave enable-module = 1 */
    15c4:	e6 e5       	ldi	r30, 0x56	; 86
    15c6:	f0 e0       	ldi	r31, 0x00	; 0
    15c8:	84 e0       	ldi	r24, 0x04	; 4
    15ca:	80 83       	st	Z, r24
	TWCR_R.bit.TWINT_bit = 1; /* Clear flag from any previous action */
    15cc:	e6 e5       	ldi	r30, 0x56	; 86
    15ce:	f0 e0       	ldi	r31, 0x00	; 0
    15d0:	80 81       	ld	r24, Z
    15d2:	80 68       	ori	r24, 0x80	; 128
    15d4:	80 83       	st	Z, r24

	while(TWCR_R.bit.TWINT_bit == 0); /* Data is received */
    15d6:	e6 e5       	ldi	r30, 0x56	; 86
    15d8:	f0 e0       	ldi	r31, 0x00	; 0
    15da:	80 81       	ld	r24, Z
    15dc:	80 78       	andi	r24, 0x80	; 128
    15de:	88 23       	and	r24, r24
    15e0:	d1 f3       	breq	.-12     	; 0x15d6 <TWI_readByteWithNACK+0x1a>

	return TWDR_R;
    15e2:	e3 e2       	ldi	r30, 0x23	; 35
    15e4:	f0 e0       	ldi	r31, 0x00	; 0
    15e6:	80 81       	ld	r24, Z
}
    15e8:	cf 91       	pop	r28
    15ea:	df 91       	pop	r29
    15ec:	08 95       	ret

000015ee <TWI_getStatus>:

uint8 TWI_getStatus(void){
    15ee:	df 93       	push	r29
    15f0:	cf 93       	push	r28
    15f2:	cd b7       	in	r28, 0x3d	; 61
    15f4:	de b7       	in	r29, 0x3e	; 62

	return TWSR_R.bit.TWS_bit <<3 ;/* because of standard statues values */
    15f6:	e1 e2       	ldi	r30, 0x21	; 33
    15f8:	f0 e0       	ldi	r31, 0x00	; 0
    15fa:	80 81       	ld	r24, Z
    15fc:	86 95       	lsr	r24
    15fe:	86 95       	lsr	r24
    1600:	86 95       	lsr	r24
    1602:	88 0f       	add	r24, r24
    1604:	88 0f       	add	r24, r24
    1606:	88 0f       	add	r24, r24
}
    1608:	cf 91       	pop	r28
    160a:	df 91       	pop	r29
    160c:	08 95       	ret

0000160e <UART_init>:
#endif
/**************************************************************************
 *                       Functions definition
 * ***********************************************************************/

void UART_init(UART_configType* configurations){
    160e:	df 93       	push	r29
    1610:	cf 93       	push	r28
    1612:	00 d0       	rcall	.+0      	; 0x1614 <UART_init+0x6>
    1614:	00 d0       	rcall	.+0      	; 0x1616 <UART_init+0x8>
    1616:	cd b7       	in	r28, 0x3d	; 61
    1618:	de b7       	in	r29, 0x3e	; 62
    161a:	9c 83       	std	Y+4, r25	; 0x04
    161c:	8b 83       	std	Y+3, r24	; 0x03

	/* DO NOT ACCESS (URSEL) BIT UNDER ANY CONDITION */

	uint16 ubrr_value;

	UCSRA_R.bit.U2X_bit = 1; /* Double speed */
    161e:	eb e2       	ldi	r30, 0x2B	; 43
    1620:	f0 e0       	ldi	r31, 0x00	; 0
    1622:	80 81       	ld	r24, Z
    1624:	82 60       	ori	r24, 0x02	; 2
    1626:	80 83       	st	Z, r24
#ifdef INTERRUPT
	UCSRB_R.bit.RXCIE_bit = 1; /* Receive Complete interrupt enable */
#endif
	UCSRB_R.bit.RXEN_bit = 1; /* Receiver enable */
    1628:	ea e2       	ldi	r30, 0x2A	; 42
    162a:	f0 e0       	ldi	r31, 0x00	; 0
    162c:	80 81       	ld	r24, Z
    162e:	80 61       	ori	r24, 0x10	; 16
    1630:	80 83       	st	Z, r24

	UCSRB_R.bit.TXEN_bit = 1; /* Transmitter enable */
    1632:	ea e2       	ldi	r30, 0x2A	; 42
    1634:	f0 e0       	ldi	r31, 0x00	; 0
    1636:	80 81       	ld	r24, Z
    1638:	88 60       	ori	r24, 0x08	; 8
    163a:	80 83       	st	Z, r24

	UCSRC_R.bit.UMSEL_bit = 0; /* Asynchronous */
    163c:	e0 e4       	ldi	r30, 0x40	; 64
    163e:	f0 e0       	ldi	r31, 0x00	; 0
    1640:	80 81       	ld	r24, Z
    1642:	8f 7b       	andi	r24, 0xBF	; 191
    1644:	80 83       	st	Z, r24

	UCSRC_R.bit.UPM_bit = configurations->parity; /* Select parity-bit mode */
    1646:	a0 e4       	ldi	r26, 0x40	; 64
    1648:	b0 e0       	ldi	r27, 0x00	; 0
    164a:	eb 81       	ldd	r30, Y+3	; 0x03
    164c:	fc 81       	ldd	r31, Y+4	; 0x04
    164e:	81 81       	ldd	r24, Z+1	; 0x01
    1650:	83 70       	andi	r24, 0x03	; 3
    1652:	83 70       	andi	r24, 0x03	; 3
    1654:	98 2f       	mov	r25, r24
    1656:	92 95       	swap	r25
    1658:	90 7f       	andi	r25, 0xF0	; 240
    165a:	8c 91       	ld	r24, X
    165c:	8f 7c       	andi	r24, 0xCF	; 207
    165e:	89 2b       	or	r24, r25
    1660:	8c 93       	st	X, r24

	UCSRC_R.bit.USBS_bit = configurations->stop; /* Select stop_bit mode */
    1662:	a0 e4       	ldi	r26, 0x40	; 64
    1664:	b0 e0       	ldi	r27, 0x00	; 0
    1666:	eb 81       	ldd	r30, Y+3	; 0x03
    1668:	fc 81       	ldd	r31, Y+4	; 0x04
    166a:	82 81       	ldd	r24, Z+2	; 0x02
    166c:	81 70       	andi	r24, 0x01	; 1
    166e:	81 70       	andi	r24, 0x01	; 1
    1670:	98 2f       	mov	r25, r24
    1672:	99 0f       	add	r25, r25
    1674:	99 0f       	add	r25, r25
    1676:	99 0f       	add	r25, r25
    1678:	8c 91       	ld	r24, X
    167a:	87 7f       	andi	r24, 0xF7	; 247
    167c:	89 2b       	or	r24, r25
    167e:	8c 93       	st	X, r24

	UCSRC_R.bit.UCSZ_bit = configurations->bit_data; /* select number of data bits */
    1680:	a0 e4       	ldi	r26, 0x40	; 64
    1682:	b0 e0       	ldi	r27, 0x00	; 0
    1684:	eb 81       	ldd	r30, Y+3	; 0x03
    1686:	fc 81       	ldd	r31, Y+4	; 0x04
    1688:	80 81       	ld	r24, Z
    168a:	83 70       	andi	r24, 0x03	; 3
    168c:	83 70       	andi	r24, 0x03	; 3
    168e:	98 2f       	mov	r25, r24
    1690:	99 0f       	add	r25, r25
    1692:	8c 91       	ld	r24, X
    1694:	89 7f       	andi	r24, 0xF9	; 249
    1696:	89 2b       	or	r24, r25
    1698:	8c 93       	st	X, r24

	ubrr_value =  (uint16)(((float) F_CPU/((uint32)8 * (configurations->baudRate)))-1);
    169a:	eb 81       	ldd	r30, Y+3	; 0x03
    169c:	fc 81       	ldd	r31, Y+4	; 0x04
    169e:	83 81       	ldd	r24, Z+3	; 0x03
    16a0:	94 81       	ldd	r25, Z+4	; 0x04
    16a2:	cc 01       	movw	r24, r24
    16a4:	a0 e0       	ldi	r26, 0x00	; 0
    16a6:	b0 e0       	ldi	r27, 0x00	; 0
    16a8:	88 0f       	add	r24, r24
    16aa:	99 1f       	adc	r25, r25
    16ac:	aa 1f       	adc	r26, r26
    16ae:	bb 1f       	adc	r27, r27
    16b0:	88 0f       	add	r24, r24
    16b2:	99 1f       	adc	r25, r25
    16b4:	aa 1f       	adc	r26, r26
    16b6:	bb 1f       	adc	r27, r27
    16b8:	88 0f       	add	r24, r24
    16ba:	99 1f       	adc	r25, r25
    16bc:	aa 1f       	adc	r26, r26
    16be:	bb 1f       	adc	r27, r27
    16c0:	bc 01       	movw	r22, r24
    16c2:	cd 01       	movw	r24, r26
    16c4:	0e 94 07 05 	call	0xa0e	; 0xa0e <__floatunsisf>
    16c8:	9b 01       	movw	r18, r22
    16ca:	ac 01       	movw	r20, r24
    16cc:	60 e0       	ldi	r22, 0x00	; 0
    16ce:	74 e2       	ldi	r23, 0x24	; 36
    16d0:	84 e7       	ldi	r24, 0x74	; 116
    16d2:	99 e4       	ldi	r25, 0x49	; 73
    16d4:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    16d8:	dc 01       	movw	r26, r24
    16da:	cb 01       	movw	r24, r22
    16dc:	bc 01       	movw	r22, r24
    16de:	cd 01       	movw	r24, r26
    16e0:	20 e0       	ldi	r18, 0x00	; 0
    16e2:	30 e0       	ldi	r19, 0x00	; 0
    16e4:	40 e8       	ldi	r20, 0x80	; 128
    16e6:	5f e3       	ldi	r21, 0x3F	; 63
    16e8:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    16ec:	dc 01       	movw	r26, r24
    16ee:	cb 01       	movw	r24, r22
    16f0:	bc 01       	movw	r22, r24
    16f2:	cd 01       	movw	r24, r26
    16f4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    16f8:	dc 01       	movw	r26, r24
    16fa:	cb 01       	movw	r24, r22
    16fc:	9a 83       	std	Y+2, r25	; 0x02
    16fe:	89 83       	std	Y+1, r24	; 0x01

	UBRRH_R.bit.UBRR_bit = ubrr_value>>8;
    1700:	e0 e4       	ldi	r30, 0x40	; 64
    1702:	f0 e0       	ldi	r31, 0x00	; 0
    1704:	89 81       	ldd	r24, Y+1	; 0x01
    1706:	9a 81       	ldd	r25, Y+2	; 0x02
    1708:	89 2f       	mov	r24, r25
    170a:	99 27       	eor	r25, r25
    170c:	8f 70       	andi	r24, 0x0F	; 15
    170e:	98 2f       	mov	r25, r24
    1710:	9f 70       	andi	r25, 0x0F	; 15
    1712:	80 81       	ld	r24, Z
    1714:	80 7f       	andi	r24, 0xF0	; 240
    1716:	89 2b       	or	r24, r25
    1718:	80 83       	st	Z, r24

	UBRRL_R = ubrr_value;
    171a:	e9 e2       	ldi	r30, 0x29	; 41
    171c:	f0 e0       	ldi	r31, 0x00	; 0
    171e:	89 81       	ldd	r24, Y+1	; 0x01
    1720:	80 83       	st	Z, r24
}
    1722:	0f 90       	pop	r0
    1724:	0f 90       	pop	r0
    1726:	0f 90       	pop	r0
    1728:	0f 90       	pop	r0
    172a:	cf 91       	pop	r28
    172c:	df 91       	pop	r29
    172e:	08 95       	ret

00001730 <UART_sendByte>:


void UART_sendByte(const uint8 data){
    1730:	df 93       	push	r29
    1732:	cf 93       	push	r28
    1734:	0f 92       	push	r0
    1736:	cd b7       	in	r28, 0x3d	; 61
    1738:	de b7       	in	r29, 0x3e	; 62
    173a:	89 83       	std	Y+1, r24	; 0x01

	/* Stuck in loop till the data register is empty */
	while(UCSRA_R.bit.UDRE_bit == 0);
    173c:	eb e2       	ldi	r30, 0x2B	; 43
    173e:	f0 e0       	ldi	r31, 0x00	; 0
    1740:	80 81       	ld	r24, Z
    1742:	80 72       	andi	r24, 0x20	; 32
    1744:	88 23       	and	r24, r24
    1746:	d1 f3       	breq	.-12     	; 0x173c <UART_sendByte+0xc>

	/* As data register is empty i can send a byte */
	UDR_R = data;
    1748:	ec e2       	ldi	r30, 0x2C	; 44
    174a:	f0 e0       	ldi	r31, 0x00	; 0
    174c:	89 81       	ldd	r24, Y+1	; 0x01
    174e:	80 83       	st	Z, r24
}
    1750:	0f 90       	pop	r0
    1752:	cf 91       	pop	r28
    1754:	df 91       	pop	r29
    1756:	08 95       	ret

00001758 <UART_receiveByte>:

uint8 UART_receiveByte(void){
    1758:	df 93       	push	r29
    175a:	cf 93       	push	r28
    175c:	cd b7       	in	r28, 0x3d	; 61
    175e:	de b7       	in	r29, 0x3e	; 62

#ifdef POLLING
	while(UCSRA_R.bit.RXC_bit == 0);
    1760:	eb e2       	ldi	r30, 0x2B	; 43
    1762:	f0 e0       	ldi	r31, 0x00	; 0
    1764:	80 81       	ld	r24, Z
    1766:	80 78       	andi	r24, 0x80	; 128
    1768:	88 23       	and	r24, r24
    176a:	d1 f3       	breq	.-12     	; 0x1760 <UART_receiveByte+0x8>

	return UDR_R;
    176c:	ec e2       	ldi	r30, 0x2C	; 44
    176e:	f0 e0       	ldi	r31, 0x00	; 0
    1770:	80 81       	ld	r24, Z
#endif

#ifdef INTERRUPT
	return g_receivedByte;
#endif
}
    1772:	cf 91       	pop	r28
    1774:	df 91       	pop	r29
    1776:	08 95       	ret

00001778 <UART_sendString>:

void UART_sendString(const uint8 *str){
    1778:	df 93       	push	r29
    177a:	cf 93       	push	r28
    177c:	00 d0       	rcall	.+0      	; 0x177e <UART_sendString+0x6>
    177e:	0f 92       	push	r0
    1780:	cd b7       	in	r28, 0x3d	; 61
    1782:	de b7       	in	r29, 0x3e	; 62
    1784:	9b 83       	std	Y+3, r25	; 0x03
    1786:	8a 83       	std	Y+2, r24	; 0x02

	uint8 i;

	for(i=0; str[i] != '\0';i++){
    1788:	19 82       	std	Y+1, r1	; 0x01
    178a:	0e c0       	rjmp	.+28     	; 0x17a8 <UART_sendString+0x30>
		UART_sendByte(str[i]);
    178c:	89 81       	ldd	r24, Y+1	; 0x01
    178e:	28 2f       	mov	r18, r24
    1790:	30 e0       	ldi	r19, 0x00	; 0
    1792:	8a 81       	ldd	r24, Y+2	; 0x02
    1794:	9b 81       	ldd	r25, Y+3	; 0x03
    1796:	fc 01       	movw	r30, r24
    1798:	e2 0f       	add	r30, r18
    179a:	f3 1f       	adc	r31, r19
    179c:	80 81       	ld	r24, Z
    179e:	0e 94 98 0b 	call	0x1730	; 0x1730 <UART_sendByte>

void UART_sendString(const uint8 *str){

	uint8 i;

	for(i=0; str[i] != '\0';i++){
    17a2:	89 81       	ldd	r24, Y+1	; 0x01
    17a4:	8f 5f       	subi	r24, 0xFF	; 255
    17a6:	89 83       	std	Y+1, r24	; 0x01
    17a8:	89 81       	ldd	r24, Y+1	; 0x01
    17aa:	28 2f       	mov	r18, r24
    17ac:	30 e0       	ldi	r19, 0x00	; 0
    17ae:	8a 81       	ldd	r24, Y+2	; 0x02
    17b0:	9b 81       	ldd	r25, Y+3	; 0x03
    17b2:	fc 01       	movw	r30, r24
    17b4:	e2 0f       	add	r30, r18
    17b6:	f3 1f       	adc	r31, r19
    17b8:	80 81       	ld	r24, Z
    17ba:	88 23       	and	r24, r24
    17bc:	39 f7       	brne	.-50     	; 0x178c <UART_sendString+0x14>
		UART_sendByte(str[i]);
	}
}
    17be:	0f 90       	pop	r0
    17c0:	0f 90       	pop	r0
    17c2:	0f 90       	pop	r0
    17c4:	cf 91       	pop	r28
    17c6:	df 91       	pop	r29
    17c8:	08 95       	ret

000017ca <UART_receiveString>:

void UART_receiveString(uint8 *str){
    17ca:	0f 93       	push	r16
    17cc:	1f 93       	push	r17
    17ce:	df 93       	push	r29
    17d0:	cf 93       	push	r28
    17d2:	00 d0       	rcall	.+0      	; 0x17d4 <UART_receiveString+0xa>
    17d4:	0f 92       	push	r0
    17d6:	cd b7       	in	r28, 0x3d	; 61
    17d8:	de b7       	in	r29, 0x3e	; 62
    17da:	9b 83       	std	Y+3, r25	; 0x03
    17dc:	8a 83       	std	Y+2, r24	; 0x02

	uint8 i=0;
    17de:	19 82       	std	Y+1, r1	; 0x01

	str[i] = UART_receiveByte();
    17e0:	89 81       	ldd	r24, Y+1	; 0x01
    17e2:	28 2f       	mov	r18, r24
    17e4:	30 e0       	ldi	r19, 0x00	; 0
    17e6:	8a 81       	ldd	r24, Y+2	; 0x02
    17e8:	9b 81       	ldd	r25, Y+3	; 0x03
    17ea:	8c 01       	movw	r16, r24
    17ec:	02 0f       	add	r16, r18
    17ee:	13 1f       	adc	r17, r19
    17f0:	0e 94 ac 0b 	call	0x1758	; 0x1758 <UART_receiveByte>
    17f4:	f8 01       	movw	r30, r16
    17f6:	80 83       	st	Z, r24
    17f8:	0f c0       	rjmp	.+30     	; 0x1818 <UART_receiveString+0x4e>

	while(str[i] != '#'){

		i++;
    17fa:	89 81       	ldd	r24, Y+1	; 0x01
    17fc:	8f 5f       	subi	r24, 0xFF	; 255
    17fe:	89 83       	std	Y+1, r24	; 0x01
		str[i] = UART_receiveByte();
    1800:	89 81       	ldd	r24, Y+1	; 0x01
    1802:	28 2f       	mov	r18, r24
    1804:	30 e0       	ldi	r19, 0x00	; 0
    1806:	8a 81       	ldd	r24, Y+2	; 0x02
    1808:	9b 81       	ldd	r25, Y+3	; 0x03
    180a:	8c 01       	movw	r16, r24
    180c:	02 0f       	add	r16, r18
    180e:	13 1f       	adc	r17, r19
    1810:	0e 94 ac 0b 	call	0x1758	; 0x1758 <UART_receiveByte>
    1814:	f8 01       	movw	r30, r16
    1816:	80 83       	st	Z, r24

	uint8 i=0;

	str[i] = UART_receiveByte();

	while(str[i] != '#'){
    1818:	89 81       	ldd	r24, Y+1	; 0x01
    181a:	28 2f       	mov	r18, r24
    181c:	30 e0       	ldi	r19, 0x00	; 0
    181e:	8a 81       	ldd	r24, Y+2	; 0x02
    1820:	9b 81       	ldd	r25, Y+3	; 0x03
    1822:	fc 01       	movw	r30, r24
    1824:	e2 0f       	add	r30, r18
    1826:	f3 1f       	adc	r31, r19
    1828:	80 81       	ld	r24, Z
    182a:	83 32       	cpi	r24, 0x23	; 35
    182c:	31 f7       	brne	.-52     	; 0x17fa <UART_receiveString+0x30>

		i++;
		str[i] = UART_receiveByte();
	}

	str[i] = '\0';
    182e:	89 81       	ldd	r24, Y+1	; 0x01
    1830:	28 2f       	mov	r18, r24
    1832:	30 e0       	ldi	r19, 0x00	; 0
    1834:	8a 81       	ldd	r24, Y+2	; 0x02
    1836:	9b 81       	ldd	r25, Y+3	; 0x03
    1838:	fc 01       	movw	r30, r24
    183a:	e2 0f       	add	r30, r18
    183c:	f3 1f       	adc	r31, r19
    183e:	10 82       	st	Z, r1
}
    1840:	0f 90       	pop	r0
    1842:	0f 90       	pop	r0
    1844:	0f 90       	pop	r0
    1846:	cf 91       	pop	r28
    1848:	df 91       	pop	r29
    184a:	1f 91       	pop	r17
    184c:	0f 91       	pop	r16
    184e:	08 95       	ret

00001850 <GPIO_setupPinDirection>:
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num, GPIO_PinDirectionType direction)
{
    1850:	df 93       	push	r29
    1852:	cf 93       	push	r28
    1854:	00 d0       	rcall	.+0      	; 0x1856 <GPIO_setupPinDirection+0x6>
    1856:	00 d0       	rcall	.+0      	; 0x1858 <GPIO_setupPinDirection+0x8>
    1858:	0f 92       	push	r0
    185a:	cd b7       	in	r28, 0x3d	; 61
    185c:	de b7       	in	r29, 0x3e	; 62
    185e:	89 83       	std	Y+1, r24	; 0x01
    1860:	6a 83       	std	Y+2, r22	; 0x02
    1862:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    1864:	8a 81       	ldd	r24, Y+2	; 0x02
    1866:	88 30       	cpi	r24, 0x08	; 8
    1868:	08 f0       	brcs	.+2      	; 0x186c <GPIO_setupPinDirection+0x1c>
    186a:	d5 c0       	rjmp	.+426    	; 0x1a16 <GPIO_setupPinDirection+0x1c6>
    186c:	89 81       	ldd	r24, Y+1	; 0x01
    186e:	84 30       	cpi	r24, 0x04	; 4
    1870:	08 f0       	brcs	.+2      	; 0x1874 <GPIO_setupPinDirection+0x24>
    1872:	d1 c0       	rjmp	.+418    	; 0x1a16 <GPIO_setupPinDirection+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Setup the pin direction as required */
		switch(port_num)
    1874:	89 81       	ldd	r24, Y+1	; 0x01
    1876:	28 2f       	mov	r18, r24
    1878:	30 e0       	ldi	r19, 0x00	; 0
    187a:	3d 83       	std	Y+5, r19	; 0x05
    187c:	2c 83       	std	Y+4, r18	; 0x04
    187e:	8c 81       	ldd	r24, Y+4	; 0x04
    1880:	9d 81       	ldd	r25, Y+5	; 0x05
    1882:	81 30       	cpi	r24, 0x01	; 1
    1884:	91 05       	cpc	r25, r1
    1886:	09 f4       	brne	.+2      	; 0x188a <GPIO_setupPinDirection+0x3a>
    1888:	43 c0       	rjmp	.+134    	; 0x1910 <GPIO_setupPinDirection+0xc0>
    188a:	2c 81       	ldd	r18, Y+4	; 0x04
    188c:	3d 81       	ldd	r19, Y+5	; 0x05
    188e:	22 30       	cpi	r18, 0x02	; 2
    1890:	31 05       	cpc	r19, r1
    1892:	2c f4       	brge	.+10     	; 0x189e <GPIO_setupPinDirection+0x4e>
    1894:	8c 81       	ldd	r24, Y+4	; 0x04
    1896:	9d 81       	ldd	r25, Y+5	; 0x05
    1898:	00 97       	sbiw	r24, 0x00	; 0
    189a:	71 f0       	breq	.+28     	; 0x18b8 <GPIO_setupPinDirection+0x68>
    189c:	bc c0       	rjmp	.+376    	; 0x1a16 <GPIO_setupPinDirection+0x1c6>
    189e:	2c 81       	ldd	r18, Y+4	; 0x04
    18a0:	3d 81       	ldd	r19, Y+5	; 0x05
    18a2:	22 30       	cpi	r18, 0x02	; 2
    18a4:	31 05       	cpc	r19, r1
    18a6:	09 f4       	brne	.+2      	; 0x18aa <GPIO_setupPinDirection+0x5a>
    18a8:	5f c0       	rjmp	.+190    	; 0x1968 <GPIO_setupPinDirection+0x118>
    18aa:	8c 81       	ldd	r24, Y+4	; 0x04
    18ac:	9d 81       	ldd	r25, Y+5	; 0x05
    18ae:	83 30       	cpi	r24, 0x03	; 3
    18b0:	91 05       	cpc	r25, r1
    18b2:	09 f4       	brne	.+2      	; 0x18b6 <GPIO_setupPinDirection+0x66>
    18b4:	85 c0       	rjmp	.+266    	; 0x19c0 <GPIO_setupPinDirection+0x170>
    18b6:	af c0       	rjmp	.+350    	; 0x1a16 <GPIO_setupPinDirection+0x1c6>
		{
		case PORTA_ID:
			if(direction == PIN_OUTPUT)
    18b8:	8b 81       	ldd	r24, Y+3	; 0x03
    18ba:	81 30       	cpi	r24, 0x01	; 1
    18bc:	a1 f4       	brne	.+40     	; 0x18e6 <GPIO_setupPinDirection+0x96>
			{
				SET_BIT(DDRA,pin_num);
    18be:	aa e3       	ldi	r26, 0x3A	; 58
    18c0:	b0 e0       	ldi	r27, 0x00	; 0
    18c2:	ea e3       	ldi	r30, 0x3A	; 58
    18c4:	f0 e0       	ldi	r31, 0x00	; 0
    18c6:	80 81       	ld	r24, Z
    18c8:	48 2f       	mov	r20, r24
    18ca:	8a 81       	ldd	r24, Y+2	; 0x02
    18cc:	28 2f       	mov	r18, r24
    18ce:	30 e0       	ldi	r19, 0x00	; 0
    18d0:	81 e0       	ldi	r24, 0x01	; 1
    18d2:	90 e0       	ldi	r25, 0x00	; 0
    18d4:	02 2e       	mov	r0, r18
    18d6:	02 c0       	rjmp	.+4      	; 0x18dc <GPIO_setupPinDirection+0x8c>
    18d8:	88 0f       	add	r24, r24
    18da:	99 1f       	adc	r25, r25
    18dc:	0a 94       	dec	r0
    18de:	e2 f7       	brpl	.-8      	; 0x18d8 <GPIO_setupPinDirection+0x88>
    18e0:	84 2b       	or	r24, r20
    18e2:	8c 93       	st	X, r24
    18e4:	98 c0       	rjmp	.+304    	; 0x1a16 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRA,pin_num);
    18e6:	aa e3       	ldi	r26, 0x3A	; 58
    18e8:	b0 e0       	ldi	r27, 0x00	; 0
    18ea:	ea e3       	ldi	r30, 0x3A	; 58
    18ec:	f0 e0       	ldi	r31, 0x00	; 0
    18ee:	80 81       	ld	r24, Z
    18f0:	48 2f       	mov	r20, r24
    18f2:	8a 81       	ldd	r24, Y+2	; 0x02
    18f4:	28 2f       	mov	r18, r24
    18f6:	30 e0       	ldi	r19, 0x00	; 0
    18f8:	81 e0       	ldi	r24, 0x01	; 1
    18fa:	90 e0       	ldi	r25, 0x00	; 0
    18fc:	02 2e       	mov	r0, r18
    18fe:	02 c0       	rjmp	.+4      	; 0x1904 <GPIO_setupPinDirection+0xb4>
    1900:	88 0f       	add	r24, r24
    1902:	99 1f       	adc	r25, r25
    1904:	0a 94       	dec	r0
    1906:	e2 f7       	brpl	.-8      	; 0x1900 <GPIO_setupPinDirection+0xb0>
    1908:	80 95       	com	r24
    190a:	84 23       	and	r24, r20
    190c:	8c 93       	st	X, r24
    190e:	83 c0       	rjmp	.+262    	; 0x1a16 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTB_ID:
			if(direction == PIN_OUTPUT)
    1910:	8b 81       	ldd	r24, Y+3	; 0x03
    1912:	81 30       	cpi	r24, 0x01	; 1
    1914:	a1 f4       	brne	.+40     	; 0x193e <GPIO_setupPinDirection+0xee>
			{
				SET_BIT(DDRB,pin_num);
    1916:	a7 e3       	ldi	r26, 0x37	; 55
    1918:	b0 e0       	ldi	r27, 0x00	; 0
    191a:	e7 e3       	ldi	r30, 0x37	; 55
    191c:	f0 e0       	ldi	r31, 0x00	; 0
    191e:	80 81       	ld	r24, Z
    1920:	48 2f       	mov	r20, r24
    1922:	8a 81       	ldd	r24, Y+2	; 0x02
    1924:	28 2f       	mov	r18, r24
    1926:	30 e0       	ldi	r19, 0x00	; 0
    1928:	81 e0       	ldi	r24, 0x01	; 1
    192a:	90 e0       	ldi	r25, 0x00	; 0
    192c:	02 2e       	mov	r0, r18
    192e:	02 c0       	rjmp	.+4      	; 0x1934 <GPIO_setupPinDirection+0xe4>
    1930:	88 0f       	add	r24, r24
    1932:	99 1f       	adc	r25, r25
    1934:	0a 94       	dec	r0
    1936:	e2 f7       	brpl	.-8      	; 0x1930 <GPIO_setupPinDirection+0xe0>
    1938:	84 2b       	or	r24, r20
    193a:	8c 93       	st	X, r24
    193c:	6c c0       	rjmp	.+216    	; 0x1a16 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRB,pin_num);
    193e:	a7 e3       	ldi	r26, 0x37	; 55
    1940:	b0 e0       	ldi	r27, 0x00	; 0
    1942:	e7 e3       	ldi	r30, 0x37	; 55
    1944:	f0 e0       	ldi	r31, 0x00	; 0
    1946:	80 81       	ld	r24, Z
    1948:	48 2f       	mov	r20, r24
    194a:	8a 81       	ldd	r24, Y+2	; 0x02
    194c:	28 2f       	mov	r18, r24
    194e:	30 e0       	ldi	r19, 0x00	; 0
    1950:	81 e0       	ldi	r24, 0x01	; 1
    1952:	90 e0       	ldi	r25, 0x00	; 0
    1954:	02 2e       	mov	r0, r18
    1956:	02 c0       	rjmp	.+4      	; 0x195c <GPIO_setupPinDirection+0x10c>
    1958:	88 0f       	add	r24, r24
    195a:	99 1f       	adc	r25, r25
    195c:	0a 94       	dec	r0
    195e:	e2 f7       	brpl	.-8      	; 0x1958 <GPIO_setupPinDirection+0x108>
    1960:	80 95       	com	r24
    1962:	84 23       	and	r24, r20
    1964:	8c 93       	st	X, r24
    1966:	57 c0       	rjmp	.+174    	; 0x1a16 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTC_ID:
			if(direction == PIN_OUTPUT)
    1968:	8b 81       	ldd	r24, Y+3	; 0x03
    196a:	81 30       	cpi	r24, 0x01	; 1
    196c:	a1 f4       	brne	.+40     	; 0x1996 <GPIO_setupPinDirection+0x146>
			{
				SET_BIT(DDRC,pin_num);
    196e:	a4 e3       	ldi	r26, 0x34	; 52
    1970:	b0 e0       	ldi	r27, 0x00	; 0
    1972:	e4 e3       	ldi	r30, 0x34	; 52
    1974:	f0 e0       	ldi	r31, 0x00	; 0
    1976:	80 81       	ld	r24, Z
    1978:	48 2f       	mov	r20, r24
    197a:	8a 81       	ldd	r24, Y+2	; 0x02
    197c:	28 2f       	mov	r18, r24
    197e:	30 e0       	ldi	r19, 0x00	; 0
    1980:	81 e0       	ldi	r24, 0x01	; 1
    1982:	90 e0       	ldi	r25, 0x00	; 0
    1984:	02 2e       	mov	r0, r18
    1986:	02 c0       	rjmp	.+4      	; 0x198c <GPIO_setupPinDirection+0x13c>
    1988:	88 0f       	add	r24, r24
    198a:	99 1f       	adc	r25, r25
    198c:	0a 94       	dec	r0
    198e:	e2 f7       	brpl	.-8      	; 0x1988 <GPIO_setupPinDirection+0x138>
    1990:	84 2b       	or	r24, r20
    1992:	8c 93       	st	X, r24
    1994:	40 c0       	rjmp	.+128    	; 0x1a16 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRC,pin_num);
    1996:	a4 e3       	ldi	r26, 0x34	; 52
    1998:	b0 e0       	ldi	r27, 0x00	; 0
    199a:	e4 e3       	ldi	r30, 0x34	; 52
    199c:	f0 e0       	ldi	r31, 0x00	; 0
    199e:	80 81       	ld	r24, Z
    19a0:	48 2f       	mov	r20, r24
    19a2:	8a 81       	ldd	r24, Y+2	; 0x02
    19a4:	28 2f       	mov	r18, r24
    19a6:	30 e0       	ldi	r19, 0x00	; 0
    19a8:	81 e0       	ldi	r24, 0x01	; 1
    19aa:	90 e0       	ldi	r25, 0x00	; 0
    19ac:	02 2e       	mov	r0, r18
    19ae:	02 c0       	rjmp	.+4      	; 0x19b4 <GPIO_setupPinDirection+0x164>
    19b0:	88 0f       	add	r24, r24
    19b2:	99 1f       	adc	r25, r25
    19b4:	0a 94       	dec	r0
    19b6:	e2 f7       	brpl	.-8      	; 0x19b0 <GPIO_setupPinDirection+0x160>
    19b8:	80 95       	com	r24
    19ba:	84 23       	and	r24, r20
    19bc:	8c 93       	st	X, r24
    19be:	2b c0       	rjmp	.+86     	; 0x1a16 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTD_ID:
			if(direction == PIN_OUTPUT)
    19c0:	8b 81       	ldd	r24, Y+3	; 0x03
    19c2:	81 30       	cpi	r24, 0x01	; 1
    19c4:	a1 f4       	brne	.+40     	; 0x19ee <GPIO_setupPinDirection+0x19e>
			{
				SET_BIT(DDRD,pin_num);
    19c6:	a1 e3       	ldi	r26, 0x31	; 49
    19c8:	b0 e0       	ldi	r27, 0x00	; 0
    19ca:	e1 e3       	ldi	r30, 0x31	; 49
    19cc:	f0 e0       	ldi	r31, 0x00	; 0
    19ce:	80 81       	ld	r24, Z
    19d0:	48 2f       	mov	r20, r24
    19d2:	8a 81       	ldd	r24, Y+2	; 0x02
    19d4:	28 2f       	mov	r18, r24
    19d6:	30 e0       	ldi	r19, 0x00	; 0
    19d8:	81 e0       	ldi	r24, 0x01	; 1
    19da:	90 e0       	ldi	r25, 0x00	; 0
    19dc:	02 2e       	mov	r0, r18
    19de:	02 c0       	rjmp	.+4      	; 0x19e4 <GPIO_setupPinDirection+0x194>
    19e0:	88 0f       	add	r24, r24
    19e2:	99 1f       	adc	r25, r25
    19e4:	0a 94       	dec	r0
    19e6:	e2 f7       	brpl	.-8      	; 0x19e0 <GPIO_setupPinDirection+0x190>
    19e8:	84 2b       	or	r24, r20
    19ea:	8c 93       	st	X, r24
    19ec:	14 c0       	rjmp	.+40     	; 0x1a16 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRD,pin_num);
    19ee:	a1 e3       	ldi	r26, 0x31	; 49
    19f0:	b0 e0       	ldi	r27, 0x00	; 0
    19f2:	e1 e3       	ldi	r30, 0x31	; 49
    19f4:	f0 e0       	ldi	r31, 0x00	; 0
    19f6:	80 81       	ld	r24, Z
    19f8:	48 2f       	mov	r20, r24
    19fa:	8a 81       	ldd	r24, Y+2	; 0x02
    19fc:	28 2f       	mov	r18, r24
    19fe:	30 e0       	ldi	r19, 0x00	; 0
    1a00:	81 e0       	ldi	r24, 0x01	; 1
    1a02:	90 e0       	ldi	r25, 0x00	; 0
    1a04:	02 2e       	mov	r0, r18
    1a06:	02 c0       	rjmp	.+4      	; 0x1a0c <GPIO_setupPinDirection+0x1bc>
    1a08:	88 0f       	add	r24, r24
    1a0a:	99 1f       	adc	r25, r25
    1a0c:	0a 94       	dec	r0
    1a0e:	e2 f7       	brpl	.-8      	; 0x1a08 <GPIO_setupPinDirection+0x1b8>
    1a10:	80 95       	com	r24
    1a12:	84 23       	and	r24, r20
    1a14:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    1a16:	0f 90       	pop	r0
    1a18:	0f 90       	pop	r0
    1a1a:	0f 90       	pop	r0
    1a1c:	0f 90       	pop	r0
    1a1e:	0f 90       	pop	r0
    1a20:	cf 91       	pop	r28
    1a22:	df 91       	pop	r29
    1a24:	08 95       	ret

00001a26 <GPIO_writePin>:
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value)
{
    1a26:	df 93       	push	r29
    1a28:	cf 93       	push	r28
    1a2a:	00 d0       	rcall	.+0      	; 0x1a2c <GPIO_writePin+0x6>
    1a2c:	00 d0       	rcall	.+0      	; 0x1a2e <GPIO_writePin+0x8>
    1a2e:	0f 92       	push	r0
    1a30:	cd b7       	in	r28, 0x3d	; 61
    1a32:	de b7       	in	r29, 0x3e	; 62
    1a34:	89 83       	std	Y+1, r24	; 0x01
    1a36:	6a 83       	std	Y+2, r22	; 0x02
    1a38:	4b 83       	std	Y+3, r20	; 0x03
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    1a3a:	8a 81       	ldd	r24, Y+2	; 0x02
    1a3c:	88 30       	cpi	r24, 0x08	; 8
    1a3e:	08 f0       	brcs	.+2      	; 0x1a42 <GPIO_writePin+0x1c>
    1a40:	d5 c0       	rjmp	.+426    	; 0x1bec <GPIO_writePin+0x1c6>
    1a42:	89 81       	ldd	r24, Y+1	; 0x01
    1a44:	84 30       	cpi	r24, 0x04	; 4
    1a46:	08 f0       	brcs	.+2      	; 0x1a4a <GPIO_writePin+0x24>
    1a48:	d1 c0       	rjmp	.+418    	; 0x1bec <GPIO_writePin+0x1c6>
	{
		/* Do Nothing */
	}
	else{
		switch(port_num){
    1a4a:	89 81       	ldd	r24, Y+1	; 0x01
    1a4c:	28 2f       	mov	r18, r24
    1a4e:	30 e0       	ldi	r19, 0x00	; 0
    1a50:	3d 83       	std	Y+5, r19	; 0x05
    1a52:	2c 83       	std	Y+4, r18	; 0x04
    1a54:	8c 81       	ldd	r24, Y+4	; 0x04
    1a56:	9d 81       	ldd	r25, Y+5	; 0x05
    1a58:	81 30       	cpi	r24, 0x01	; 1
    1a5a:	91 05       	cpc	r25, r1
    1a5c:	09 f4       	brne	.+2      	; 0x1a60 <GPIO_writePin+0x3a>
    1a5e:	43 c0       	rjmp	.+134    	; 0x1ae6 <GPIO_writePin+0xc0>
    1a60:	2c 81       	ldd	r18, Y+4	; 0x04
    1a62:	3d 81       	ldd	r19, Y+5	; 0x05
    1a64:	22 30       	cpi	r18, 0x02	; 2
    1a66:	31 05       	cpc	r19, r1
    1a68:	2c f4       	brge	.+10     	; 0x1a74 <GPIO_writePin+0x4e>
    1a6a:	8c 81       	ldd	r24, Y+4	; 0x04
    1a6c:	9d 81       	ldd	r25, Y+5	; 0x05
    1a6e:	00 97       	sbiw	r24, 0x00	; 0
    1a70:	71 f0       	breq	.+28     	; 0x1a8e <GPIO_writePin+0x68>
    1a72:	bc c0       	rjmp	.+376    	; 0x1bec <GPIO_writePin+0x1c6>
    1a74:	2c 81       	ldd	r18, Y+4	; 0x04
    1a76:	3d 81       	ldd	r19, Y+5	; 0x05
    1a78:	22 30       	cpi	r18, 0x02	; 2
    1a7a:	31 05       	cpc	r19, r1
    1a7c:	09 f4       	brne	.+2      	; 0x1a80 <GPIO_writePin+0x5a>
    1a7e:	5f c0       	rjmp	.+190    	; 0x1b3e <GPIO_writePin+0x118>
    1a80:	8c 81       	ldd	r24, Y+4	; 0x04
    1a82:	9d 81       	ldd	r25, Y+5	; 0x05
    1a84:	83 30       	cpi	r24, 0x03	; 3
    1a86:	91 05       	cpc	r25, r1
    1a88:	09 f4       	brne	.+2      	; 0x1a8c <GPIO_writePin+0x66>
    1a8a:	85 c0       	rjmp	.+266    	; 0x1b96 <GPIO_writePin+0x170>
    1a8c:	af c0       	rjmp	.+350    	; 0x1bec <GPIO_writePin+0x1c6>

		case PORTA_ID:
			if(value == HIGH){
    1a8e:	8b 81       	ldd	r24, Y+3	; 0x03
    1a90:	81 30       	cpi	r24, 0x01	; 1
    1a92:	a1 f4       	brne	.+40     	; 0x1abc <GPIO_writePin+0x96>
				SET_BIT(PORTA,pin_num);
    1a94:	ab e3       	ldi	r26, 0x3B	; 59
    1a96:	b0 e0       	ldi	r27, 0x00	; 0
    1a98:	eb e3       	ldi	r30, 0x3B	; 59
    1a9a:	f0 e0       	ldi	r31, 0x00	; 0
    1a9c:	80 81       	ld	r24, Z
    1a9e:	48 2f       	mov	r20, r24
    1aa0:	8a 81       	ldd	r24, Y+2	; 0x02
    1aa2:	28 2f       	mov	r18, r24
    1aa4:	30 e0       	ldi	r19, 0x00	; 0
    1aa6:	81 e0       	ldi	r24, 0x01	; 1
    1aa8:	90 e0       	ldi	r25, 0x00	; 0
    1aaa:	02 2e       	mov	r0, r18
    1aac:	02 c0       	rjmp	.+4      	; 0x1ab2 <GPIO_writePin+0x8c>
    1aae:	88 0f       	add	r24, r24
    1ab0:	99 1f       	adc	r25, r25
    1ab2:	0a 94       	dec	r0
    1ab4:	e2 f7       	brpl	.-8      	; 0x1aae <GPIO_writePin+0x88>
    1ab6:	84 2b       	or	r24, r20
    1ab8:	8c 93       	st	X, r24
    1aba:	98 c0       	rjmp	.+304    	; 0x1bec <GPIO_writePin+0x1c6>
			}
			else{
				CLEAR_BIT(PORTA,pin_num);
    1abc:	ab e3       	ldi	r26, 0x3B	; 59
    1abe:	b0 e0       	ldi	r27, 0x00	; 0
    1ac0:	eb e3       	ldi	r30, 0x3B	; 59
    1ac2:	f0 e0       	ldi	r31, 0x00	; 0
    1ac4:	80 81       	ld	r24, Z
    1ac6:	48 2f       	mov	r20, r24
    1ac8:	8a 81       	ldd	r24, Y+2	; 0x02
    1aca:	28 2f       	mov	r18, r24
    1acc:	30 e0       	ldi	r19, 0x00	; 0
    1ace:	81 e0       	ldi	r24, 0x01	; 1
    1ad0:	90 e0       	ldi	r25, 0x00	; 0
    1ad2:	02 2e       	mov	r0, r18
    1ad4:	02 c0       	rjmp	.+4      	; 0x1ada <GPIO_writePin+0xb4>
    1ad6:	88 0f       	add	r24, r24
    1ad8:	99 1f       	adc	r25, r25
    1ada:	0a 94       	dec	r0
    1adc:	e2 f7       	brpl	.-8      	; 0x1ad6 <GPIO_writePin+0xb0>
    1ade:	80 95       	com	r24
    1ae0:	84 23       	and	r24, r20
    1ae2:	8c 93       	st	X, r24
    1ae4:	83 c0       	rjmp	.+262    	; 0x1bec <GPIO_writePin+0x1c6>
			}
			break;

		case PORTB_ID:
			if(value == HIGH)
    1ae6:	8b 81       	ldd	r24, Y+3	; 0x03
    1ae8:	81 30       	cpi	r24, 0x01	; 1
    1aea:	a1 f4       	brne	.+40     	; 0x1b14 <GPIO_writePin+0xee>
				SET_BIT(PORTB,pin_num);
    1aec:	a8 e3       	ldi	r26, 0x38	; 56
    1aee:	b0 e0       	ldi	r27, 0x00	; 0
    1af0:	e8 e3       	ldi	r30, 0x38	; 56
    1af2:	f0 e0       	ldi	r31, 0x00	; 0
    1af4:	80 81       	ld	r24, Z
    1af6:	48 2f       	mov	r20, r24
    1af8:	8a 81       	ldd	r24, Y+2	; 0x02
    1afa:	28 2f       	mov	r18, r24
    1afc:	30 e0       	ldi	r19, 0x00	; 0
    1afe:	81 e0       	ldi	r24, 0x01	; 1
    1b00:	90 e0       	ldi	r25, 0x00	; 0
    1b02:	02 2e       	mov	r0, r18
    1b04:	02 c0       	rjmp	.+4      	; 0x1b0a <GPIO_writePin+0xe4>
    1b06:	88 0f       	add	r24, r24
    1b08:	99 1f       	adc	r25, r25
    1b0a:	0a 94       	dec	r0
    1b0c:	e2 f7       	brpl	.-8      	; 0x1b06 <GPIO_writePin+0xe0>
    1b0e:	84 2b       	or	r24, r20
    1b10:	8c 93       	st	X, r24
    1b12:	6c c0       	rjmp	.+216    	; 0x1bec <GPIO_writePin+0x1c6>
			else
				CLEAR_BIT(PORTB,pin_num);
    1b14:	a8 e3       	ldi	r26, 0x38	; 56
    1b16:	b0 e0       	ldi	r27, 0x00	; 0
    1b18:	e8 e3       	ldi	r30, 0x38	; 56
    1b1a:	f0 e0       	ldi	r31, 0x00	; 0
    1b1c:	80 81       	ld	r24, Z
    1b1e:	48 2f       	mov	r20, r24
    1b20:	8a 81       	ldd	r24, Y+2	; 0x02
    1b22:	28 2f       	mov	r18, r24
    1b24:	30 e0       	ldi	r19, 0x00	; 0
    1b26:	81 e0       	ldi	r24, 0x01	; 1
    1b28:	90 e0       	ldi	r25, 0x00	; 0
    1b2a:	02 2e       	mov	r0, r18
    1b2c:	02 c0       	rjmp	.+4      	; 0x1b32 <GPIO_writePin+0x10c>
    1b2e:	88 0f       	add	r24, r24
    1b30:	99 1f       	adc	r25, r25
    1b32:	0a 94       	dec	r0
    1b34:	e2 f7       	brpl	.-8      	; 0x1b2e <GPIO_writePin+0x108>
    1b36:	80 95       	com	r24
    1b38:	84 23       	and	r24, r20
    1b3a:	8c 93       	st	X, r24
    1b3c:	57 c0       	rjmp	.+174    	; 0x1bec <GPIO_writePin+0x1c6>
			break;

		case PORTC_ID:
			if(value == HIGH)
    1b3e:	8b 81       	ldd	r24, Y+3	; 0x03
    1b40:	81 30       	cpi	r24, 0x01	; 1
    1b42:	a1 f4       	brne	.+40     	; 0x1b6c <GPIO_writePin+0x146>
				SET_BIT(PORTC,pin_num);
    1b44:	a5 e3       	ldi	r26, 0x35	; 53
    1b46:	b0 e0       	ldi	r27, 0x00	; 0
    1b48:	e5 e3       	ldi	r30, 0x35	; 53
    1b4a:	f0 e0       	ldi	r31, 0x00	; 0
    1b4c:	80 81       	ld	r24, Z
    1b4e:	48 2f       	mov	r20, r24
    1b50:	8a 81       	ldd	r24, Y+2	; 0x02
    1b52:	28 2f       	mov	r18, r24
    1b54:	30 e0       	ldi	r19, 0x00	; 0
    1b56:	81 e0       	ldi	r24, 0x01	; 1
    1b58:	90 e0       	ldi	r25, 0x00	; 0
    1b5a:	02 2e       	mov	r0, r18
    1b5c:	02 c0       	rjmp	.+4      	; 0x1b62 <GPIO_writePin+0x13c>
    1b5e:	88 0f       	add	r24, r24
    1b60:	99 1f       	adc	r25, r25
    1b62:	0a 94       	dec	r0
    1b64:	e2 f7       	brpl	.-8      	; 0x1b5e <GPIO_writePin+0x138>
    1b66:	84 2b       	or	r24, r20
    1b68:	8c 93       	st	X, r24
    1b6a:	40 c0       	rjmp	.+128    	; 0x1bec <GPIO_writePin+0x1c6>
			else
				CLEAR_BIT(PORTC,pin_num);
    1b6c:	a5 e3       	ldi	r26, 0x35	; 53
    1b6e:	b0 e0       	ldi	r27, 0x00	; 0
    1b70:	e5 e3       	ldi	r30, 0x35	; 53
    1b72:	f0 e0       	ldi	r31, 0x00	; 0
    1b74:	80 81       	ld	r24, Z
    1b76:	48 2f       	mov	r20, r24
    1b78:	8a 81       	ldd	r24, Y+2	; 0x02
    1b7a:	28 2f       	mov	r18, r24
    1b7c:	30 e0       	ldi	r19, 0x00	; 0
    1b7e:	81 e0       	ldi	r24, 0x01	; 1
    1b80:	90 e0       	ldi	r25, 0x00	; 0
    1b82:	02 2e       	mov	r0, r18
    1b84:	02 c0       	rjmp	.+4      	; 0x1b8a <GPIO_writePin+0x164>
    1b86:	88 0f       	add	r24, r24
    1b88:	99 1f       	adc	r25, r25
    1b8a:	0a 94       	dec	r0
    1b8c:	e2 f7       	brpl	.-8      	; 0x1b86 <GPIO_writePin+0x160>
    1b8e:	80 95       	com	r24
    1b90:	84 23       	and	r24, r20
    1b92:	8c 93       	st	X, r24
    1b94:	2b c0       	rjmp	.+86     	; 0x1bec <GPIO_writePin+0x1c6>
			break;

		case PORTD_ID:
			if(value == HIGH)
    1b96:	8b 81       	ldd	r24, Y+3	; 0x03
    1b98:	81 30       	cpi	r24, 0x01	; 1
    1b9a:	a1 f4       	brne	.+40     	; 0x1bc4 <GPIO_writePin+0x19e>
				SET_BIT(PORTD,pin_num);
    1b9c:	a2 e3       	ldi	r26, 0x32	; 50
    1b9e:	b0 e0       	ldi	r27, 0x00	; 0
    1ba0:	e2 e3       	ldi	r30, 0x32	; 50
    1ba2:	f0 e0       	ldi	r31, 0x00	; 0
    1ba4:	80 81       	ld	r24, Z
    1ba6:	48 2f       	mov	r20, r24
    1ba8:	8a 81       	ldd	r24, Y+2	; 0x02
    1baa:	28 2f       	mov	r18, r24
    1bac:	30 e0       	ldi	r19, 0x00	; 0
    1bae:	81 e0       	ldi	r24, 0x01	; 1
    1bb0:	90 e0       	ldi	r25, 0x00	; 0
    1bb2:	02 2e       	mov	r0, r18
    1bb4:	02 c0       	rjmp	.+4      	; 0x1bba <GPIO_writePin+0x194>
    1bb6:	88 0f       	add	r24, r24
    1bb8:	99 1f       	adc	r25, r25
    1bba:	0a 94       	dec	r0
    1bbc:	e2 f7       	brpl	.-8      	; 0x1bb6 <GPIO_writePin+0x190>
    1bbe:	84 2b       	or	r24, r20
    1bc0:	8c 93       	st	X, r24
    1bc2:	14 c0       	rjmp	.+40     	; 0x1bec <GPIO_writePin+0x1c6>
			else
				CLEAR_BIT(PORTD,pin_num);
    1bc4:	a2 e3       	ldi	r26, 0x32	; 50
    1bc6:	b0 e0       	ldi	r27, 0x00	; 0
    1bc8:	e2 e3       	ldi	r30, 0x32	; 50
    1bca:	f0 e0       	ldi	r31, 0x00	; 0
    1bcc:	80 81       	ld	r24, Z
    1bce:	48 2f       	mov	r20, r24
    1bd0:	8a 81       	ldd	r24, Y+2	; 0x02
    1bd2:	28 2f       	mov	r18, r24
    1bd4:	30 e0       	ldi	r19, 0x00	; 0
    1bd6:	81 e0       	ldi	r24, 0x01	; 1
    1bd8:	90 e0       	ldi	r25, 0x00	; 0
    1bda:	02 2e       	mov	r0, r18
    1bdc:	02 c0       	rjmp	.+4      	; 0x1be2 <GPIO_writePin+0x1bc>
    1bde:	88 0f       	add	r24, r24
    1be0:	99 1f       	adc	r25, r25
    1be2:	0a 94       	dec	r0
    1be4:	e2 f7       	brpl	.-8      	; 0x1bde <GPIO_writePin+0x1b8>
    1be6:	80 95       	com	r24
    1be8:	84 23       	and	r24, r20
    1bea:	8c 93       	st	X, r24
			break;
		}
	}
}
    1bec:	0f 90       	pop	r0
    1bee:	0f 90       	pop	r0
    1bf0:	0f 90       	pop	r0
    1bf2:	0f 90       	pop	r0
    1bf4:	0f 90       	pop	r0
    1bf6:	cf 91       	pop	r28
    1bf8:	df 91       	pop	r29
    1bfa:	08 95       	ret

00001bfc <GPIO_readPin>:
 * Description :
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return Logic Low.
 */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num)
{
    1bfc:	df 93       	push	r29
    1bfe:	cf 93       	push	r28
    1c00:	00 d0       	rcall	.+0      	; 0x1c02 <GPIO_readPin+0x6>
    1c02:	00 d0       	rcall	.+0      	; 0x1c04 <GPIO_readPin+0x8>
    1c04:	0f 92       	push	r0
    1c06:	cd b7       	in	r28, 0x3d	; 61
    1c08:	de b7       	in	r29, 0x3e	; 62
    1c0a:	89 83       	std	Y+1, r24	; 0x01
    1c0c:	6a 83       	std	Y+2, r22	; 0x02
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    1c0e:	8a 81       	ldd	r24, Y+2	; 0x02
    1c10:	88 30       	cpi	r24, 0x08	; 8
    1c12:	18 f4       	brcc	.+6      	; 0x1c1a <GPIO_readPin+0x1e>
    1c14:	89 81       	ldd	r24, Y+1	; 0x01
    1c16:	84 30       	cpi	r24, 0x04	; 4
    1c18:	10 f0       	brcs	.+4      	; 0x1c1e <GPIO_readPin+0x22>
	{
		return 0;
    1c1a:	1d 82       	std	Y+5, r1	; 0x05
    1c1c:	af c0       	rjmp	.+350    	; 0x1d7c <GPIO_readPin+0x180>
	}

	switch(port_num){
    1c1e:	89 81       	ldd	r24, Y+1	; 0x01
    1c20:	28 2f       	mov	r18, r24
    1c22:	30 e0       	ldi	r19, 0x00	; 0
    1c24:	3c 83       	std	Y+4, r19	; 0x04
    1c26:	2b 83       	std	Y+3, r18	; 0x03
    1c28:	4b 81       	ldd	r20, Y+3	; 0x03
    1c2a:	5c 81       	ldd	r21, Y+4	; 0x04
    1c2c:	41 30       	cpi	r20, 0x01	; 1
    1c2e:	51 05       	cpc	r21, r1
    1c30:	d9 f1       	breq	.+118    	; 0x1ca8 <GPIO_readPin+0xac>
    1c32:	8b 81       	ldd	r24, Y+3	; 0x03
    1c34:	9c 81       	ldd	r25, Y+4	; 0x04
    1c36:	82 30       	cpi	r24, 0x02	; 2
    1c38:	91 05       	cpc	r25, r1
    1c3a:	34 f4       	brge	.+12     	; 0x1c48 <GPIO_readPin+0x4c>
    1c3c:	2b 81       	ldd	r18, Y+3	; 0x03
    1c3e:	3c 81       	ldd	r19, Y+4	; 0x04
    1c40:	21 15       	cp	r18, r1
    1c42:	31 05       	cpc	r19, r1
    1c44:	71 f0       	breq	.+28     	; 0x1c62 <GPIO_readPin+0x66>
    1c46:	99 c0       	rjmp	.+306    	; 0x1d7a <GPIO_readPin+0x17e>
    1c48:	4b 81       	ldd	r20, Y+3	; 0x03
    1c4a:	5c 81       	ldd	r21, Y+4	; 0x04
    1c4c:	42 30       	cpi	r20, 0x02	; 2
    1c4e:	51 05       	cpc	r21, r1
    1c50:	09 f4       	brne	.+2      	; 0x1c54 <GPIO_readPin+0x58>
    1c52:	4d c0       	rjmp	.+154    	; 0x1cee <GPIO_readPin+0xf2>
    1c54:	8b 81       	ldd	r24, Y+3	; 0x03
    1c56:	9c 81       	ldd	r25, Y+4	; 0x04
    1c58:	83 30       	cpi	r24, 0x03	; 3
    1c5a:	91 05       	cpc	r25, r1
    1c5c:	09 f4       	brne	.+2      	; 0x1c60 <GPIO_readPin+0x64>
    1c5e:	6a c0       	rjmp	.+212    	; 0x1d34 <GPIO_readPin+0x138>
    1c60:	8c c0       	rjmp	.+280    	; 0x1d7a <GPIO_readPin+0x17e>

	case PORTA_ID:
		if(GET_BIT(PINA,pin_num))
    1c62:	e9 e3       	ldi	r30, 0x39	; 57
    1c64:	f0 e0       	ldi	r31, 0x00	; 0
    1c66:	80 81       	ld	r24, Z
    1c68:	48 2f       	mov	r20, r24
    1c6a:	50 e0       	ldi	r21, 0x00	; 0
    1c6c:	8a 81       	ldd	r24, Y+2	; 0x02
    1c6e:	28 2f       	mov	r18, r24
    1c70:	30 e0       	ldi	r19, 0x00	; 0
    1c72:	81 e0       	ldi	r24, 0x01	; 1
    1c74:	90 e0       	ldi	r25, 0x00	; 0
    1c76:	02 c0       	rjmp	.+4      	; 0x1c7c <GPIO_readPin+0x80>
    1c78:	88 0f       	add	r24, r24
    1c7a:	99 1f       	adc	r25, r25
    1c7c:	2a 95       	dec	r18
    1c7e:	e2 f7       	brpl	.-8      	; 0x1c78 <GPIO_readPin+0x7c>
    1c80:	9a 01       	movw	r18, r20
    1c82:	28 23       	and	r18, r24
    1c84:	39 23       	and	r19, r25
    1c86:	8a 81       	ldd	r24, Y+2	; 0x02
    1c88:	88 2f       	mov	r24, r24
    1c8a:	90 e0       	ldi	r25, 0x00	; 0
    1c8c:	a9 01       	movw	r20, r18
    1c8e:	02 c0       	rjmp	.+4      	; 0x1c94 <GPIO_readPin+0x98>
    1c90:	55 95       	asr	r21
    1c92:	47 95       	ror	r20
    1c94:	8a 95       	dec	r24
    1c96:	e2 f7       	brpl	.-8      	; 0x1c90 <GPIO_readPin+0x94>
    1c98:	ca 01       	movw	r24, r20
    1c9a:	00 97       	sbiw	r24, 0x00	; 0
    1c9c:	19 f0       	breq	.+6      	; 0x1ca4 <GPIO_readPin+0xa8>
			return 1;
    1c9e:	51 e0       	ldi	r21, 0x01	; 1
    1ca0:	5d 83       	std	Y+5, r21	; 0x05
    1ca2:	6c c0       	rjmp	.+216    	; 0x1d7c <GPIO_readPin+0x180>
		else
			return 0;
    1ca4:	1d 82       	std	Y+5, r1	; 0x05
    1ca6:	6a c0       	rjmp	.+212    	; 0x1d7c <GPIO_readPin+0x180>
		break;

	case PORTB_ID:
		if(GET_BIT(PINB,pin_num))
    1ca8:	e6 e3       	ldi	r30, 0x36	; 54
    1caa:	f0 e0       	ldi	r31, 0x00	; 0
    1cac:	80 81       	ld	r24, Z
    1cae:	48 2f       	mov	r20, r24
    1cb0:	50 e0       	ldi	r21, 0x00	; 0
    1cb2:	8a 81       	ldd	r24, Y+2	; 0x02
    1cb4:	28 2f       	mov	r18, r24
    1cb6:	30 e0       	ldi	r19, 0x00	; 0
    1cb8:	81 e0       	ldi	r24, 0x01	; 1
    1cba:	90 e0       	ldi	r25, 0x00	; 0
    1cbc:	02 c0       	rjmp	.+4      	; 0x1cc2 <GPIO_readPin+0xc6>
    1cbe:	88 0f       	add	r24, r24
    1cc0:	99 1f       	adc	r25, r25
    1cc2:	2a 95       	dec	r18
    1cc4:	e2 f7       	brpl	.-8      	; 0x1cbe <GPIO_readPin+0xc2>
    1cc6:	9a 01       	movw	r18, r20
    1cc8:	28 23       	and	r18, r24
    1cca:	39 23       	and	r19, r25
    1ccc:	8a 81       	ldd	r24, Y+2	; 0x02
    1cce:	88 2f       	mov	r24, r24
    1cd0:	90 e0       	ldi	r25, 0x00	; 0
    1cd2:	a9 01       	movw	r20, r18
    1cd4:	02 c0       	rjmp	.+4      	; 0x1cda <GPIO_readPin+0xde>
    1cd6:	55 95       	asr	r21
    1cd8:	47 95       	ror	r20
    1cda:	8a 95       	dec	r24
    1cdc:	e2 f7       	brpl	.-8      	; 0x1cd6 <GPIO_readPin+0xda>
    1cde:	ca 01       	movw	r24, r20
    1ce0:	00 97       	sbiw	r24, 0x00	; 0
    1ce2:	19 f0       	breq	.+6      	; 0x1cea <GPIO_readPin+0xee>
			return 1;
    1ce4:	51 e0       	ldi	r21, 0x01	; 1
    1ce6:	5d 83       	std	Y+5, r21	; 0x05
    1ce8:	49 c0       	rjmp	.+146    	; 0x1d7c <GPIO_readPin+0x180>
		else
			return 0;
    1cea:	1d 82       	std	Y+5, r1	; 0x05
    1cec:	47 c0       	rjmp	.+142    	; 0x1d7c <GPIO_readPin+0x180>
		break;

	case PORTC_ID:
		if(GET_BIT(PINC,pin_num))
    1cee:	e3 e3       	ldi	r30, 0x33	; 51
    1cf0:	f0 e0       	ldi	r31, 0x00	; 0
    1cf2:	80 81       	ld	r24, Z
    1cf4:	48 2f       	mov	r20, r24
    1cf6:	50 e0       	ldi	r21, 0x00	; 0
    1cf8:	8a 81       	ldd	r24, Y+2	; 0x02
    1cfa:	28 2f       	mov	r18, r24
    1cfc:	30 e0       	ldi	r19, 0x00	; 0
    1cfe:	81 e0       	ldi	r24, 0x01	; 1
    1d00:	90 e0       	ldi	r25, 0x00	; 0
    1d02:	02 c0       	rjmp	.+4      	; 0x1d08 <GPIO_readPin+0x10c>
    1d04:	88 0f       	add	r24, r24
    1d06:	99 1f       	adc	r25, r25
    1d08:	2a 95       	dec	r18
    1d0a:	e2 f7       	brpl	.-8      	; 0x1d04 <GPIO_readPin+0x108>
    1d0c:	9a 01       	movw	r18, r20
    1d0e:	28 23       	and	r18, r24
    1d10:	39 23       	and	r19, r25
    1d12:	8a 81       	ldd	r24, Y+2	; 0x02
    1d14:	88 2f       	mov	r24, r24
    1d16:	90 e0       	ldi	r25, 0x00	; 0
    1d18:	a9 01       	movw	r20, r18
    1d1a:	02 c0       	rjmp	.+4      	; 0x1d20 <GPIO_readPin+0x124>
    1d1c:	55 95       	asr	r21
    1d1e:	47 95       	ror	r20
    1d20:	8a 95       	dec	r24
    1d22:	e2 f7       	brpl	.-8      	; 0x1d1c <GPIO_readPin+0x120>
    1d24:	ca 01       	movw	r24, r20
    1d26:	00 97       	sbiw	r24, 0x00	; 0
    1d28:	19 f0       	breq	.+6      	; 0x1d30 <GPIO_readPin+0x134>
			return 1;
    1d2a:	51 e0       	ldi	r21, 0x01	; 1
    1d2c:	5d 83       	std	Y+5, r21	; 0x05
    1d2e:	26 c0       	rjmp	.+76     	; 0x1d7c <GPIO_readPin+0x180>
		else
			return 0;
    1d30:	1d 82       	std	Y+5, r1	; 0x05
    1d32:	24 c0       	rjmp	.+72     	; 0x1d7c <GPIO_readPin+0x180>
		break;

	case PORTD_ID:
		if(GET_BIT(PIND,pin_num))
    1d34:	e0 e3       	ldi	r30, 0x30	; 48
    1d36:	f0 e0       	ldi	r31, 0x00	; 0
    1d38:	80 81       	ld	r24, Z
    1d3a:	48 2f       	mov	r20, r24
    1d3c:	50 e0       	ldi	r21, 0x00	; 0
    1d3e:	8a 81       	ldd	r24, Y+2	; 0x02
    1d40:	28 2f       	mov	r18, r24
    1d42:	30 e0       	ldi	r19, 0x00	; 0
    1d44:	81 e0       	ldi	r24, 0x01	; 1
    1d46:	90 e0       	ldi	r25, 0x00	; 0
    1d48:	02 c0       	rjmp	.+4      	; 0x1d4e <GPIO_readPin+0x152>
    1d4a:	88 0f       	add	r24, r24
    1d4c:	99 1f       	adc	r25, r25
    1d4e:	2a 95       	dec	r18
    1d50:	e2 f7       	brpl	.-8      	; 0x1d4a <GPIO_readPin+0x14e>
    1d52:	9a 01       	movw	r18, r20
    1d54:	28 23       	and	r18, r24
    1d56:	39 23       	and	r19, r25
    1d58:	8a 81       	ldd	r24, Y+2	; 0x02
    1d5a:	88 2f       	mov	r24, r24
    1d5c:	90 e0       	ldi	r25, 0x00	; 0
    1d5e:	a9 01       	movw	r20, r18
    1d60:	02 c0       	rjmp	.+4      	; 0x1d66 <GPIO_readPin+0x16a>
    1d62:	55 95       	asr	r21
    1d64:	47 95       	ror	r20
    1d66:	8a 95       	dec	r24
    1d68:	e2 f7       	brpl	.-8      	; 0x1d62 <GPIO_readPin+0x166>
    1d6a:	ca 01       	movw	r24, r20
    1d6c:	00 97       	sbiw	r24, 0x00	; 0
    1d6e:	19 f0       	breq	.+6      	; 0x1d76 <GPIO_readPin+0x17a>
			return 1;
    1d70:	51 e0       	ldi	r21, 0x01	; 1
    1d72:	5d 83       	std	Y+5, r21	; 0x05
    1d74:	03 c0       	rjmp	.+6      	; 0x1d7c <GPIO_readPin+0x180>
		else
			return 0;
    1d76:	1d 82       	std	Y+5, r1	; 0x05
    1d78:	01 c0       	rjmp	.+2      	; 0x1d7c <GPIO_readPin+0x180>
		break;
	}
	return 0;
    1d7a:	1d 82       	std	Y+5, r1	; 0x05
    1d7c:	8d 81       	ldd	r24, Y+5	; 0x05
}
    1d7e:	0f 90       	pop	r0
    1d80:	0f 90       	pop	r0
    1d82:	0f 90       	pop	r0
    1d84:	0f 90       	pop	r0
    1d86:	0f 90       	pop	r0
    1d88:	cf 91       	pop	r28
    1d8a:	df 91       	pop	r29
    1d8c:	08 95       	ret

00001d8e <GPIO_setupPortDirection>:
 * If the direction value is PORT_INPUT all pins in this port should be input pins.
 * If the direction value is PORT_OUTPUT all pins in this port should be output pins.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction)
{
    1d8e:	df 93       	push	r29
    1d90:	cf 93       	push	r28
    1d92:	00 d0       	rcall	.+0      	; 0x1d94 <GPIO_setupPortDirection+0x6>
    1d94:	00 d0       	rcall	.+0      	; 0x1d96 <GPIO_setupPortDirection+0x8>
    1d96:	cd b7       	in	r28, 0x3d	; 61
    1d98:	de b7       	in	r29, 0x3e	; 62
    1d9a:	89 83       	std	Y+1, r24	; 0x01
    1d9c:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1d9e:	89 81       	ldd	r24, Y+1	; 0x01
    1da0:	84 30       	cpi	r24, 0x04	; 4
    1da2:	90 f5       	brcc	.+100    	; 0x1e08 <GPIO_setupPortDirection+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Setup the port direction as required */
		switch(port_num)
    1da4:	89 81       	ldd	r24, Y+1	; 0x01
    1da6:	28 2f       	mov	r18, r24
    1da8:	30 e0       	ldi	r19, 0x00	; 0
    1daa:	3c 83       	std	Y+4, r19	; 0x04
    1dac:	2b 83       	std	Y+3, r18	; 0x03
    1dae:	8b 81       	ldd	r24, Y+3	; 0x03
    1db0:	9c 81       	ldd	r25, Y+4	; 0x04
    1db2:	81 30       	cpi	r24, 0x01	; 1
    1db4:	91 05       	cpc	r25, r1
    1db6:	d1 f0       	breq	.+52     	; 0x1dec <GPIO_setupPortDirection+0x5e>
    1db8:	2b 81       	ldd	r18, Y+3	; 0x03
    1dba:	3c 81       	ldd	r19, Y+4	; 0x04
    1dbc:	22 30       	cpi	r18, 0x02	; 2
    1dbe:	31 05       	cpc	r19, r1
    1dc0:	2c f4       	brge	.+10     	; 0x1dcc <GPIO_setupPortDirection+0x3e>
    1dc2:	8b 81       	ldd	r24, Y+3	; 0x03
    1dc4:	9c 81       	ldd	r25, Y+4	; 0x04
    1dc6:	00 97       	sbiw	r24, 0x00	; 0
    1dc8:	61 f0       	breq	.+24     	; 0x1de2 <GPIO_setupPortDirection+0x54>
    1dca:	1e c0       	rjmp	.+60     	; 0x1e08 <GPIO_setupPortDirection+0x7a>
    1dcc:	2b 81       	ldd	r18, Y+3	; 0x03
    1dce:	3c 81       	ldd	r19, Y+4	; 0x04
    1dd0:	22 30       	cpi	r18, 0x02	; 2
    1dd2:	31 05       	cpc	r19, r1
    1dd4:	81 f0       	breq	.+32     	; 0x1df6 <GPIO_setupPortDirection+0x68>
    1dd6:	8b 81       	ldd	r24, Y+3	; 0x03
    1dd8:	9c 81       	ldd	r25, Y+4	; 0x04
    1dda:	83 30       	cpi	r24, 0x03	; 3
    1ddc:	91 05       	cpc	r25, r1
    1dde:	81 f0       	breq	.+32     	; 0x1e00 <GPIO_setupPortDirection+0x72>
    1de0:	13 c0       	rjmp	.+38     	; 0x1e08 <GPIO_setupPortDirection+0x7a>
		{
		case PORTA_ID:
			DDRA = direction;
    1de2:	ea e3       	ldi	r30, 0x3A	; 58
    1de4:	f0 e0       	ldi	r31, 0x00	; 0
    1de6:	8a 81       	ldd	r24, Y+2	; 0x02
    1de8:	80 83       	st	Z, r24
    1dea:	0e c0       	rjmp	.+28     	; 0x1e08 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB = direction;
    1dec:	e7 e3       	ldi	r30, 0x37	; 55
    1dee:	f0 e0       	ldi	r31, 0x00	; 0
    1df0:	8a 81       	ldd	r24, Y+2	; 0x02
    1df2:	80 83       	st	Z, r24
    1df4:	09 c0       	rjmp	.+18     	; 0x1e08 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC = direction;
    1df6:	e4 e3       	ldi	r30, 0x34	; 52
    1df8:	f0 e0       	ldi	r31, 0x00	; 0
    1dfa:	8a 81       	ldd	r24, Y+2	; 0x02
    1dfc:	80 83       	st	Z, r24
    1dfe:	04 c0       	rjmp	.+8      	; 0x1e08 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD = direction;
    1e00:	e1 e3       	ldi	r30, 0x31	; 49
    1e02:	f0 e0       	ldi	r31, 0x00	; 0
    1e04:	8a 81       	ldd	r24, Y+2	; 0x02
    1e06:	80 83       	st	Z, r24
			break;
		}
	}
}
    1e08:	0f 90       	pop	r0
    1e0a:	0f 90       	pop	r0
    1e0c:	0f 90       	pop	r0
    1e0e:	0f 90       	pop	r0
    1e10:	cf 91       	pop	r28
    1e12:	df 91       	pop	r29
    1e14:	08 95       	ret

00001e16 <GPIO_writePort>:
 * If any pin in the port is output pin the value will be written.
 * If any pin in the port is input pin this will activate/deactivate the internal pull-up resistor.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_writePort(uint8 port_num, uint8 value)
{
    1e16:	df 93       	push	r29
    1e18:	cf 93       	push	r28
    1e1a:	00 d0       	rcall	.+0      	; 0x1e1c <GPIO_writePort+0x6>
    1e1c:	00 d0       	rcall	.+0      	; 0x1e1e <GPIO_writePort+0x8>
    1e1e:	cd b7       	in	r28, 0x3d	; 61
    1e20:	de b7       	in	r29, 0x3e	; 62
    1e22:	89 83       	std	Y+1, r24	; 0x01
    1e24:	6a 83       	std	Y+2, r22	; 0x02
	if(port_num >= NUM_OF_PORTS)
	{
		/* Do Nothing */
	}

	switch(port_num){
    1e26:	89 81       	ldd	r24, Y+1	; 0x01
    1e28:	28 2f       	mov	r18, r24
    1e2a:	30 e0       	ldi	r19, 0x00	; 0
    1e2c:	3c 83       	std	Y+4, r19	; 0x04
    1e2e:	2b 83       	std	Y+3, r18	; 0x03
    1e30:	8b 81       	ldd	r24, Y+3	; 0x03
    1e32:	9c 81       	ldd	r25, Y+4	; 0x04
    1e34:	81 30       	cpi	r24, 0x01	; 1
    1e36:	91 05       	cpc	r25, r1
    1e38:	d1 f0       	breq	.+52     	; 0x1e6e <GPIO_writePort+0x58>
    1e3a:	2b 81       	ldd	r18, Y+3	; 0x03
    1e3c:	3c 81       	ldd	r19, Y+4	; 0x04
    1e3e:	22 30       	cpi	r18, 0x02	; 2
    1e40:	31 05       	cpc	r19, r1
    1e42:	2c f4       	brge	.+10     	; 0x1e4e <GPIO_writePort+0x38>
    1e44:	8b 81       	ldd	r24, Y+3	; 0x03
    1e46:	9c 81       	ldd	r25, Y+4	; 0x04
    1e48:	00 97       	sbiw	r24, 0x00	; 0
    1e4a:	61 f0       	breq	.+24     	; 0x1e64 <GPIO_writePort+0x4e>
    1e4c:	1e c0       	rjmp	.+60     	; 0x1e8a <GPIO_writePort+0x74>
    1e4e:	2b 81       	ldd	r18, Y+3	; 0x03
    1e50:	3c 81       	ldd	r19, Y+4	; 0x04
    1e52:	22 30       	cpi	r18, 0x02	; 2
    1e54:	31 05       	cpc	r19, r1
    1e56:	81 f0       	breq	.+32     	; 0x1e78 <GPIO_writePort+0x62>
    1e58:	8b 81       	ldd	r24, Y+3	; 0x03
    1e5a:	9c 81       	ldd	r25, Y+4	; 0x04
    1e5c:	83 30       	cpi	r24, 0x03	; 3
    1e5e:	91 05       	cpc	r25, r1
    1e60:	81 f0       	breq	.+32     	; 0x1e82 <GPIO_writePort+0x6c>
    1e62:	13 c0       	rjmp	.+38     	; 0x1e8a <GPIO_writePort+0x74>

	case PORTA_ID:
		PORTA = value;
    1e64:	eb e3       	ldi	r30, 0x3B	; 59
    1e66:	f0 e0       	ldi	r31, 0x00	; 0
    1e68:	8a 81       	ldd	r24, Y+2	; 0x02
    1e6a:	80 83       	st	Z, r24
    1e6c:	0e c0       	rjmp	.+28     	; 0x1e8a <GPIO_writePort+0x74>
		break;
	case PORTB_ID:
		PORTB = value;
    1e6e:	e8 e3       	ldi	r30, 0x38	; 56
    1e70:	f0 e0       	ldi	r31, 0x00	; 0
    1e72:	8a 81       	ldd	r24, Y+2	; 0x02
    1e74:	80 83       	st	Z, r24
    1e76:	09 c0       	rjmp	.+18     	; 0x1e8a <GPIO_writePort+0x74>
		break;
	case PORTC_ID:
		PORTC = value;
    1e78:	e5 e3       	ldi	r30, 0x35	; 53
    1e7a:	f0 e0       	ldi	r31, 0x00	; 0
    1e7c:	8a 81       	ldd	r24, Y+2	; 0x02
    1e7e:	80 83       	st	Z, r24
    1e80:	04 c0       	rjmp	.+8      	; 0x1e8a <GPIO_writePort+0x74>
		break;
	case PORTD_ID:
		PORTD = value;
    1e82:	e2 e3       	ldi	r30, 0x32	; 50
    1e84:	f0 e0       	ldi	r31, 0x00	; 0
    1e86:	8a 81       	ldd	r24, Y+2	; 0x02
    1e88:	80 83       	st	Z, r24
		break;
	}
}
    1e8a:	0f 90       	pop	r0
    1e8c:	0f 90       	pop	r0
    1e8e:	0f 90       	pop	r0
    1e90:	0f 90       	pop	r0
    1e92:	cf 91       	pop	r28
    1e94:	df 91       	pop	r29
    1e96:	08 95       	ret

00001e98 <GPIO_readPort>:
 * Description :
 * Read and return the value of the required port.
 * If the input port number is not correct, The function will return ZERO value.
 */
uint8 GPIO_readPort(uint8 port_num)
{
    1e98:	df 93       	push	r29
    1e9a:	cf 93       	push	r28
    1e9c:	00 d0       	rcall	.+0      	; 0x1e9e <GPIO_readPort+0x6>
    1e9e:	00 d0       	rcall	.+0      	; 0x1ea0 <GPIO_readPort+0x8>
    1ea0:	cd b7       	in	r28, 0x3d	; 61
    1ea2:	de b7       	in	r29, 0x3e	; 62
    1ea4:	89 83       	std	Y+1, r24	; 0x01
	if(port_num >= NUM_OF_PORTS)
    1ea6:	89 81       	ldd	r24, Y+1	; 0x01
    1ea8:	84 30       	cpi	r24, 0x04	; 4
    1eaa:	10 f0       	brcs	.+4      	; 0x1eb0 <GPIO_readPort+0x18>
	{
		return 0;
    1eac:	1c 82       	std	Y+4, r1	; 0x04
    1eae:	34 c0       	rjmp	.+104    	; 0x1f18 <GPIO_readPort+0x80>
	}

	switch(port_num){
    1eb0:	89 81       	ldd	r24, Y+1	; 0x01
    1eb2:	28 2f       	mov	r18, r24
    1eb4:	30 e0       	ldi	r19, 0x00	; 0
    1eb6:	3b 83       	std	Y+3, r19	; 0x03
    1eb8:	2a 83       	std	Y+2, r18	; 0x02
    1eba:	8a 81       	ldd	r24, Y+2	; 0x02
    1ebc:	9b 81       	ldd	r25, Y+3	; 0x03
    1ebe:	81 30       	cpi	r24, 0x01	; 1
    1ec0:	91 05       	cpc	r25, r1
    1ec2:	d1 f0       	breq	.+52     	; 0x1ef8 <GPIO_readPort+0x60>
    1ec4:	2a 81       	ldd	r18, Y+2	; 0x02
    1ec6:	3b 81       	ldd	r19, Y+3	; 0x03
    1ec8:	22 30       	cpi	r18, 0x02	; 2
    1eca:	31 05       	cpc	r19, r1
    1ecc:	2c f4       	brge	.+10     	; 0x1ed8 <GPIO_readPort+0x40>
    1ece:	8a 81       	ldd	r24, Y+2	; 0x02
    1ed0:	9b 81       	ldd	r25, Y+3	; 0x03
    1ed2:	00 97       	sbiw	r24, 0x00	; 0
    1ed4:	61 f0       	breq	.+24     	; 0x1eee <GPIO_readPort+0x56>
    1ed6:	1f c0       	rjmp	.+62     	; 0x1f16 <GPIO_readPort+0x7e>
    1ed8:	2a 81       	ldd	r18, Y+2	; 0x02
    1eda:	3b 81       	ldd	r19, Y+3	; 0x03
    1edc:	22 30       	cpi	r18, 0x02	; 2
    1ede:	31 05       	cpc	r19, r1
    1ee0:	81 f0       	breq	.+32     	; 0x1f02 <GPIO_readPort+0x6a>
    1ee2:	8a 81       	ldd	r24, Y+2	; 0x02
    1ee4:	9b 81       	ldd	r25, Y+3	; 0x03
    1ee6:	83 30       	cpi	r24, 0x03	; 3
    1ee8:	91 05       	cpc	r25, r1
    1eea:	81 f0       	breq	.+32     	; 0x1f0c <GPIO_readPort+0x74>
    1eec:	14 c0       	rjmp	.+40     	; 0x1f16 <GPIO_readPort+0x7e>

	case PORTA_ID:
		return PINA;
    1eee:	e9 e3       	ldi	r30, 0x39	; 57
    1ef0:	f0 e0       	ldi	r31, 0x00	; 0
    1ef2:	90 81       	ld	r25, Z
    1ef4:	9c 83       	std	Y+4, r25	; 0x04
    1ef6:	10 c0       	rjmp	.+32     	; 0x1f18 <GPIO_readPort+0x80>
		break;
	case PORTB_ID:
		return PINB;
    1ef8:	e6 e3       	ldi	r30, 0x36	; 54
    1efa:	f0 e0       	ldi	r31, 0x00	; 0
    1efc:	20 81       	ld	r18, Z
    1efe:	2c 83       	std	Y+4, r18	; 0x04
    1f00:	0b c0       	rjmp	.+22     	; 0x1f18 <GPIO_readPort+0x80>
		break;
	case PORTC_ID:
		return PINC;
    1f02:	e3 e3       	ldi	r30, 0x33	; 51
    1f04:	f0 e0       	ldi	r31, 0x00	; 0
    1f06:	30 81       	ld	r19, Z
    1f08:	3c 83       	std	Y+4, r19	; 0x04
    1f0a:	06 c0       	rjmp	.+12     	; 0x1f18 <GPIO_readPort+0x80>
		break;
	case PORTD_ID:
		return PIND;
    1f0c:	e0 e3       	ldi	r30, 0x30	; 48
    1f0e:	f0 e0       	ldi	r31, 0x00	; 0
    1f10:	80 81       	ld	r24, Z
    1f12:	8c 83       	std	Y+4, r24	; 0x04
    1f14:	01 c0       	rjmp	.+2      	; 0x1f18 <GPIO_readPort+0x80>
		break;
	}
	return 0;
    1f16:	1c 82       	std	Y+4, r1	; 0x04
    1f18:	8c 81       	ldd	r24, Y+4	; 0x04
}
    1f1a:	0f 90       	pop	r0
    1f1c:	0f 90       	pop	r0
    1f1e:	0f 90       	pop	r0
    1f20:	0f 90       	pop	r0
    1f22:	cf 91       	pop	r28
    1f24:	df 91       	pop	r29
    1f26:	08 95       	ret

00001f28 <__vector_8>:

/****************************************************************************
 *                        INTERRUPT SERVICE ROUTINE
 ****************************************************************************/

ISR(TIMER1_OVF_vect){
    1f28:	1f 92       	push	r1
    1f2a:	0f 92       	push	r0
    1f2c:	0f b6       	in	r0, 0x3f	; 63
    1f2e:	0f 92       	push	r0
    1f30:	11 24       	eor	r1, r1
    1f32:	2f 93       	push	r18
    1f34:	3f 93       	push	r19
    1f36:	4f 93       	push	r20
    1f38:	5f 93       	push	r21
    1f3a:	6f 93       	push	r22
    1f3c:	7f 93       	push	r23
    1f3e:	8f 93       	push	r24
    1f40:	9f 93       	push	r25
    1f42:	af 93       	push	r26
    1f44:	bf 93       	push	r27
    1f46:	ef 93       	push	r30
    1f48:	ff 93       	push	r31
    1f4a:	df 93       	push	r29
    1f4c:	cf 93       	push	r28
    1f4e:	cd b7       	in	r28, 0x3d	; 61
    1f50:	de b7       	in	r29, 0x3e	; 62
	(*g_callBackptr)();
    1f52:	e0 91 72 01 	lds	r30, 0x0172
    1f56:	f0 91 73 01 	lds	r31, 0x0173
    1f5a:	09 95       	icall
}
    1f5c:	cf 91       	pop	r28
    1f5e:	df 91       	pop	r29
    1f60:	ff 91       	pop	r31
    1f62:	ef 91       	pop	r30
    1f64:	bf 91       	pop	r27
    1f66:	af 91       	pop	r26
    1f68:	9f 91       	pop	r25
    1f6a:	8f 91       	pop	r24
    1f6c:	7f 91       	pop	r23
    1f6e:	6f 91       	pop	r22
    1f70:	5f 91       	pop	r21
    1f72:	4f 91       	pop	r20
    1f74:	3f 91       	pop	r19
    1f76:	2f 91       	pop	r18
    1f78:	0f 90       	pop	r0
    1f7a:	0f be       	out	0x3f, r0	; 63
    1f7c:	0f 90       	pop	r0
    1f7e:	1f 90       	pop	r1
    1f80:	18 95       	reti

00001f82 <__vector_6>:

ISR(TIMER1_COMPA_vect){
    1f82:	1f 92       	push	r1
    1f84:	0f 92       	push	r0
    1f86:	0f b6       	in	r0, 0x3f	; 63
    1f88:	0f 92       	push	r0
    1f8a:	11 24       	eor	r1, r1
    1f8c:	2f 93       	push	r18
    1f8e:	3f 93       	push	r19
    1f90:	4f 93       	push	r20
    1f92:	5f 93       	push	r21
    1f94:	6f 93       	push	r22
    1f96:	7f 93       	push	r23
    1f98:	8f 93       	push	r24
    1f9a:	9f 93       	push	r25
    1f9c:	af 93       	push	r26
    1f9e:	bf 93       	push	r27
    1fa0:	ef 93       	push	r30
    1fa2:	ff 93       	push	r31
    1fa4:	df 93       	push	r29
    1fa6:	cf 93       	push	r28
    1fa8:	cd b7       	in	r28, 0x3d	; 61
    1faa:	de b7       	in	r29, 0x3e	; 62
	(*g_callBackptr)();
    1fac:	e0 91 72 01 	lds	r30, 0x0172
    1fb0:	f0 91 73 01 	lds	r31, 0x0173
    1fb4:	09 95       	icall
}
    1fb6:	cf 91       	pop	r28
    1fb8:	df 91       	pop	r29
    1fba:	ff 91       	pop	r31
    1fbc:	ef 91       	pop	r30
    1fbe:	bf 91       	pop	r27
    1fc0:	af 91       	pop	r26
    1fc2:	9f 91       	pop	r25
    1fc4:	8f 91       	pop	r24
    1fc6:	7f 91       	pop	r23
    1fc8:	6f 91       	pop	r22
    1fca:	5f 91       	pop	r21
    1fcc:	4f 91       	pop	r20
    1fce:	3f 91       	pop	r19
    1fd0:	2f 91       	pop	r18
    1fd2:	0f 90       	pop	r0
    1fd4:	0f be       	out	0x3f, r0	; 63
    1fd6:	0f 90       	pop	r0
    1fd8:	1f 90       	pop	r1
    1fda:	18 95       	reti

00001fdc <__vector_7>:

ISR(TIMER1_COMPB_vect){}
    1fdc:	1f 92       	push	r1
    1fde:	0f 92       	push	r0
    1fe0:	0f b6       	in	r0, 0x3f	; 63
    1fe2:	0f 92       	push	r0
    1fe4:	11 24       	eor	r1, r1
    1fe6:	df 93       	push	r29
    1fe8:	cf 93       	push	r28
    1fea:	cd b7       	in	r28, 0x3d	; 61
    1fec:	de b7       	in	r29, 0x3e	; 62
    1fee:	cf 91       	pop	r28
    1ff0:	df 91       	pop	r29
    1ff2:	0f 90       	pop	r0
    1ff4:	0f be       	out	0x3f, r0	; 63
    1ff6:	0f 90       	pop	r0
    1ff8:	1f 90       	pop	r1
    1ffa:	18 95       	reti

00001ffc <TIMER1_init>:

/****************************************************************************
 *                         Functions definition
 ****************************************************************************/

void TIMER1_init(TIMER1_configType* configurations){
    1ffc:	ef 92       	push	r14
    1ffe:	ff 92       	push	r15
    2000:	0f 93       	push	r16
    2002:	1f 93       	push	r17
    2004:	df 93       	push	r29
    2006:	cf 93       	push	r28
    2008:	cd b7       	in	r28, 0x3d	; 61
    200a:	de b7       	in	r29, 0x3e	; 62
    200c:	28 97       	sbiw	r28, 0x08	; 8
    200e:	0f b6       	in	r0, 0x3f	; 63
    2010:	f8 94       	cli
    2012:	de bf       	out	0x3e, r29	; 62
    2014:	0f be       	out	0x3f, r0	; 63
    2016:	cd bf       	out	0x3d, r28	; 61
    2018:	9e 83       	std	Y+6, r25	; 0x06
    201a:	8d 83       	std	Y+5, r24	; 0x05

	uint16 dutyCycle_A,dutyCycle_B;

	switch(configurations->mode){
    201c:	ed 81       	ldd	r30, Y+5	; 0x05
    201e:	fe 81       	ldd	r31, Y+6	; 0x06
    2020:	80 81       	ld	r24, Z
    2022:	28 2f       	mov	r18, r24
    2024:	30 e0       	ldi	r19, 0x00	; 0
    2026:	38 87       	std	Y+8, r19	; 0x08
    2028:	2f 83       	std	Y+7, r18	; 0x07
    202a:	8f 81       	ldd	r24, Y+7	; 0x07
    202c:	98 85       	ldd	r25, Y+8	; 0x08
    202e:	81 30       	cpi	r24, 0x01	; 1
    2030:	91 05       	cpc	r25, r1
    2032:	09 f4       	brne	.+2      	; 0x2036 <TIMER1_init+0x3a>
    2034:	45 c0       	rjmp	.+138    	; 0x20c0 <TIMER1_init+0xc4>
    2036:	2f 81       	ldd	r18, Y+7	; 0x07
    2038:	38 85       	ldd	r19, Y+8	; 0x08
    203a:	22 30       	cpi	r18, 0x02	; 2
    203c:	31 05       	cpc	r19, r1
    203e:	2c f4       	brge	.+10     	; 0x204a <TIMER1_init+0x4e>
    2040:	8f 81       	ldd	r24, Y+7	; 0x07
    2042:	98 85       	ldd	r25, Y+8	; 0x08
    2044:	00 97       	sbiw	r24, 0x00	; 0
    2046:	71 f0       	breq	.+28     	; 0x2064 <TIMER1_init+0x68>
    2048:	5f c1       	rjmp	.+702    	; 0x2308 <TIMER1_init+0x30c>
    204a:	2f 81       	ldd	r18, Y+7	; 0x07
    204c:	38 85       	ldd	r19, Y+8	; 0x08
    204e:	22 30       	cpi	r18, 0x02	; 2
    2050:	31 05       	cpc	r19, r1
    2052:	09 f4       	brne	.+2      	; 0x2056 <TIMER1_init+0x5a>
    2054:	71 c0       	rjmp	.+226    	; 0x2138 <TIMER1_init+0x13c>
    2056:	8f 81       	ldd	r24, Y+7	; 0x07
    2058:	98 85       	ldd	r25, Y+8	; 0x08
    205a:	83 30       	cpi	r24, 0x03	; 3
    205c:	91 05       	cpc	r25, r1
    205e:	09 f4       	brne	.+2      	; 0x2062 <TIMER1_init+0x66>
    2060:	ca c0       	rjmp	.+404    	; 0x21f6 <TIMER1_init+0x1fa>
    2062:	52 c1       	rjmp	.+676    	; 0x2308 <TIMER1_init+0x30c>

	case NORMAL:
		TCCR1A_R.bit.COM1A_bit = 0; /* Normal (non-PWM) */
    2064:	ef e4       	ldi	r30, 0x4F	; 79
    2066:	f0 e0       	ldi	r31, 0x00	; 0
    2068:	80 81       	ld	r24, Z
    206a:	8f 73       	andi	r24, 0x3F	; 63
    206c:	80 83       	st	Z, r24
		TCCR1A_R.bit.COM1B_bit = 0; /* Normal (non-PWM) */
    206e:	ef e4       	ldi	r30, 0x4F	; 79
    2070:	f0 e0       	ldi	r31, 0x00	; 0
    2072:	80 81       	ld	r24, Z
    2074:	8f 7c       	andi	r24, 0xCF	; 207
    2076:	80 83       	st	Z, r24
		TCCR1A_R.bit.FOC1A_bit = 1; /* non-PWM */
    2078:	ef e4       	ldi	r30, 0x4F	; 79
    207a:	f0 e0       	ldi	r31, 0x00	; 0
    207c:	80 81       	ld	r24, Z
    207e:	88 60       	ori	r24, 0x08	; 8
    2080:	80 83       	st	Z, r24
		TCCR1A_R.bit.FOC1B_bit = 1; /* non-PWM */
    2082:	ef e4       	ldi	r30, 0x4F	; 79
    2084:	f0 e0       	ldi	r31, 0x00	; 0
    2086:	80 81       	ld	r24, Z
    2088:	84 60       	ori	r24, 0x04	; 4
    208a:	80 83       	st	Z, r24
		TCCR1A_R.bit.WGM10_bit = 0; /* Overflow mode */
    208c:	ef e4       	ldi	r30, 0x4F	; 79
    208e:	f0 e0       	ldi	r31, 0x00	; 0
    2090:	80 81       	ld	r24, Z
    2092:	8e 7f       	andi	r24, 0xFE	; 254
    2094:	80 83       	st	Z, r24
		TCCR1A_R.bit.WGM11_bit = 0; /* Overflow mode */
    2096:	ef e4       	ldi	r30, 0x4F	; 79
    2098:	f0 e0       	ldi	r31, 0x00	; 0
    209a:	80 81       	ld	r24, Z
    209c:	8d 7f       	andi	r24, 0xFD	; 253
    209e:	80 83       	st	Z, r24
		TCCR1B_R.bit.WGM12_bit = 0; /* Overflow mode */
    20a0:	ee e4       	ldi	r30, 0x4E	; 78
    20a2:	f0 e0       	ldi	r31, 0x00	; 0
    20a4:	80 81       	ld	r24, Z
    20a6:	87 7f       	andi	r24, 0xF7	; 247
    20a8:	80 83       	st	Z, r24
		TCCR1B_R.bit.WGM13_bit = 0; /* Overflow mode */
    20aa:	ee e4       	ldi	r30, 0x4E	; 78
    20ac:	f0 e0       	ldi	r31, 0x00	; 0
    20ae:	80 81       	ld	r24, Z
    20b0:	8f 7e       	andi	r24, 0xEF	; 239
    20b2:	80 83       	st	Z, r24
		TIMSK_R.bit.TOIE1_bit = 1;  /* Enable interrupt for overflow mode */
    20b4:	e9 e5       	ldi	r30, 0x59	; 89
    20b6:	f0 e0       	ldi	r31, 0x00	; 0
    20b8:	80 81       	ld	r24, Z
    20ba:	84 60       	ori	r24, 0x04	; 4
    20bc:	80 83       	st	Z, r24
    20be:	24 c1       	rjmp	.+584    	; 0x2308 <TIMER1_init+0x30c>
		break;

	case COMPARE:
		TCCR1A_R.bit.COM1A_bit = 0; /* Normal (non-PWM) */
    20c0:	ef e4       	ldi	r30, 0x4F	; 79
    20c2:	f0 e0       	ldi	r31, 0x00	; 0
    20c4:	80 81       	ld	r24, Z
    20c6:	8f 73       	andi	r24, 0x3F	; 63
    20c8:	80 83       	st	Z, r24
		TCCR1A_R.bit.COM1B_bit = 0; /* Normal (non-PWM) */
    20ca:	ef e4       	ldi	r30, 0x4F	; 79
    20cc:	f0 e0       	ldi	r31, 0x00	; 0
    20ce:	80 81       	ld	r24, Z
    20d0:	8f 7c       	andi	r24, 0xCF	; 207
    20d2:	80 83       	st	Z, r24
		TCCR1A_R.bit.FOC1A_bit = 1; /* non-PWM */
    20d4:	ef e4       	ldi	r30, 0x4F	; 79
    20d6:	f0 e0       	ldi	r31, 0x00	; 0
    20d8:	80 81       	ld	r24, Z
    20da:	88 60       	ori	r24, 0x08	; 8
    20dc:	80 83       	st	Z, r24
		TCCR1A_R.bit.FOC1B_bit = 1; /* non-PWM */
    20de:	ef e4       	ldi	r30, 0x4F	; 79
    20e0:	f0 e0       	ldi	r31, 0x00	; 0
    20e2:	80 81       	ld	r24, Z
    20e4:	84 60       	ori	r24, 0x04	; 4
    20e6:	80 83       	st	Z, r24
		TCCR1A_R.bit.WGM10_bit = 0; /* Compare mode */
    20e8:	ef e4       	ldi	r30, 0x4F	; 79
    20ea:	f0 e0       	ldi	r31, 0x00	; 0
    20ec:	80 81       	ld	r24, Z
    20ee:	8e 7f       	andi	r24, 0xFE	; 254
    20f0:	80 83       	st	Z, r24
		TCCR1A_R.bit.WGM11_bit = 0; /* Compare mode */
    20f2:	ef e4       	ldi	r30, 0x4F	; 79
    20f4:	f0 e0       	ldi	r31, 0x00	; 0
    20f6:	80 81       	ld	r24, Z
    20f8:	8d 7f       	andi	r24, 0xFD	; 253
    20fa:	80 83       	st	Z, r24
		TCCR1B_R.bit.WGM12_bit = 1; /* Compare mode */
    20fc:	ee e4       	ldi	r30, 0x4E	; 78
    20fe:	f0 e0       	ldi	r31, 0x00	; 0
    2100:	80 81       	ld	r24, Z
    2102:	88 60       	ori	r24, 0x08	; 8
    2104:	80 83       	st	Z, r24
		TCCR1B_R.bit.WGM13_bit = 0; /* Compare mode */
    2106:	ee e4       	ldi	r30, 0x4E	; 78
    2108:	f0 e0       	ldi	r31, 0x00	; 0
    210a:	80 81       	ld	r24, Z
    210c:	8f 7e       	andi	r24, 0xEF	; 239
    210e:	80 83       	st	Z, r24
		TIMSK_R.bit.OCIE1A_bit = 1; /* Enable interrupt for compare mode unit A */
    2110:	e9 e5       	ldi	r30, 0x59	; 89
    2112:	f0 e0       	ldi	r31, 0x00	; 0
    2114:	80 81       	ld	r24, Z
    2116:	80 61       	ori	r24, 0x10	; 16
    2118:	80 83       	st	Z, r24
		TIMSK_R.bit.OCIE1B_bit = 1; /* Enable interrupt for compare mode unit B */
    211a:	e9 e5       	ldi	r30, 0x59	; 89
    211c:	f0 e0       	ldi	r31, 0x00	; 0
    211e:	80 81       	ld	r24, Z
    2120:	88 60       	ori	r24, 0x08	; 8
    2122:	80 83       	st	Z, r24

		OCR1A_R = configurations->compare_value; /* Adjusting compare value */
    2124:	aa e4       	ldi	r26, 0x4A	; 74
    2126:	b0 e0       	ldi	r27, 0x00	; 0
    2128:	ed 81       	ldd	r30, Y+5	; 0x05
    212a:	fe 81       	ldd	r31, Y+6	; 0x06
    212c:	84 81       	ldd	r24, Z+4	; 0x04
    212e:	95 81       	ldd	r25, Z+5	; 0x05
    2130:	11 96       	adiw	r26, 0x01	; 1
    2132:	9c 93       	st	X, r25
    2134:	8e 93       	st	-X, r24
    2136:	e8 c0       	rjmp	.+464    	; 0x2308 <TIMER1_init+0x30c>
		break;

	case PWM_B:

		DDRD_R.bit.DDRD4_bit = 1; /* PD4 output pin UNITB */
    2138:	e1 e3       	ldi	r30, 0x31	; 49
    213a:	f0 e0       	ldi	r31, 0x00	; 0
    213c:	80 81       	ld	r24, Z
    213e:	80 61       	ori	r24, 0x10	; 16
    2140:	80 83       	st	Z, r24

		TCCR1A_R.bit.COM1A_bit = 2;  /* PWM non-inverting mode */
    2142:	ef e4       	ldi	r30, 0x4F	; 79
    2144:	f0 e0       	ldi	r31, 0x00	; 0
    2146:	80 81       	ld	r24, Z
    2148:	8f 73       	andi	r24, 0x3F	; 63
    214a:	80 68       	ori	r24, 0x80	; 128
    214c:	80 83       	st	Z, r24
		TCCR1A_R.bit.COM1B_bit = 2;  /* PWM non-inverting mode */
    214e:	ef e4       	ldi	r30, 0x4F	; 79
    2150:	f0 e0       	ldi	r31, 0x00	; 0
    2152:	80 81       	ld	r24, Z
    2154:	8f 7c       	andi	r24, 0xCF	; 207
    2156:	80 62       	ori	r24, 0x20	; 32
    2158:	80 83       	st	Z, r24
		TCCR1A_R.bit.FOC1A_bit = 0; /* PWM */
    215a:	ef e4       	ldi	r30, 0x4F	; 79
    215c:	f0 e0       	ldi	r31, 0x00	; 0
    215e:	80 81       	ld	r24, Z
    2160:	87 7f       	andi	r24, 0xF7	; 247
    2162:	80 83       	st	Z, r24
		TCCR1A_R.bit.FOC1B_bit = 0; /* PWM */
    2164:	ef e4       	ldi	r30, 0x4F	; 79
    2166:	f0 e0       	ldi	r31, 0x00	; 0
    2168:	80 81       	ld	r24, Z
    216a:	8b 7f       	andi	r24, 0xFB	; 251
    216c:	80 83       	st	Z, r24
		TCCR1A_R.bit.WGM10_bit = 1; /* PWM mode TOP = OCR1A */
    216e:	ef e4       	ldi	r30, 0x4F	; 79
    2170:	f0 e0       	ldi	r31, 0x00	; 0
    2172:	80 81       	ld	r24, Z
    2174:	81 60       	ori	r24, 0x01	; 1
    2176:	80 83       	st	Z, r24
		TCCR1A_R.bit.WGM11_bit = 1; /* PWM mode */
    2178:	ef e4       	ldi	r30, 0x4F	; 79
    217a:	f0 e0       	ldi	r31, 0x00	; 0
    217c:	80 81       	ld	r24, Z
    217e:	82 60       	ori	r24, 0x02	; 2
    2180:	80 83       	st	Z, r24
		TCCR1B_R.bit.WGM12_bit = 1; /* PWM mode */
    2182:	ee e4       	ldi	r30, 0x4E	; 78
    2184:	f0 e0       	ldi	r31, 0x00	; 0
    2186:	80 81       	ld	r24, Z
    2188:	88 60       	ori	r24, 0x08	; 8
    218a:	80 83       	st	Z, r24
		TCCR1B_R.bit.WGM13_bit = 1; /* PWM mode */
    218c:	ee e4       	ldi	r30, 0x4E	; 78
    218e:	f0 e0       	ldi	r31, 0x00	; 0
    2190:	80 81       	ld	r24, Z
    2192:	80 61       	ori	r24, 0x10	; 16
    2194:	80 83       	st	Z, r24

		OCR1A_R = configurations->compare_value;
    2196:	aa e4       	ldi	r26, 0x4A	; 74
    2198:	b0 e0       	ldi	r27, 0x00	; 0
    219a:	ed 81       	ldd	r30, Y+5	; 0x05
    219c:	fe 81       	ldd	r31, Y+6	; 0x06
    219e:	84 81       	ldd	r24, Z+4	; 0x04
    21a0:	95 81       	ldd	r25, Z+5	; 0x05
    21a2:	11 96       	adiw	r26, 0x01	; 1
    21a4:	9c 93       	st	X, r25
    21a6:	8e 93       	st	-X, r24
		dutyCycle_B = (uint16)(((uint32)(configurations->UNITB_dutyCycle)*OCR1A_R)/100);
    21a8:	ed 81       	ldd	r30, Y+5	; 0x05
    21aa:	fe 81       	ldd	r31, Y+6	; 0x06
    21ac:	87 81       	ldd	r24, Z+7	; 0x07
    21ae:	e8 2e       	mov	r14, r24
    21b0:	ff 24       	eor	r15, r15
    21b2:	00 e0       	ldi	r16, 0x00	; 0
    21b4:	10 e0       	ldi	r17, 0x00	; 0
    21b6:	ea e4       	ldi	r30, 0x4A	; 74
    21b8:	f0 e0       	ldi	r31, 0x00	; 0
    21ba:	80 81       	ld	r24, Z
    21bc:	91 81       	ldd	r25, Z+1	; 0x01
    21be:	9c 01       	movw	r18, r24
    21c0:	40 e0       	ldi	r20, 0x00	; 0
    21c2:	50 e0       	ldi	r21, 0x00	; 0
    21c4:	c8 01       	movw	r24, r16
    21c6:	b7 01       	movw	r22, r14
    21c8:	0e 94 be 20 	call	0x417c	; 0x417c <__mulsi3>
    21cc:	dc 01       	movw	r26, r24
    21ce:	cb 01       	movw	r24, r22
    21d0:	24 e6       	ldi	r18, 0x64	; 100
    21d2:	30 e0       	ldi	r19, 0x00	; 0
    21d4:	40 e0       	ldi	r20, 0x00	; 0
    21d6:	50 e0       	ldi	r21, 0x00	; 0
    21d8:	bc 01       	movw	r22, r24
    21da:	cd 01       	movw	r24, r26
    21dc:	0e 94 dd 20 	call	0x41ba	; 0x41ba <__udivmodsi4>
    21e0:	da 01       	movw	r26, r20
    21e2:	c9 01       	movw	r24, r18
    21e4:	9a 83       	std	Y+2, r25	; 0x02
    21e6:	89 83       	std	Y+1, r24	; 0x01

		OCR1B_R = dutyCycle_B; /* Adjusting duty cycle for PWM unit B */
    21e8:	e8 e4       	ldi	r30, 0x48	; 72
    21ea:	f0 e0       	ldi	r31, 0x00	; 0
    21ec:	89 81       	ldd	r24, Y+1	; 0x01
    21ee:	9a 81       	ldd	r25, Y+2	; 0x02
    21f0:	91 83       	std	Z+1, r25	; 0x01
    21f2:	80 83       	st	Z, r24
    21f4:	89 c0       	rjmp	.+274    	; 0x2308 <TIMER1_init+0x30c>
		break;

	case PWM_AB:

		DDRD_R.bit.DDRD4_bit = 1; /* PD4 output pin UNITB */
    21f6:	e1 e3       	ldi	r30, 0x31	; 49
    21f8:	f0 e0       	ldi	r31, 0x00	; 0
    21fa:	80 81       	ld	r24, Z
    21fc:	80 61       	ori	r24, 0x10	; 16
    21fe:	80 83       	st	Z, r24
		DDRD_R.bit.DDRD5_bit = 1; /* PD4 output pin UNITA */
    2200:	e1 e3       	ldi	r30, 0x31	; 49
    2202:	f0 e0       	ldi	r31, 0x00	; 0
    2204:	80 81       	ld	r24, Z
    2206:	80 62       	ori	r24, 0x20	; 32
    2208:	80 83       	st	Z, r24

		TCCR1A_R.bit.COM1A_bit = 2;  /* PWM non-inverting mode */
    220a:	ef e4       	ldi	r30, 0x4F	; 79
    220c:	f0 e0       	ldi	r31, 0x00	; 0
    220e:	80 81       	ld	r24, Z
    2210:	8f 73       	andi	r24, 0x3F	; 63
    2212:	80 68       	ori	r24, 0x80	; 128
    2214:	80 83       	st	Z, r24
		TCCR1A_R.bit.COM1B_bit = 2;  /* PWM non-inverting mode */
    2216:	ef e4       	ldi	r30, 0x4F	; 79
    2218:	f0 e0       	ldi	r31, 0x00	; 0
    221a:	80 81       	ld	r24, Z
    221c:	8f 7c       	andi	r24, 0xCF	; 207
    221e:	80 62       	ori	r24, 0x20	; 32
    2220:	80 83       	st	Z, r24
		TCCR1A_R.bit.FOC1A_bit = 0; /* PWM */
    2222:	ef e4       	ldi	r30, 0x4F	; 79
    2224:	f0 e0       	ldi	r31, 0x00	; 0
    2226:	80 81       	ld	r24, Z
    2228:	87 7f       	andi	r24, 0xF7	; 247
    222a:	80 83       	st	Z, r24
		TCCR1A_R.bit.FOC1B_bit = 0; /* PWM */
    222c:	ef e4       	ldi	r30, 0x4F	; 79
    222e:	f0 e0       	ldi	r31, 0x00	; 0
    2230:	80 81       	ld	r24, Z
    2232:	8b 7f       	andi	r24, 0xFB	; 251
    2234:	80 83       	st	Z, r24
		TCCR1A_R.bit.WGM10_bit = 0; /* PWM mode TOP = ICR1 */
    2236:	ef e4       	ldi	r30, 0x4F	; 79
    2238:	f0 e0       	ldi	r31, 0x00	; 0
    223a:	80 81       	ld	r24, Z
    223c:	8e 7f       	andi	r24, 0xFE	; 254
    223e:	80 83       	st	Z, r24
		TCCR1A_R.bit.WGM11_bit = 1; /* PWM mode */
    2240:	ef e4       	ldi	r30, 0x4F	; 79
    2242:	f0 e0       	ldi	r31, 0x00	; 0
    2244:	80 81       	ld	r24, Z
    2246:	82 60       	ori	r24, 0x02	; 2
    2248:	80 83       	st	Z, r24
		TCCR1B_R.bit.WGM12_bit = 1; /* PWM mode */
    224a:	ee e4       	ldi	r30, 0x4E	; 78
    224c:	f0 e0       	ldi	r31, 0x00	; 0
    224e:	80 81       	ld	r24, Z
    2250:	88 60       	ori	r24, 0x08	; 8
    2252:	80 83       	st	Z, r24
		TCCR1B_R.bit.WGM13_bit = 1; /* PWM mode */
    2254:	ee e4       	ldi	r30, 0x4E	; 78
    2256:	f0 e0       	ldi	r31, 0x00	; 0
    2258:	80 81       	ld	r24, Z
    225a:	80 61       	ori	r24, 0x10	; 16
    225c:	80 83       	st	Z, r24

		ICR1_R = configurations->compare_value; /* Adjusting TOP value for PWM unit A and B */
    225e:	a6 e4       	ldi	r26, 0x46	; 70
    2260:	b0 e0       	ldi	r27, 0x00	; 0
    2262:	ed 81       	ldd	r30, Y+5	; 0x05
    2264:	fe 81       	ldd	r31, Y+6	; 0x06
    2266:	84 81       	ldd	r24, Z+4	; 0x04
    2268:	95 81       	ldd	r25, Z+5	; 0x05
    226a:	11 96       	adiw	r26, 0x01	; 1
    226c:	9c 93       	st	X, r25
    226e:	8e 93       	st	-X, r24
		dutyCycle_A = (uint16)(((uint32)(configurations->UNITA_dutyCycle)*ICR1_R)/100);
    2270:	ed 81       	ldd	r30, Y+5	; 0x05
    2272:	fe 81       	ldd	r31, Y+6	; 0x06
    2274:	86 81       	ldd	r24, Z+6	; 0x06
    2276:	e8 2e       	mov	r14, r24
    2278:	ff 24       	eor	r15, r15
    227a:	00 e0       	ldi	r16, 0x00	; 0
    227c:	10 e0       	ldi	r17, 0x00	; 0
    227e:	e6 e4       	ldi	r30, 0x46	; 70
    2280:	f0 e0       	ldi	r31, 0x00	; 0
    2282:	80 81       	ld	r24, Z
    2284:	91 81       	ldd	r25, Z+1	; 0x01
    2286:	9c 01       	movw	r18, r24
    2288:	40 e0       	ldi	r20, 0x00	; 0
    228a:	50 e0       	ldi	r21, 0x00	; 0
    228c:	c8 01       	movw	r24, r16
    228e:	b7 01       	movw	r22, r14
    2290:	0e 94 be 20 	call	0x417c	; 0x417c <__mulsi3>
    2294:	dc 01       	movw	r26, r24
    2296:	cb 01       	movw	r24, r22
    2298:	24 e6       	ldi	r18, 0x64	; 100
    229a:	30 e0       	ldi	r19, 0x00	; 0
    229c:	40 e0       	ldi	r20, 0x00	; 0
    229e:	50 e0       	ldi	r21, 0x00	; 0
    22a0:	bc 01       	movw	r22, r24
    22a2:	cd 01       	movw	r24, r26
    22a4:	0e 94 dd 20 	call	0x41ba	; 0x41ba <__udivmodsi4>
    22a8:	da 01       	movw	r26, r20
    22aa:	c9 01       	movw	r24, r18
    22ac:	9c 83       	std	Y+4, r25	; 0x04
    22ae:	8b 83       	std	Y+3, r24	; 0x03
		dutyCycle_B = (uint16)(((uint32)(configurations->UNITB_dutyCycle)*ICR1_R)/100);
    22b0:	ed 81       	ldd	r30, Y+5	; 0x05
    22b2:	fe 81       	ldd	r31, Y+6	; 0x06
    22b4:	87 81       	ldd	r24, Z+7	; 0x07
    22b6:	e8 2e       	mov	r14, r24
    22b8:	ff 24       	eor	r15, r15
    22ba:	00 e0       	ldi	r16, 0x00	; 0
    22bc:	10 e0       	ldi	r17, 0x00	; 0
    22be:	e6 e4       	ldi	r30, 0x46	; 70
    22c0:	f0 e0       	ldi	r31, 0x00	; 0
    22c2:	80 81       	ld	r24, Z
    22c4:	91 81       	ldd	r25, Z+1	; 0x01
    22c6:	9c 01       	movw	r18, r24
    22c8:	40 e0       	ldi	r20, 0x00	; 0
    22ca:	50 e0       	ldi	r21, 0x00	; 0
    22cc:	c8 01       	movw	r24, r16
    22ce:	b7 01       	movw	r22, r14
    22d0:	0e 94 be 20 	call	0x417c	; 0x417c <__mulsi3>
    22d4:	dc 01       	movw	r26, r24
    22d6:	cb 01       	movw	r24, r22
    22d8:	24 e6       	ldi	r18, 0x64	; 100
    22da:	30 e0       	ldi	r19, 0x00	; 0
    22dc:	40 e0       	ldi	r20, 0x00	; 0
    22de:	50 e0       	ldi	r21, 0x00	; 0
    22e0:	bc 01       	movw	r22, r24
    22e2:	cd 01       	movw	r24, r26
    22e4:	0e 94 dd 20 	call	0x41ba	; 0x41ba <__udivmodsi4>
    22e8:	da 01       	movw	r26, r20
    22ea:	c9 01       	movw	r24, r18
    22ec:	9a 83       	std	Y+2, r25	; 0x02
    22ee:	89 83       	std	Y+1, r24	; 0x01

		OCR1A_R = dutyCycle_A; /* Adjusting duty cycle for PWM unit A */
    22f0:	ea e4       	ldi	r30, 0x4A	; 74
    22f2:	f0 e0       	ldi	r31, 0x00	; 0
    22f4:	8b 81       	ldd	r24, Y+3	; 0x03
    22f6:	9c 81       	ldd	r25, Y+4	; 0x04
    22f8:	91 83       	std	Z+1, r25	; 0x01
    22fa:	80 83       	st	Z, r24
		OCR1B_R = dutyCycle_B; /* Adjusting duty cycle for PWM unit B */
    22fc:	e8 e4       	ldi	r30, 0x48	; 72
    22fe:	f0 e0       	ldi	r31, 0x00	; 0
    2300:	89 81       	ldd	r24, Y+1	; 0x01
    2302:	9a 81       	ldd	r25, Y+2	; 0x02
    2304:	91 83       	std	Z+1, r25	; 0x01
    2306:	80 83       	st	Z, r24
		break;
	}

	/* Adjusting the pre-scaler */
	TCCR1B_R.bit.CS1_bit = configurations->prescaler;
    2308:	ae e4       	ldi	r26, 0x4E	; 78
    230a:	b0 e0       	ldi	r27, 0x00	; 0
    230c:	ed 81       	ldd	r30, Y+5	; 0x05
    230e:	fe 81       	ldd	r31, Y+6	; 0x06
    2310:	81 81       	ldd	r24, Z+1	; 0x01
    2312:	87 70       	andi	r24, 0x07	; 7
    2314:	98 2f       	mov	r25, r24
    2316:	97 70       	andi	r25, 0x07	; 7
    2318:	8c 91       	ld	r24, X
    231a:	88 7f       	andi	r24, 0xF8	; 248
    231c:	89 2b       	or	r24, r25
    231e:	8c 93       	st	X, r24

	/* Adjusting initial value */
	TCNT1_R = configurations->initial_value;
    2320:	ac e4       	ldi	r26, 0x4C	; 76
    2322:	b0 e0       	ldi	r27, 0x00	; 0
    2324:	ed 81       	ldd	r30, Y+5	; 0x05
    2326:	fe 81       	ldd	r31, Y+6	; 0x06
    2328:	82 81       	ldd	r24, Z+2	; 0x02
    232a:	93 81       	ldd	r25, Z+3	; 0x03
    232c:	11 96       	adiw	r26, 0x01	; 1
    232e:	9c 93       	st	X, r25
    2330:	8e 93       	st	-X, r24
}
    2332:	28 96       	adiw	r28, 0x08	; 8
    2334:	0f b6       	in	r0, 0x3f	; 63
    2336:	f8 94       	cli
    2338:	de bf       	out	0x3e, r29	; 62
    233a:	0f be       	out	0x3f, r0	; 63
    233c:	cd bf       	out	0x3d, r28	; 61
    233e:	cf 91       	pop	r28
    2340:	df 91       	pop	r29
    2342:	1f 91       	pop	r17
    2344:	0f 91       	pop	r16
    2346:	ff 90       	pop	r15
    2348:	ef 90       	pop	r14
    234a:	08 95       	ret

0000234c <TIMER1_deInit>:


void TIMER1_deInit(void){
    234c:	df 93       	push	r29
    234e:	cf 93       	push	r28
    2350:	cd b7       	in	r28, 0x3d	; 61
    2352:	de b7       	in	r29, 0x3e	; 62

	/* No clock source ( disable timer1 ) */
	TCCR1B_R.bit.CS1_bit = 0;
    2354:	ee e4       	ldi	r30, 0x4E	; 78
    2356:	f0 e0       	ldi	r31, 0x00	; 0
    2358:	80 81       	ld	r24, Z
    235a:	88 7f       	andi	r24, 0xF8	; 248
    235c:	80 83       	st	Z, r24
}
    235e:	cf 91       	pop	r28
    2360:	df 91       	pop	r29
    2362:	08 95       	ret

00002364 <TIMER1_setCallBack>:


void TIMER1_setCallBack(volatile void(*ptr)(void)){
    2364:	df 93       	push	r29
    2366:	cf 93       	push	r28
    2368:	00 d0       	rcall	.+0      	; 0x236a <TIMER1_setCallBack+0x6>
    236a:	cd b7       	in	r28, 0x3d	; 61
    236c:	de b7       	in	r29, 0x3e	; 62
    236e:	9a 83       	std	Y+2, r25	; 0x02
    2370:	89 83       	std	Y+1, r24	; 0x01

	g_callBackptr = ptr;
    2372:	89 81       	ldd	r24, Y+1	; 0x01
    2374:	9a 81       	ldd	r25, Y+2	; 0x02
    2376:	90 93 73 01 	sts	0x0173, r25
    237a:	80 93 72 01 	sts	0x0172, r24
}
    237e:	0f 90       	pop	r0
    2380:	0f 90       	pop	r0
    2382:	cf 91       	pop	r28
    2384:	df 91       	pop	r29
    2386:	08 95       	ret

00002388 <DCmotor_init>:

/**********************************************************************
 *                           Function definition
 **********************************************************************/

void DCmotor_init(void){
    2388:	df 93       	push	r29
    238a:	cf 93       	push	r28
    238c:	cd b7       	in	r28, 0x3d	; 61
    238e:	de b7       	in	r29, 0x3e	; 62

	/* Setup the two pins of motor to output pins */
	GPIO_setupPinDirection(IN1_PORT,IN1_PIN,PIN_OUTPUT);
    2390:	82 e0       	ldi	r24, 0x02	; 2
    2392:	60 e0       	ldi	r22, 0x00	; 0
    2394:	41 e0       	ldi	r20, 0x01	; 1
    2396:	0e 94 28 0c 	call	0x1850	; 0x1850 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(IN2_PORT,IN2_PIN,PIN_OUTPUT);
    239a:	82 e0       	ldi	r24, 0x02	; 2
    239c:	61 e0       	ldi	r22, 0x01	; 1
    239e:	41 e0       	ldi	r20, 0x01	; 1
    23a0:	0e 94 28 0c 	call	0x1850	; 0x1850 <GPIO_setupPinDirection>

	/* Stop motor at beginning */
	GPIO_writePin(IN1_PORT,IN1_PIN,LOW);
    23a4:	82 e0       	ldi	r24, 0x02	; 2
    23a6:	60 e0       	ldi	r22, 0x00	; 0
    23a8:	40 e0       	ldi	r20, 0x00	; 0
    23aa:	0e 94 13 0d 	call	0x1a26	; 0x1a26 <GPIO_writePin>
	GPIO_writePin(IN2_PORT,IN2_PIN,LOW);
    23ae:	82 e0       	ldi	r24, 0x02	; 2
    23b0:	61 e0       	ldi	r22, 0x01	; 1
    23b2:	40 e0       	ldi	r20, 0x00	; 0
    23b4:	0e 94 13 0d 	call	0x1a26	; 0x1a26 <GPIO_writePin>
}
    23b8:	cf 91       	pop	r28
    23ba:	df 91       	pop	r29
    23bc:	08 95       	ret

000023be <DCmotor_rotate>:

void DCmotor_rotate(DCmotor_state state,uint8 speed){
    23be:	df 93       	push	r29
    23c0:	cf 93       	push	r28
    23c2:	00 d0       	rcall	.+0      	; 0x23c4 <DCmotor_rotate+0x6>
    23c4:	00 d0       	rcall	.+0      	; 0x23c6 <DCmotor_rotate+0x8>
    23c6:	cd b7       	in	r28, 0x3d	; 61
    23c8:	de b7       	in	r29, 0x3e	; 62
    23ca:	89 83       	std	Y+1, r24	; 0x01
    23cc:	6a 83       	std	Y+2, r22	; 0x02

	switch(state){
    23ce:	89 81       	ldd	r24, Y+1	; 0x01
    23d0:	28 2f       	mov	r18, r24
    23d2:	30 e0       	ldi	r19, 0x00	; 0
    23d4:	3c 83       	std	Y+4, r19	; 0x04
    23d6:	2b 83       	std	Y+3, r18	; 0x03
    23d8:	8b 81       	ldd	r24, Y+3	; 0x03
    23da:	9c 81       	ldd	r25, Y+4	; 0x04
    23dc:	81 30       	cpi	r24, 0x01	; 1
    23de:	91 05       	cpc	r25, r1
    23e0:	b9 f0       	breq	.+46     	; 0x2410 <DCmotor_rotate+0x52>
    23e2:	2b 81       	ldd	r18, Y+3	; 0x03
    23e4:	3c 81       	ldd	r19, Y+4	; 0x04
    23e6:	22 30       	cpi	r18, 0x02	; 2
    23e8:	31 05       	cpc	r19, r1
    23ea:	01 f1       	breq	.+64     	; 0x242c <DCmotor_rotate+0x6e>
    23ec:	8b 81       	ldd	r24, Y+3	; 0x03
    23ee:	9c 81       	ldd	r25, Y+4	; 0x04
    23f0:	00 97       	sbiw	r24, 0x00	; 0
    23f2:	31 f5       	brne	.+76     	; 0x2440 <DCmotor_rotate+0x82>
	case CW:

		GPIO_writePin(IN1_PORT,IN1_PIN,HIGH);
    23f4:	82 e0       	ldi	r24, 0x02	; 2
    23f6:	60 e0       	ldi	r22, 0x00	; 0
    23f8:	41 e0       	ldi	r20, 0x01	; 1
    23fa:	0e 94 13 0d 	call	0x1a26	; 0x1a26 <GPIO_writePin>
		GPIO_writePin(IN2_PORT,IN2_PIN,LOW);
    23fe:	82 e0       	ldi	r24, 0x02	; 2
    2400:	61 e0       	ldi	r22, 0x01	; 1
    2402:	40 e0       	ldi	r20, 0x00	; 0
    2404:	0e 94 13 0d 	call	0x1a26	; 0x1a26 <GPIO_writePin>
		PWM_timer0_start(speed);
    2408:	8a 81       	ldd	r24, Y+2	; 0x02
    240a:	0e 94 cf 08 	call	0x119e	; 0x119e <PWM_timer0_start>
    240e:	18 c0       	rjmp	.+48     	; 0x2440 <DCmotor_rotate+0x82>
		break;
	case A_CW:
		GPIO_writePin(IN1_PORT,IN1_PIN,LOW);
    2410:	82 e0       	ldi	r24, 0x02	; 2
    2412:	60 e0       	ldi	r22, 0x00	; 0
    2414:	40 e0       	ldi	r20, 0x00	; 0
    2416:	0e 94 13 0d 	call	0x1a26	; 0x1a26 <GPIO_writePin>
		GPIO_writePin(IN2_PORT,IN2_PIN,HIGH);
    241a:	82 e0       	ldi	r24, 0x02	; 2
    241c:	61 e0       	ldi	r22, 0x01	; 1
    241e:	41 e0       	ldi	r20, 0x01	; 1
    2420:	0e 94 13 0d 	call	0x1a26	; 0x1a26 <GPIO_writePin>
		PWM_timer0_start(speed);
    2424:	8a 81       	ldd	r24, Y+2	; 0x02
    2426:	0e 94 cf 08 	call	0x119e	; 0x119e <PWM_timer0_start>
    242a:	0a c0       	rjmp	.+20     	; 0x2440 <DCmotor_rotate+0x82>
		break;
	case MOTOR_STOP:
		GPIO_writePin(IN1_PORT,IN1_PIN,LOW);
    242c:	82 e0       	ldi	r24, 0x02	; 2
    242e:	60 e0       	ldi	r22, 0x00	; 0
    2430:	40 e0       	ldi	r20, 0x00	; 0
    2432:	0e 94 13 0d 	call	0x1a26	; 0x1a26 <GPIO_writePin>
		GPIO_writePin(IN2_PORT,IN2_PIN,LOW);
    2436:	82 e0       	ldi	r24, 0x02	; 2
    2438:	61 e0       	ldi	r22, 0x01	; 1
    243a:	40 e0       	ldi	r20, 0x00	; 0
    243c:	0e 94 13 0d 	call	0x1a26	; 0x1a26 <GPIO_writePin>
		break;
	}
}
    2440:	0f 90       	pop	r0
    2442:	0f 90       	pop	r0
    2444:	0f 90       	pop	r0
    2446:	0f 90       	pop	r0
    2448:	cf 91       	pop	r28
    244a:	df 91       	pop	r29
    244c:	08 95       	ret

0000244e <IR_init>:
#include"MCAL Atmega32/GPIO.h"

/***************************************************************************
 *                          Functions definition
 *************************************************************************** */
void IR_init(uint8 IR_num){
    244e:	df 93       	push	r29
    2450:	cf 93       	push	r28
    2452:	0f 92       	push	r0
    2454:	cd b7       	in	r28, 0x3d	; 61
    2456:	de b7       	in	r29, 0x3e	; 62
    2458:	89 83       	std	Y+1, r24	; 0x01

	GPIO_setupPinDirection(IR_PORT,IR_num,PIN_INPUT);
    245a:	80 e0       	ldi	r24, 0x00	; 0
    245c:	69 81       	ldd	r22, Y+1	; 0x01
    245e:	40 e0       	ldi	r20, 0x00	; 0
    2460:	0e 94 28 0c 	call	0x1850	; 0x1850 <GPIO_setupPinDirection>
}
    2464:	0f 90       	pop	r0
    2466:	cf 91       	pop	r28
    2468:	df 91       	pop	r29
    246a:	08 95       	ret

0000246c <IR_getReading>:

uint8 IR_getReading(uint8 IR_num){
    246c:	df 93       	push	r29
    246e:	cf 93       	push	r28
    2470:	0f 92       	push	r0
    2472:	cd b7       	in	r28, 0x3d	; 61
    2474:	de b7       	in	r29, 0x3e	; 62
    2476:	89 83       	std	Y+1, r24	; 0x01

	return GPIO_readPin(IR_PORT,IR_num);
    2478:	80 e0       	ldi	r24, 0x00	; 0
    247a:	69 81       	ldd	r22, Y+1	; 0x01
    247c:	0e 94 fe 0d 	call	0x1bfc	; 0x1bfc <GPIO_readPin>
}
    2480:	0f 90       	pop	r0
    2482:	cf 91       	pop	r28
    2484:	df 91       	pop	r29
    2486:	08 95       	ret

00002488 <LCD_sendCommand>:
/***************************************************************************
 *                            Function definition
 * ***************************************************************************/


void LCD_sendCommand(uint8 command){
    2488:	0f 93       	push	r16
    248a:	1f 93       	push	r17
    248c:	df 93       	push	r29
    248e:	cf 93       	push	r28
    2490:	cd b7       	in	r28, 0x3d	; 61
    2492:	de b7       	in	r29, 0x3e	; 62
    2494:	c3 56       	subi	r28, 0x63	; 99
    2496:	d0 40       	sbci	r29, 0x00	; 0
    2498:	0f b6       	in	r0, 0x3f	; 63
    249a:	f8 94       	cli
    249c:	de bf       	out	0x3e, r29	; 62
    249e:	0f be       	out	0x3f, r0	; 63
    24a0:	cd bf       	out	0x3d, r28	; 61
    24a2:	fe 01       	movw	r30, r28
    24a4:	ed 59       	subi	r30, 0x9D	; 157
    24a6:	ff 4f       	sbci	r31, 0xFF	; 255
    24a8:	80 83       	st	Z, r24

	GPIO_writePin(LCD_RS_PORT,LCD_RS_PIN,LOW);
    24aa:	83 e0       	ldi	r24, 0x03	; 3
    24ac:	64 e0       	ldi	r22, 0x04	; 4
    24ae:	40 e0       	ldi	r20, 0x00	; 0
    24b0:	0e 94 13 0d 	call	0x1a26	; 0x1a26 <GPIO_writePin>
    24b4:	fe 01       	movw	r30, r28
    24b6:	e1 5a       	subi	r30, 0xA1	; 161
    24b8:	ff 4f       	sbci	r31, 0xFF	; 255
    24ba:	80 e0       	ldi	r24, 0x00	; 0
    24bc:	90 e0       	ldi	r25, 0x00	; 0
    24be:	a0 e8       	ldi	r26, 0x80	; 128
    24c0:	bf e3       	ldi	r27, 0x3F	; 63
    24c2:	80 83       	st	Z, r24
    24c4:	91 83       	std	Z+1, r25	; 0x01
    24c6:	a2 83       	std	Z+2, r26	; 0x02
    24c8:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    24ca:	8e 01       	movw	r16, r28
    24cc:	05 5a       	subi	r16, 0xA5	; 165
    24ce:	1f 4f       	sbci	r17, 0xFF	; 255
    24d0:	fe 01       	movw	r30, r28
    24d2:	e1 5a       	subi	r30, 0xA1	; 161
    24d4:	ff 4f       	sbci	r31, 0xFF	; 255
    24d6:	60 81       	ld	r22, Z
    24d8:	71 81       	ldd	r23, Z+1	; 0x01
    24da:	82 81       	ldd	r24, Z+2	; 0x02
    24dc:	93 81       	ldd	r25, Z+3	; 0x03
    24de:	20 e0       	ldi	r18, 0x00	; 0
    24e0:	30 e0       	ldi	r19, 0x00	; 0
    24e2:	4a e7       	ldi	r20, 0x7A	; 122
    24e4:	53 e4       	ldi	r21, 0x43	; 67
    24e6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    24ea:	dc 01       	movw	r26, r24
    24ec:	cb 01       	movw	r24, r22
    24ee:	f8 01       	movw	r30, r16
    24f0:	80 83       	st	Z, r24
    24f2:	91 83       	std	Z+1, r25	; 0x01
    24f4:	a2 83       	std	Z+2, r26	; 0x02
    24f6:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    24f8:	fe 01       	movw	r30, r28
    24fa:	e5 5a       	subi	r30, 0xA5	; 165
    24fc:	ff 4f       	sbci	r31, 0xFF	; 255
    24fe:	60 81       	ld	r22, Z
    2500:	71 81       	ldd	r23, Z+1	; 0x01
    2502:	82 81       	ldd	r24, Z+2	; 0x02
    2504:	93 81       	ldd	r25, Z+3	; 0x03
    2506:	20 e0       	ldi	r18, 0x00	; 0
    2508:	30 e0       	ldi	r19, 0x00	; 0
    250a:	40 e8       	ldi	r20, 0x80	; 128
    250c:	5f e3       	ldi	r21, 0x3F	; 63
    250e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2512:	88 23       	and	r24, r24
    2514:	44 f4       	brge	.+16     	; 0x2526 <LCD_sendCommand+0x9e>
		__ticks = 1;
    2516:	fe 01       	movw	r30, r28
    2518:	e7 5a       	subi	r30, 0xA7	; 167
    251a:	ff 4f       	sbci	r31, 0xFF	; 255
    251c:	81 e0       	ldi	r24, 0x01	; 1
    251e:	90 e0       	ldi	r25, 0x00	; 0
    2520:	91 83       	std	Z+1, r25	; 0x01
    2522:	80 83       	st	Z, r24
    2524:	64 c0       	rjmp	.+200    	; 0x25ee <LCD_sendCommand+0x166>
	else if (__tmp > 65535)
    2526:	fe 01       	movw	r30, r28
    2528:	e5 5a       	subi	r30, 0xA5	; 165
    252a:	ff 4f       	sbci	r31, 0xFF	; 255
    252c:	60 81       	ld	r22, Z
    252e:	71 81       	ldd	r23, Z+1	; 0x01
    2530:	82 81       	ldd	r24, Z+2	; 0x02
    2532:	93 81       	ldd	r25, Z+3	; 0x03
    2534:	20 e0       	ldi	r18, 0x00	; 0
    2536:	3f ef       	ldi	r19, 0xFF	; 255
    2538:	4f e7       	ldi	r20, 0x7F	; 127
    253a:	57 e4       	ldi	r21, 0x47	; 71
    253c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2540:	18 16       	cp	r1, r24
    2542:	0c f0       	brlt	.+2      	; 0x2546 <LCD_sendCommand+0xbe>
    2544:	43 c0       	rjmp	.+134    	; 0x25cc <LCD_sendCommand+0x144>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2546:	fe 01       	movw	r30, r28
    2548:	e1 5a       	subi	r30, 0xA1	; 161
    254a:	ff 4f       	sbci	r31, 0xFF	; 255
    254c:	60 81       	ld	r22, Z
    254e:	71 81       	ldd	r23, Z+1	; 0x01
    2550:	82 81       	ldd	r24, Z+2	; 0x02
    2552:	93 81       	ldd	r25, Z+3	; 0x03
    2554:	20 e0       	ldi	r18, 0x00	; 0
    2556:	30 e0       	ldi	r19, 0x00	; 0
    2558:	40 e2       	ldi	r20, 0x20	; 32
    255a:	51 e4       	ldi	r21, 0x41	; 65
    255c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2560:	dc 01       	movw	r26, r24
    2562:	cb 01       	movw	r24, r22
    2564:	8e 01       	movw	r16, r28
    2566:	07 5a       	subi	r16, 0xA7	; 167
    2568:	1f 4f       	sbci	r17, 0xFF	; 255
    256a:	bc 01       	movw	r22, r24
    256c:	cd 01       	movw	r24, r26
    256e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2572:	dc 01       	movw	r26, r24
    2574:	cb 01       	movw	r24, r22
    2576:	f8 01       	movw	r30, r16
    2578:	91 83       	std	Z+1, r25	; 0x01
    257a:	80 83       	st	Z, r24
    257c:	1f c0       	rjmp	.+62     	; 0x25bc <LCD_sendCommand+0x134>
    257e:	fe 01       	movw	r30, r28
    2580:	e9 5a       	subi	r30, 0xA9	; 169
    2582:	ff 4f       	sbci	r31, 0xFF	; 255
    2584:	89 e1       	ldi	r24, 0x19	; 25
    2586:	90 e0       	ldi	r25, 0x00	; 0
    2588:	91 83       	std	Z+1, r25	; 0x01
    258a:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    258c:	fe 01       	movw	r30, r28
    258e:	e9 5a       	subi	r30, 0xA9	; 169
    2590:	ff 4f       	sbci	r31, 0xFF	; 255
    2592:	80 81       	ld	r24, Z
    2594:	91 81       	ldd	r25, Z+1	; 0x01
    2596:	01 97       	sbiw	r24, 0x01	; 1
    2598:	f1 f7       	brne	.-4      	; 0x2596 <LCD_sendCommand+0x10e>
    259a:	fe 01       	movw	r30, r28
    259c:	e9 5a       	subi	r30, 0xA9	; 169
    259e:	ff 4f       	sbci	r31, 0xFF	; 255
    25a0:	91 83       	std	Z+1, r25	; 0x01
    25a2:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    25a4:	de 01       	movw	r26, r28
    25a6:	a7 5a       	subi	r26, 0xA7	; 167
    25a8:	bf 4f       	sbci	r27, 0xFF	; 255
    25aa:	fe 01       	movw	r30, r28
    25ac:	e7 5a       	subi	r30, 0xA7	; 167
    25ae:	ff 4f       	sbci	r31, 0xFF	; 255
    25b0:	80 81       	ld	r24, Z
    25b2:	91 81       	ldd	r25, Z+1	; 0x01
    25b4:	01 97       	sbiw	r24, 0x01	; 1
    25b6:	11 96       	adiw	r26, 0x01	; 1
    25b8:	9c 93       	st	X, r25
    25ba:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    25bc:	fe 01       	movw	r30, r28
    25be:	e7 5a       	subi	r30, 0xA7	; 167
    25c0:	ff 4f       	sbci	r31, 0xFF	; 255
    25c2:	80 81       	ld	r24, Z
    25c4:	91 81       	ldd	r25, Z+1	; 0x01
    25c6:	00 97       	sbiw	r24, 0x00	; 0
    25c8:	d1 f6       	brne	.-76     	; 0x257e <LCD_sendCommand+0xf6>
    25ca:	27 c0       	rjmp	.+78     	; 0x261a <LCD_sendCommand+0x192>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    25cc:	8e 01       	movw	r16, r28
    25ce:	07 5a       	subi	r16, 0xA7	; 167
    25d0:	1f 4f       	sbci	r17, 0xFF	; 255
    25d2:	fe 01       	movw	r30, r28
    25d4:	e5 5a       	subi	r30, 0xA5	; 165
    25d6:	ff 4f       	sbci	r31, 0xFF	; 255
    25d8:	60 81       	ld	r22, Z
    25da:	71 81       	ldd	r23, Z+1	; 0x01
    25dc:	82 81       	ldd	r24, Z+2	; 0x02
    25de:	93 81       	ldd	r25, Z+3	; 0x03
    25e0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    25e4:	dc 01       	movw	r26, r24
    25e6:	cb 01       	movw	r24, r22
    25e8:	f8 01       	movw	r30, r16
    25ea:	91 83       	std	Z+1, r25	; 0x01
    25ec:	80 83       	st	Z, r24
    25ee:	de 01       	movw	r26, r28
    25f0:	ab 5a       	subi	r26, 0xAB	; 171
    25f2:	bf 4f       	sbci	r27, 0xFF	; 255
    25f4:	fe 01       	movw	r30, r28
    25f6:	e7 5a       	subi	r30, 0xA7	; 167
    25f8:	ff 4f       	sbci	r31, 0xFF	; 255
    25fa:	80 81       	ld	r24, Z
    25fc:	91 81       	ldd	r25, Z+1	; 0x01
    25fe:	8d 93       	st	X+, r24
    2600:	9c 93       	st	X, r25
    2602:	fe 01       	movw	r30, r28
    2604:	eb 5a       	subi	r30, 0xAB	; 171
    2606:	ff 4f       	sbci	r31, 0xFF	; 255
    2608:	80 81       	ld	r24, Z
    260a:	91 81       	ldd	r25, Z+1	; 0x01
    260c:	01 97       	sbiw	r24, 0x01	; 1
    260e:	f1 f7       	brne	.-4      	; 0x260c <LCD_sendCommand+0x184>
    2610:	fe 01       	movw	r30, r28
    2612:	eb 5a       	subi	r30, 0xAB	; 171
    2614:	ff 4f       	sbci	r31, 0xFF	; 255
    2616:	91 83       	std	Z+1, r25	; 0x01
    2618:	80 83       	st	Z, r24
	_delay_ms(1); /* 50ns      in all delays us will only work in simulation but won't in AVR due to bad hardware  */
	GPIO_writePin(LCD_ENABLE_PORT,LCD_ENABLE_PIN,HIGH);
    261a:	83 e0       	ldi	r24, 0x03	; 3
    261c:	65 e0       	ldi	r22, 0x05	; 5
    261e:	41 e0       	ldi	r20, 0x01	; 1
    2620:	0e 94 13 0d 	call	0x1a26	; 0x1a26 <GPIO_writePin>
    2624:	fe 01       	movw	r30, r28
    2626:	ef 5a       	subi	r30, 0xAF	; 175
    2628:	ff 4f       	sbci	r31, 0xFF	; 255
    262a:	80 e0       	ldi	r24, 0x00	; 0
    262c:	90 e0       	ldi	r25, 0x00	; 0
    262e:	a0 e8       	ldi	r26, 0x80	; 128
    2630:	bf e3       	ldi	r27, 0x3F	; 63
    2632:	80 83       	st	Z, r24
    2634:	91 83       	std	Z+1, r25	; 0x01
    2636:	a2 83       	std	Z+2, r26	; 0x02
    2638:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    263a:	8e 01       	movw	r16, r28
    263c:	03 5b       	subi	r16, 0xB3	; 179
    263e:	1f 4f       	sbci	r17, 0xFF	; 255
    2640:	fe 01       	movw	r30, r28
    2642:	ef 5a       	subi	r30, 0xAF	; 175
    2644:	ff 4f       	sbci	r31, 0xFF	; 255
    2646:	60 81       	ld	r22, Z
    2648:	71 81       	ldd	r23, Z+1	; 0x01
    264a:	82 81       	ldd	r24, Z+2	; 0x02
    264c:	93 81       	ldd	r25, Z+3	; 0x03
    264e:	20 e0       	ldi	r18, 0x00	; 0
    2650:	30 e0       	ldi	r19, 0x00	; 0
    2652:	4a e7       	ldi	r20, 0x7A	; 122
    2654:	53 e4       	ldi	r21, 0x43	; 67
    2656:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    265a:	dc 01       	movw	r26, r24
    265c:	cb 01       	movw	r24, r22
    265e:	f8 01       	movw	r30, r16
    2660:	80 83       	st	Z, r24
    2662:	91 83       	std	Z+1, r25	; 0x01
    2664:	a2 83       	std	Z+2, r26	; 0x02
    2666:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2668:	fe 01       	movw	r30, r28
    266a:	e3 5b       	subi	r30, 0xB3	; 179
    266c:	ff 4f       	sbci	r31, 0xFF	; 255
    266e:	60 81       	ld	r22, Z
    2670:	71 81       	ldd	r23, Z+1	; 0x01
    2672:	82 81       	ldd	r24, Z+2	; 0x02
    2674:	93 81       	ldd	r25, Z+3	; 0x03
    2676:	20 e0       	ldi	r18, 0x00	; 0
    2678:	30 e0       	ldi	r19, 0x00	; 0
    267a:	40 e8       	ldi	r20, 0x80	; 128
    267c:	5f e3       	ldi	r21, 0x3F	; 63
    267e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2682:	88 23       	and	r24, r24
    2684:	44 f4       	brge	.+16     	; 0x2696 <LCD_sendCommand+0x20e>
		__ticks = 1;
    2686:	fe 01       	movw	r30, r28
    2688:	e5 5b       	subi	r30, 0xB5	; 181
    268a:	ff 4f       	sbci	r31, 0xFF	; 255
    268c:	81 e0       	ldi	r24, 0x01	; 1
    268e:	90 e0       	ldi	r25, 0x00	; 0
    2690:	91 83       	std	Z+1, r25	; 0x01
    2692:	80 83       	st	Z, r24
    2694:	64 c0       	rjmp	.+200    	; 0x275e <LCD_sendCommand+0x2d6>
	else if (__tmp > 65535)
    2696:	fe 01       	movw	r30, r28
    2698:	e3 5b       	subi	r30, 0xB3	; 179
    269a:	ff 4f       	sbci	r31, 0xFF	; 255
    269c:	60 81       	ld	r22, Z
    269e:	71 81       	ldd	r23, Z+1	; 0x01
    26a0:	82 81       	ldd	r24, Z+2	; 0x02
    26a2:	93 81       	ldd	r25, Z+3	; 0x03
    26a4:	20 e0       	ldi	r18, 0x00	; 0
    26a6:	3f ef       	ldi	r19, 0xFF	; 255
    26a8:	4f e7       	ldi	r20, 0x7F	; 127
    26aa:	57 e4       	ldi	r21, 0x47	; 71
    26ac:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    26b0:	18 16       	cp	r1, r24
    26b2:	0c f0       	brlt	.+2      	; 0x26b6 <LCD_sendCommand+0x22e>
    26b4:	43 c0       	rjmp	.+134    	; 0x273c <LCD_sendCommand+0x2b4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    26b6:	fe 01       	movw	r30, r28
    26b8:	ef 5a       	subi	r30, 0xAF	; 175
    26ba:	ff 4f       	sbci	r31, 0xFF	; 255
    26bc:	60 81       	ld	r22, Z
    26be:	71 81       	ldd	r23, Z+1	; 0x01
    26c0:	82 81       	ldd	r24, Z+2	; 0x02
    26c2:	93 81       	ldd	r25, Z+3	; 0x03
    26c4:	20 e0       	ldi	r18, 0x00	; 0
    26c6:	30 e0       	ldi	r19, 0x00	; 0
    26c8:	40 e2       	ldi	r20, 0x20	; 32
    26ca:	51 e4       	ldi	r21, 0x41	; 65
    26cc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    26d0:	dc 01       	movw	r26, r24
    26d2:	cb 01       	movw	r24, r22
    26d4:	8e 01       	movw	r16, r28
    26d6:	05 5b       	subi	r16, 0xB5	; 181
    26d8:	1f 4f       	sbci	r17, 0xFF	; 255
    26da:	bc 01       	movw	r22, r24
    26dc:	cd 01       	movw	r24, r26
    26de:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    26e2:	dc 01       	movw	r26, r24
    26e4:	cb 01       	movw	r24, r22
    26e6:	f8 01       	movw	r30, r16
    26e8:	91 83       	std	Z+1, r25	; 0x01
    26ea:	80 83       	st	Z, r24
    26ec:	1f c0       	rjmp	.+62     	; 0x272c <LCD_sendCommand+0x2a4>
    26ee:	fe 01       	movw	r30, r28
    26f0:	e7 5b       	subi	r30, 0xB7	; 183
    26f2:	ff 4f       	sbci	r31, 0xFF	; 255
    26f4:	89 e1       	ldi	r24, 0x19	; 25
    26f6:	90 e0       	ldi	r25, 0x00	; 0
    26f8:	91 83       	std	Z+1, r25	; 0x01
    26fa:	80 83       	st	Z, r24
    26fc:	fe 01       	movw	r30, r28
    26fe:	e7 5b       	subi	r30, 0xB7	; 183
    2700:	ff 4f       	sbci	r31, 0xFF	; 255
    2702:	80 81       	ld	r24, Z
    2704:	91 81       	ldd	r25, Z+1	; 0x01
    2706:	01 97       	sbiw	r24, 0x01	; 1
    2708:	f1 f7       	brne	.-4      	; 0x2706 <LCD_sendCommand+0x27e>
    270a:	fe 01       	movw	r30, r28
    270c:	e7 5b       	subi	r30, 0xB7	; 183
    270e:	ff 4f       	sbci	r31, 0xFF	; 255
    2710:	91 83       	std	Z+1, r25	; 0x01
    2712:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2714:	de 01       	movw	r26, r28
    2716:	a5 5b       	subi	r26, 0xB5	; 181
    2718:	bf 4f       	sbci	r27, 0xFF	; 255
    271a:	fe 01       	movw	r30, r28
    271c:	e5 5b       	subi	r30, 0xB5	; 181
    271e:	ff 4f       	sbci	r31, 0xFF	; 255
    2720:	80 81       	ld	r24, Z
    2722:	91 81       	ldd	r25, Z+1	; 0x01
    2724:	01 97       	sbiw	r24, 0x01	; 1
    2726:	11 96       	adiw	r26, 0x01	; 1
    2728:	9c 93       	st	X, r25
    272a:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    272c:	fe 01       	movw	r30, r28
    272e:	e5 5b       	subi	r30, 0xB5	; 181
    2730:	ff 4f       	sbci	r31, 0xFF	; 255
    2732:	80 81       	ld	r24, Z
    2734:	91 81       	ldd	r25, Z+1	; 0x01
    2736:	00 97       	sbiw	r24, 0x00	; 0
    2738:	d1 f6       	brne	.-76     	; 0x26ee <LCD_sendCommand+0x266>
    273a:	27 c0       	rjmp	.+78     	; 0x278a <LCD_sendCommand+0x302>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    273c:	8e 01       	movw	r16, r28
    273e:	05 5b       	subi	r16, 0xB5	; 181
    2740:	1f 4f       	sbci	r17, 0xFF	; 255
    2742:	fe 01       	movw	r30, r28
    2744:	e3 5b       	subi	r30, 0xB3	; 179
    2746:	ff 4f       	sbci	r31, 0xFF	; 255
    2748:	60 81       	ld	r22, Z
    274a:	71 81       	ldd	r23, Z+1	; 0x01
    274c:	82 81       	ldd	r24, Z+2	; 0x02
    274e:	93 81       	ldd	r25, Z+3	; 0x03
    2750:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2754:	dc 01       	movw	r26, r24
    2756:	cb 01       	movw	r24, r22
    2758:	f8 01       	movw	r30, r16
    275a:	91 83       	std	Z+1, r25	; 0x01
    275c:	80 83       	st	Z, r24
    275e:	de 01       	movw	r26, r28
    2760:	a9 5b       	subi	r26, 0xB9	; 185
    2762:	bf 4f       	sbci	r27, 0xFF	; 255
    2764:	fe 01       	movw	r30, r28
    2766:	e5 5b       	subi	r30, 0xB5	; 181
    2768:	ff 4f       	sbci	r31, 0xFF	; 255
    276a:	80 81       	ld	r24, Z
    276c:	91 81       	ldd	r25, Z+1	; 0x01
    276e:	8d 93       	st	X+, r24
    2770:	9c 93       	st	X, r25
    2772:	fe 01       	movw	r30, r28
    2774:	e9 5b       	subi	r30, 0xB9	; 185
    2776:	ff 4f       	sbci	r31, 0xFF	; 255
    2778:	80 81       	ld	r24, Z
    277a:	91 81       	ldd	r25, Z+1	; 0x01
    277c:	01 97       	sbiw	r24, 0x01	; 1
    277e:	f1 f7       	brne	.-4      	; 0x277c <LCD_sendCommand+0x2f4>
    2780:	fe 01       	movw	r30, r28
    2782:	e9 5b       	subi	r30, 0xB9	; 185
    2784:	ff 4f       	sbci	r31, 0xFF	; 255
    2786:	91 83       	std	Z+1, r25	; 0x01
    2788:	80 83       	st	Z, r24
	_delay_ms(1); /* 290-200 = 190ns */

#if(LCD_DATA_BIT_MODE == 4)

	GPIO_writePin(LCD_DATA_PORT,LCD_DB4,GET_BIT(command,4));
    278a:	fe 01       	movw	r30, r28
    278c:	ed 59       	subi	r30, 0x9D	; 157
    278e:	ff 4f       	sbci	r31, 0xFF	; 255
    2790:	80 81       	ld	r24, Z
    2792:	88 2f       	mov	r24, r24
    2794:	90 e0       	ldi	r25, 0x00	; 0
    2796:	80 71       	andi	r24, 0x10	; 16
    2798:	90 70       	andi	r25, 0x00	; 0
    279a:	95 95       	asr	r25
    279c:	87 95       	ror	r24
    279e:	95 95       	asr	r25
    27a0:	87 95       	ror	r24
    27a2:	95 95       	asr	r25
    27a4:	87 95       	ror	r24
    27a6:	95 95       	asr	r25
    27a8:	87 95       	ror	r24
    27aa:	98 2f       	mov	r25, r24
    27ac:	82 e0       	ldi	r24, 0x02	; 2
    27ae:	63 e0       	ldi	r22, 0x03	; 3
    27b0:	49 2f       	mov	r20, r25
    27b2:	0e 94 13 0d 	call	0x1a26	; 0x1a26 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT,LCD_DB5,GET_BIT(command,5));
    27b6:	fe 01       	movw	r30, r28
    27b8:	ed 59       	subi	r30, 0x9D	; 157
    27ba:	ff 4f       	sbci	r31, 0xFF	; 255
    27bc:	80 81       	ld	r24, Z
    27be:	88 2f       	mov	r24, r24
    27c0:	90 e0       	ldi	r25, 0x00	; 0
    27c2:	80 72       	andi	r24, 0x20	; 32
    27c4:	90 70       	andi	r25, 0x00	; 0
    27c6:	95 95       	asr	r25
    27c8:	87 95       	ror	r24
    27ca:	95 95       	asr	r25
    27cc:	87 95       	ror	r24
    27ce:	95 95       	asr	r25
    27d0:	87 95       	ror	r24
    27d2:	95 95       	asr	r25
    27d4:	87 95       	ror	r24
    27d6:	95 95       	asr	r25
    27d8:	87 95       	ror	r24
    27da:	98 2f       	mov	r25, r24
    27dc:	82 e0       	ldi	r24, 0x02	; 2
    27de:	64 e0       	ldi	r22, 0x04	; 4
    27e0:	49 2f       	mov	r20, r25
    27e2:	0e 94 13 0d 	call	0x1a26	; 0x1a26 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT,LCD_DB6,GET_BIT(command,6));
    27e6:	fe 01       	movw	r30, r28
    27e8:	ed 59       	subi	r30, 0x9D	; 157
    27ea:	ff 4f       	sbci	r31, 0xFF	; 255
    27ec:	80 81       	ld	r24, Z
    27ee:	88 2f       	mov	r24, r24
    27f0:	90 e0       	ldi	r25, 0x00	; 0
    27f2:	80 74       	andi	r24, 0x40	; 64
    27f4:	90 70       	andi	r25, 0x00	; 0
    27f6:	08 2e       	mov	r0, r24
    27f8:	89 2f       	mov	r24, r25
    27fa:	00 0c       	add	r0, r0
    27fc:	88 1f       	adc	r24, r24
    27fe:	99 0b       	sbc	r25, r25
    2800:	00 0c       	add	r0, r0
    2802:	88 1f       	adc	r24, r24
    2804:	99 1f       	adc	r25, r25
    2806:	98 2f       	mov	r25, r24
    2808:	82 e0       	ldi	r24, 0x02	; 2
    280a:	65 e0       	ldi	r22, 0x05	; 5
    280c:	49 2f       	mov	r20, r25
    280e:	0e 94 13 0d 	call	0x1a26	; 0x1a26 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT,LCD_DB7,GET_BIT(command,7));
    2812:	fe 01       	movw	r30, r28
    2814:	ed 59       	subi	r30, 0x9D	; 157
    2816:	ff 4f       	sbci	r31, 0xFF	; 255
    2818:	80 81       	ld	r24, Z
    281a:	98 2f       	mov	r25, r24
    281c:	99 1f       	adc	r25, r25
    281e:	99 27       	eor	r25, r25
    2820:	99 1f       	adc	r25, r25
    2822:	82 e0       	ldi	r24, 0x02	; 2
    2824:	66 e0       	ldi	r22, 0x06	; 6
    2826:	49 2f       	mov	r20, r25
    2828:	0e 94 13 0d 	call	0x1a26	; 0x1a26 <GPIO_writePin>
    282c:	fe 01       	movw	r30, r28
    282e:	ed 5b       	subi	r30, 0xBD	; 189
    2830:	ff 4f       	sbci	r31, 0xFF	; 255
    2832:	80 e0       	ldi	r24, 0x00	; 0
    2834:	90 e0       	ldi	r25, 0x00	; 0
    2836:	a0 e8       	ldi	r26, 0x80	; 128
    2838:	bf e3       	ldi	r27, 0x3F	; 63
    283a:	80 83       	st	Z, r24
    283c:	91 83       	std	Z+1, r25	; 0x01
    283e:	a2 83       	std	Z+2, r26	; 0x02
    2840:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2842:	8e 01       	movw	r16, r28
    2844:	01 5c       	subi	r16, 0xC1	; 193
    2846:	1f 4f       	sbci	r17, 0xFF	; 255
    2848:	fe 01       	movw	r30, r28
    284a:	ed 5b       	subi	r30, 0xBD	; 189
    284c:	ff 4f       	sbci	r31, 0xFF	; 255
    284e:	60 81       	ld	r22, Z
    2850:	71 81       	ldd	r23, Z+1	; 0x01
    2852:	82 81       	ldd	r24, Z+2	; 0x02
    2854:	93 81       	ldd	r25, Z+3	; 0x03
    2856:	20 e0       	ldi	r18, 0x00	; 0
    2858:	30 e0       	ldi	r19, 0x00	; 0
    285a:	4a e7       	ldi	r20, 0x7A	; 122
    285c:	53 e4       	ldi	r21, 0x43	; 67
    285e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2862:	dc 01       	movw	r26, r24
    2864:	cb 01       	movw	r24, r22
    2866:	f8 01       	movw	r30, r16
    2868:	80 83       	st	Z, r24
    286a:	91 83       	std	Z+1, r25	; 0x01
    286c:	a2 83       	std	Z+2, r26	; 0x02
    286e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2870:	fe 01       	movw	r30, r28
    2872:	ff 96       	adiw	r30, 0x3f	; 63
    2874:	60 81       	ld	r22, Z
    2876:	71 81       	ldd	r23, Z+1	; 0x01
    2878:	82 81       	ldd	r24, Z+2	; 0x02
    287a:	93 81       	ldd	r25, Z+3	; 0x03
    287c:	20 e0       	ldi	r18, 0x00	; 0
    287e:	30 e0       	ldi	r19, 0x00	; 0
    2880:	40 e8       	ldi	r20, 0x80	; 128
    2882:	5f e3       	ldi	r21, 0x3F	; 63
    2884:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2888:	88 23       	and	r24, r24
    288a:	2c f4       	brge	.+10     	; 0x2896 <LCD_sendCommand+0x40e>
		__ticks = 1;
    288c:	81 e0       	ldi	r24, 0x01	; 1
    288e:	90 e0       	ldi	r25, 0x00	; 0
    2890:	9e af       	std	Y+62, r25	; 0x3e
    2892:	8d af       	std	Y+61, r24	; 0x3d
    2894:	46 c0       	rjmp	.+140    	; 0x2922 <LCD_sendCommand+0x49a>
	else if (__tmp > 65535)
    2896:	fe 01       	movw	r30, r28
    2898:	ff 96       	adiw	r30, 0x3f	; 63
    289a:	60 81       	ld	r22, Z
    289c:	71 81       	ldd	r23, Z+1	; 0x01
    289e:	82 81       	ldd	r24, Z+2	; 0x02
    28a0:	93 81       	ldd	r25, Z+3	; 0x03
    28a2:	20 e0       	ldi	r18, 0x00	; 0
    28a4:	3f ef       	ldi	r19, 0xFF	; 255
    28a6:	4f e7       	ldi	r20, 0x7F	; 127
    28a8:	57 e4       	ldi	r21, 0x47	; 71
    28aa:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    28ae:	18 16       	cp	r1, r24
    28b0:	64 f5       	brge	.+88     	; 0x290a <LCD_sendCommand+0x482>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    28b2:	fe 01       	movw	r30, r28
    28b4:	ed 5b       	subi	r30, 0xBD	; 189
    28b6:	ff 4f       	sbci	r31, 0xFF	; 255
    28b8:	60 81       	ld	r22, Z
    28ba:	71 81       	ldd	r23, Z+1	; 0x01
    28bc:	82 81       	ldd	r24, Z+2	; 0x02
    28be:	93 81       	ldd	r25, Z+3	; 0x03
    28c0:	20 e0       	ldi	r18, 0x00	; 0
    28c2:	30 e0       	ldi	r19, 0x00	; 0
    28c4:	40 e2       	ldi	r20, 0x20	; 32
    28c6:	51 e4       	ldi	r21, 0x41	; 65
    28c8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    28cc:	dc 01       	movw	r26, r24
    28ce:	cb 01       	movw	r24, r22
    28d0:	bc 01       	movw	r22, r24
    28d2:	cd 01       	movw	r24, r26
    28d4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    28d8:	dc 01       	movw	r26, r24
    28da:	cb 01       	movw	r24, r22
    28dc:	9e af       	std	Y+62, r25	; 0x3e
    28de:	8d af       	std	Y+61, r24	; 0x3d
    28e0:	0f c0       	rjmp	.+30     	; 0x2900 <LCD_sendCommand+0x478>
    28e2:	89 e1       	ldi	r24, 0x19	; 25
    28e4:	90 e0       	ldi	r25, 0x00	; 0
    28e6:	9c af       	std	Y+60, r25	; 0x3c
    28e8:	8b af       	std	Y+59, r24	; 0x3b
    28ea:	8b ad       	ldd	r24, Y+59	; 0x3b
    28ec:	9c ad       	ldd	r25, Y+60	; 0x3c
    28ee:	01 97       	sbiw	r24, 0x01	; 1
    28f0:	f1 f7       	brne	.-4      	; 0x28ee <LCD_sendCommand+0x466>
    28f2:	9c af       	std	Y+60, r25	; 0x3c
    28f4:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    28f6:	8d ad       	ldd	r24, Y+61	; 0x3d
    28f8:	9e ad       	ldd	r25, Y+62	; 0x3e
    28fa:	01 97       	sbiw	r24, 0x01	; 1
    28fc:	9e af       	std	Y+62, r25	; 0x3e
    28fe:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2900:	8d ad       	ldd	r24, Y+61	; 0x3d
    2902:	9e ad       	ldd	r25, Y+62	; 0x3e
    2904:	00 97       	sbiw	r24, 0x00	; 0
    2906:	69 f7       	brne	.-38     	; 0x28e2 <LCD_sendCommand+0x45a>
    2908:	16 c0       	rjmp	.+44     	; 0x2936 <LCD_sendCommand+0x4ae>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    290a:	fe 01       	movw	r30, r28
    290c:	ff 96       	adiw	r30, 0x3f	; 63
    290e:	60 81       	ld	r22, Z
    2910:	71 81       	ldd	r23, Z+1	; 0x01
    2912:	82 81       	ldd	r24, Z+2	; 0x02
    2914:	93 81       	ldd	r25, Z+3	; 0x03
    2916:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    291a:	dc 01       	movw	r26, r24
    291c:	cb 01       	movw	r24, r22
    291e:	9e af       	std	Y+62, r25	; 0x3e
    2920:	8d af       	std	Y+61, r24	; 0x3d
    2922:	8d ad       	ldd	r24, Y+61	; 0x3d
    2924:	9e ad       	ldd	r25, Y+62	; 0x3e
    2926:	9a af       	std	Y+58, r25	; 0x3a
    2928:	89 af       	std	Y+57, r24	; 0x39
    292a:	89 ad       	ldd	r24, Y+57	; 0x39
    292c:	9a ad       	ldd	r25, Y+58	; 0x3a
    292e:	01 97       	sbiw	r24, 0x01	; 1
    2930:	f1 f7       	brne	.-4      	; 0x292e <LCD_sendCommand+0x4a6>
    2932:	9a af       	std	Y+58, r25	; 0x3a
    2934:	89 af       	std	Y+57, r24	; 0x39

	_delay_ms(1); /* 100ns */
	GPIO_writePin(LCD_ENABLE_PORT,LCD_ENABLE_PIN,LOW);
    2936:	83 e0       	ldi	r24, 0x03	; 3
    2938:	65 e0       	ldi	r22, 0x05	; 5
    293a:	40 e0       	ldi	r20, 0x00	; 0
    293c:	0e 94 13 0d 	call	0x1a26	; 0x1a26 <GPIO_writePin>
    2940:	80 e0       	ldi	r24, 0x00	; 0
    2942:	90 e0       	ldi	r25, 0x00	; 0
    2944:	a0 e8       	ldi	r26, 0x80	; 128
    2946:	bf e3       	ldi	r27, 0x3F	; 63
    2948:	8d ab       	std	Y+53, r24	; 0x35
    294a:	9e ab       	std	Y+54, r25	; 0x36
    294c:	af ab       	std	Y+55, r26	; 0x37
    294e:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2950:	6d a9       	ldd	r22, Y+53	; 0x35
    2952:	7e a9       	ldd	r23, Y+54	; 0x36
    2954:	8f a9       	ldd	r24, Y+55	; 0x37
    2956:	98 ad       	ldd	r25, Y+56	; 0x38
    2958:	20 e0       	ldi	r18, 0x00	; 0
    295a:	30 e0       	ldi	r19, 0x00	; 0
    295c:	4a e7       	ldi	r20, 0x7A	; 122
    295e:	53 e4       	ldi	r21, 0x43	; 67
    2960:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2964:	dc 01       	movw	r26, r24
    2966:	cb 01       	movw	r24, r22
    2968:	89 ab       	std	Y+49, r24	; 0x31
    296a:	9a ab       	std	Y+50, r25	; 0x32
    296c:	ab ab       	std	Y+51, r26	; 0x33
    296e:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2970:	69 a9       	ldd	r22, Y+49	; 0x31
    2972:	7a a9       	ldd	r23, Y+50	; 0x32
    2974:	8b a9       	ldd	r24, Y+51	; 0x33
    2976:	9c a9       	ldd	r25, Y+52	; 0x34
    2978:	20 e0       	ldi	r18, 0x00	; 0
    297a:	30 e0       	ldi	r19, 0x00	; 0
    297c:	40 e8       	ldi	r20, 0x80	; 128
    297e:	5f e3       	ldi	r21, 0x3F	; 63
    2980:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2984:	88 23       	and	r24, r24
    2986:	2c f4       	brge	.+10     	; 0x2992 <LCD_sendCommand+0x50a>
		__ticks = 1;
    2988:	81 e0       	ldi	r24, 0x01	; 1
    298a:	90 e0       	ldi	r25, 0x00	; 0
    298c:	98 ab       	std	Y+48, r25	; 0x30
    298e:	8f a7       	std	Y+47, r24	; 0x2f
    2990:	3f c0       	rjmp	.+126    	; 0x2a10 <LCD_sendCommand+0x588>
	else if (__tmp > 65535)
    2992:	69 a9       	ldd	r22, Y+49	; 0x31
    2994:	7a a9       	ldd	r23, Y+50	; 0x32
    2996:	8b a9       	ldd	r24, Y+51	; 0x33
    2998:	9c a9       	ldd	r25, Y+52	; 0x34
    299a:	20 e0       	ldi	r18, 0x00	; 0
    299c:	3f ef       	ldi	r19, 0xFF	; 255
    299e:	4f e7       	ldi	r20, 0x7F	; 127
    29a0:	57 e4       	ldi	r21, 0x47	; 71
    29a2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    29a6:	18 16       	cp	r1, r24
    29a8:	4c f5       	brge	.+82     	; 0x29fc <LCD_sendCommand+0x574>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    29aa:	6d a9       	ldd	r22, Y+53	; 0x35
    29ac:	7e a9       	ldd	r23, Y+54	; 0x36
    29ae:	8f a9       	ldd	r24, Y+55	; 0x37
    29b0:	98 ad       	ldd	r25, Y+56	; 0x38
    29b2:	20 e0       	ldi	r18, 0x00	; 0
    29b4:	30 e0       	ldi	r19, 0x00	; 0
    29b6:	40 e2       	ldi	r20, 0x20	; 32
    29b8:	51 e4       	ldi	r21, 0x41	; 65
    29ba:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    29be:	dc 01       	movw	r26, r24
    29c0:	cb 01       	movw	r24, r22
    29c2:	bc 01       	movw	r22, r24
    29c4:	cd 01       	movw	r24, r26
    29c6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    29ca:	dc 01       	movw	r26, r24
    29cc:	cb 01       	movw	r24, r22
    29ce:	98 ab       	std	Y+48, r25	; 0x30
    29d0:	8f a7       	std	Y+47, r24	; 0x2f
    29d2:	0f c0       	rjmp	.+30     	; 0x29f2 <LCD_sendCommand+0x56a>
    29d4:	89 e1       	ldi	r24, 0x19	; 25
    29d6:	90 e0       	ldi	r25, 0x00	; 0
    29d8:	9e a7       	std	Y+46, r25	; 0x2e
    29da:	8d a7       	std	Y+45, r24	; 0x2d
    29dc:	8d a5       	ldd	r24, Y+45	; 0x2d
    29de:	9e a5       	ldd	r25, Y+46	; 0x2e
    29e0:	01 97       	sbiw	r24, 0x01	; 1
    29e2:	f1 f7       	brne	.-4      	; 0x29e0 <LCD_sendCommand+0x558>
    29e4:	9e a7       	std	Y+46, r25	; 0x2e
    29e6:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    29e8:	8f a5       	ldd	r24, Y+47	; 0x2f
    29ea:	98 a9       	ldd	r25, Y+48	; 0x30
    29ec:	01 97       	sbiw	r24, 0x01	; 1
    29ee:	98 ab       	std	Y+48, r25	; 0x30
    29f0:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    29f2:	8f a5       	ldd	r24, Y+47	; 0x2f
    29f4:	98 a9       	ldd	r25, Y+48	; 0x30
    29f6:	00 97       	sbiw	r24, 0x00	; 0
    29f8:	69 f7       	brne	.-38     	; 0x29d4 <LCD_sendCommand+0x54c>
    29fa:	14 c0       	rjmp	.+40     	; 0x2a24 <LCD_sendCommand+0x59c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    29fc:	69 a9       	ldd	r22, Y+49	; 0x31
    29fe:	7a a9       	ldd	r23, Y+50	; 0x32
    2a00:	8b a9       	ldd	r24, Y+51	; 0x33
    2a02:	9c a9       	ldd	r25, Y+52	; 0x34
    2a04:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a08:	dc 01       	movw	r26, r24
    2a0a:	cb 01       	movw	r24, r22
    2a0c:	98 ab       	std	Y+48, r25	; 0x30
    2a0e:	8f a7       	std	Y+47, r24	; 0x2f
    2a10:	8f a5       	ldd	r24, Y+47	; 0x2f
    2a12:	98 a9       	ldd	r25, Y+48	; 0x30
    2a14:	9c a7       	std	Y+44, r25	; 0x2c
    2a16:	8b a7       	std	Y+43, r24	; 0x2b
    2a18:	8b a5       	ldd	r24, Y+43	; 0x2b
    2a1a:	9c a5       	ldd	r25, Y+44	; 0x2c
    2a1c:	01 97       	sbiw	r24, 0x01	; 1
    2a1e:	f1 f7       	brne	.-4      	; 0x2a1c <LCD_sendCommand+0x594>
    2a20:	9c a7       	std	Y+44, r25	; 0x2c
    2a22:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* 13ns */
	GPIO_writePin(LCD_ENABLE_PORT,LCD_ENABLE_PIN,HIGH);
    2a24:	83 e0       	ldi	r24, 0x03	; 3
    2a26:	65 e0       	ldi	r22, 0x05	; 5
    2a28:	41 e0       	ldi	r20, 0x01	; 1
    2a2a:	0e 94 13 0d 	call	0x1a26	; 0x1a26 <GPIO_writePin>
    2a2e:	80 e0       	ldi	r24, 0x00	; 0
    2a30:	90 e0       	ldi	r25, 0x00	; 0
    2a32:	a0 e8       	ldi	r26, 0x80	; 128
    2a34:	bf e3       	ldi	r27, 0x3F	; 63
    2a36:	8f a3       	std	Y+39, r24	; 0x27
    2a38:	98 a7       	std	Y+40, r25	; 0x28
    2a3a:	a9 a7       	std	Y+41, r26	; 0x29
    2a3c:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2a3e:	6f a1       	ldd	r22, Y+39	; 0x27
    2a40:	78 a5       	ldd	r23, Y+40	; 0x28
    2a42:	89 a5       	ldd	r24, Y+41	; 0x29
    2a44:	9a a5       	ldd	r25, Y+42	; 0x2a
    2a46:	20 e0       	ldi	r18, 0x00	; 0
    2a48:	30 e0       	ldi	r19, 0x00	; 0
    2a4a:	4a e7       	ldi	r20, 0x7A	; 122
    2a4c:	53 e4       	ldi	r21, 0x43	; 67
    2a4e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a52:	dc 01       	movw	r26, r24
    2a54:	cb 01       	movw	r24, r22
    2a56:	8b a3       	std	Y+35, r24	; 0x23
    2a58:	9c a3       	std	Y+36, r25	; 0x24
    2a5a:	ad a3       	std	Y+37, r26	; 0x25
    2a5c:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2a5e:	6b a1       	ldd	r22, Y+35	; 0x23
    2a60:	7c a1       	ldd	r23, Y+36	; 0x24
    2a62:	8d a1       	ldd	r24, Y+37	; 0x25
    2a64:	9e a1       	ldd	r25, Y+38	; 0x26
    2a66:	20 e0       	ldi	r18, 0x00	; 0
    2a68:	30 e0       	ldi	r19, 0x00	; 0
    2a6a:	40 e8       	ldi	r20, 0x80	; 128
    2a6c:	5f e3       	ldi	r21, 0x3F	; 63
    2a6e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2a72:	88 23       	and	r24, r24
    2a74:	2c f4       	brge	.+10     	; 0x2a80 <LCD_sendCommand+0x5f8>
		__ticks = 1;
    2a76:	81 e0       	ldi	r24, 0x01	; 1
    2a78:	90 e0       	ldi	r25, 0x00	; 0
    2a7a:	9a a3       	std	Y+34, r25	; 0x22
    2a7c:	89 a3       	std	Y+33, r24	; 0x21
    2a7e:	3f c0       	rjmp	.+126    	; 0x2afe <LCD_sendCommand+0x676>
	else if (__tmp > 65535)
    2a80:	6b a1       	ldd	r22, Y+35	; 0x23
    2a82:	7c a1       	ldd	r23, Y+36	; 0x24
    2a84:	8d a1       	ldd	r24, Y+37	; 0x25
    2a86:	9e a1       	ldd	r25, Y+38	; 0x26
    2a88:	20 e0       	ldi	r18, 0x00	; 0
    2a8a:	3f ef       	ldi	r19, 0xFF	; 255
    2a8c:	4f e7       	ldi	r20, 0x7F	; 127
    2a8e:	57 e4       	ldi	r21, 0x47	; 71
    2a90:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2a94:	18 16       	cp	r1, r24
    2a96:	4c f5       	brge	.+82     	; 0x2aea <LCD_sendCommand+0x662>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2a98:	6f a1       	ldd	r22, Y+39	; 0x27
    2a9a:	78 a5       	ldd	r23, Y+40	; 0x28
    2a9c:	89 a5       	ldd	r24, Y+41	; 0x29
    2a9e:	9a a5       	ldd	r25, Y+42	; 0x2a
    2aa0:	20 e0       	ldi	r18, 0x00	; 0
    2aa2:	30 e0       	ldi	r19, 0x00	; 0
    2aa4:	40 e2       	ldi	r20, 0x20	; 32
    2aa6:	51 e4       	ldi	r21, 0x41	; 65
    2aa8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2aac:	dc 01       	movw	r26, r24
    2aae:	cb 01       	movw	r24, r22
    2ab0:	bc 01       	movw	r22, r24
    2ab2:	cd 01       	movw	r24, r26
    2ab4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ab8:	dc 01       	movw	r26, r24
    2aba:	cb 01       	movw	r24, r22
    2abc:	9a a3       	std	Y+34, r25	; 0x22
    2abe:	89 a3       	std	Y+33, r24	; 0x21
    2ac0:	0f c0       	rjmp	.+30     	; 0x2ae0 <LCD_sendCommand+0x658>
    2ac2:	89 e1       	ldi	r24, 0x19	; 25
    2ac4:	90 e0       	ldi	r25, 0x00	; 0
    2ac6:	98 a3       	std	Y+32, r25	; 0x20
    2ac8:	8f 8f       	std	Y+31, r24	; 0x1f
    2aca:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2acc:	98 a1       	ldd	r25, Y+32	; 0x20
    2ace:	01 97       	sbiw	r24, 0x01	; 1
    2ad0:	f1 f7       	brne	.-4      	; 0x2ace <LCD_sendCommand+0x646>
    2ad2:	98 a3       	std	Y+32, r25	; 0x20
    2ad4:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2ad6:	89 a1       	ldd	r24, Y+33	; 0x21
    2ad8:	9a a1       	ldd	r25, Y+34	; 0x22
    2ada:	01 97       	sbiw	r24, 0x01	; 1
    2adc:	9a a3       	std	Y+34, r25	; 0x22
    2ade:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2ae0:	89 a1       	ldd	r24, Y+33	; 0x21
    2ae2:	9a a1       	ldd	r25, Y+34	; 0x22
    2ae4:	00 97       	sbiw	r24, 0x00	; 0
    2ae6:	69 f7       	brne	.-38     	; 0x2ac2 <LCD_sendCommand+0x63a>
    2ae8:	14 c0       	rjmp	.+40     	; 0x2b12 <LCD_sendCommand+0x68a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2aea:	6b a1       	ldd	r22, Y+35	; 0x23
    2aec:	7c a1       	ldd	r23, Y+36	; 0x24
    2aee:	8d a1       	ldd	r24, Y+37	; 0x25
    2af0:	9e a1       	ldd	r25, Y+38	; 0x26
    2af2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2af6:	dc 01       	movw	r26, r24
    2af8:	cb 01       	movw	r24, r22
    2afa:	9a a3       	std	Y+34, r25	; 0x22
    2afc:	89 a3       	std	Y+33, r24	; 0x21
    2afe:	89 a1       	ldd	r24, Y+33	; 0x21
    2b00:	9a a1       	ldd	r25, Y+34	; 0x22
    2b02:	9e 8f       	std	Y+30, r25	; 0x1e
    2b04:	8d 8f       	std	Y+29, r24	; 0x1d
    2b06:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2b08:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2b0a:	01 97       	sbiw	r24, 0x01	; 1
    2b0c:	f1 f7       	brne	.-4      	; 0x2b0a <LCD_sendCommand+0x682>
    2b0e:	9e 8f       	std	Y+30, r25	; 0x1e
    2b10:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* 13ns */

	GPIO_writePin(LCD_DATA_PORT,LCD_DB4,GET_BIT(command,0));
    2b12:	fe 01       	movw	r30, r28
    2b14:	ed 59       	subi	r30, 0x9D	; 157
    2b16:	ff 4f       	sbci	r31, 0xFF	; 255
    2b18:	80 81       	ld	r24, Z
    2b1a:	98 2f       	mov	r25, r24
    2b1c:	91 70       	andi	r25, 0x01	; 1
    2b1e:	82 e0       	ldi	r24, 0x02	; 2
    2b20:	63 e0       	ldi	r22, 0x03	; 3
    2b22:	49 2f       	mov	r20, r25
    2b24:	0e 94 13 0d 	call	0x1a26	; 0x1a26 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT,LCD_DB5,GET_BIT(command,1));
    2b28:	fe 01       	movw	r30, r28
    2b2a:	ed 59       	subi	r30, 0x9D	; 157
    2b2c:	ff 4f       	sbci	r31, 0xFF	; 255
    2b2e:	80 81       	ld	r24, Z
    2b30:	88 2f       	mov	r24, r24
    2b32:	90 e0       	ldi	r25, 0x00	; 0
    2b34:	82 70       	andi	r24, 0x02	; 2
    2b36:	90 70       	andi	r25, 0x00	; 0
    2b38:	95 95       	asr	r25
    2b3a:	87 95       	ror	r24
    2b3c:	98 2f       	mov	r25, r24
    2b3e:	82 e0       	ldi	r24, 0x02	; 2
    2b40:	64 e0       	ldi	r22, 0x04	; 4
    2b42:	49 2f       	mov	r20, r25
    2b44:	0e 94 13 0d 	call	0x1a26	; 0x1a26 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT,LCD_DB6,GET_BIT(command,2));
    2b48:	fe 01       	movw	r30, r28
    2b4a:	ed 59       	subi	r30, 0x9D	; 157
    2b4c:	ff 4f       	sbci	r31, 0xFF	; 255
    2b4e:	80 81       	ld	r24, Z
    2b50:	88 2f       	mov	r24, r24
    2b52:	90 e0       	ldi	r25, 0x00	; 0
    2b54:	84 70       	andi	r24, 0x04	; 4
    2b56:	90 70       	andi	r25, 0x00	; 0
    2b58:	95 95       	asr	r25
    2b5a:	87 95       	ror	r24
    2b5c:	95 95       	asr	r25
    2b5e:	87 95       	ror	r24
    2b60:	98 2f       	mov	r25, r24
    2b62:	82 e0       	ldi	r24, 0x02	; 2
    2b64:	65 e0       	ldi	r22, 0x05	; 5
    2b66:	49 2f       	mov	r20, r25
    2b68:	0e 94 13 0d 	call	0x1a26	; 0x1a26 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT,LCD_DB7,GET_BIT(command,3));
    2b6c:	fe 01       	movw	r30, r28
    2b6e:	ed 59       	subi	r30, 0x9D	; 157
    2b70:	ff 4f       	sbci	r31, 0xFF	; 255
    2b72:	80 81       	ld	r24, Z
    2b74:	88 2f       	mov	r24, r24
    2b76:	90 e0       	ldi	r25, 0x00	; 0
    2b78:	88 70       	andi	r24, 0x08	; 8
    2b7a:	90 70       	andi	r25, 0x00	; 0
    2b7c:	95 95       	asr	r25
    2b7e:	87 95       	ror	r24
    2b80:	95 95       	asr	r25
    2b82:	87 95       	ror	r24
    2b84:	95 95       	asr	r25
    2b86:	87 95       	ror	r24
    2b88:	98 2f       	mov	r25, r24
    2b8a:	82 e0       	ldi	r24, 0x02	; 2
    2b8c:	66 e0       	ldi	r22, 0x06	; 6
    2b8e:	49 2f       	mov	r20, r25
    2b90:	0e 94 13 0d 	call	0x1a26	; 0x1a26 <GPIO_writePin>
    2b94:	80 e0       	ldi	r24, 0x00	; 0
    2b96:	90 e0       	ldi	r25, 0x00	; 0
    2b98:	a0 e8       	ldi	r26, 0x80	; 128
    2b9a:	bf e3       	ldi	r27, 0x3F	; 63
    2b9c:	89 8f       	std	Y+25, r24	; 0x19
    2b9e:	9a 8f       	std	Y+26, r25	; 0x1a
    2ba0:	ab 8f       	std	Y+27, r26	; 0x1b
    2ba2:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2ba4:	69 8d       	ldd	r22, Y+25	; 0x19
    2ba6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2ba8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2baa:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2bac:	20 e0       	ldi	r18, 0x00	; 0
    2bae:	30 e0       	ldi	r19, 0x00	; 0
    2bb0:	4a e7       	ldi	r20, 0x7A	; 122
    2bb2:	53 e4       	ldi	r21, 0x43	; 67
    2bb4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2bb8:	dc 01       	movw	r26, r24
    2bba:	cb 01       	movw	r24, r22
    2bbc:	8d 8b       	std	Y+21, r24	; 0x15
    2bbe:	9e 8b       	std	Y+22, r25	; 0x16
    2bc0:	af 8b       	std	Y+23, r26	; 0x17
    2bc2:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2bc4:	6d 89       	ldd	r22, Y+21	; 0x15
    2bc6:	7e 89       	ldd	r23, Y+22	; 0x16
    2bc8:	8f 89       	ldd	r24, Y+23	; 0x17
    2bca:	98 8d       	ldd	r25, Y+24	; 0x18
    2bcc:	20 e0       	ldi	r18, 0x00	; 0
    2bce:	30 e0       	ldi	r19, 0x00	; 0
    2bd0:	40 e8       	ldi	r20, 0x80	; 128
    2bd2:	5f e3       	ldi	r21, 0x3F	; 63
    2bd4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2bd8:	88 23       	and	r24, r24
    2bda:	2c f4       	brge	.+10     	; 0x2be6 <LCD_sendCommand+0x75e>
		__ticks = 1;
    2bdc:	81 e0       	ldi	r24, 0x01	; 1
    2bde:	90 e0       	ldi	r25, 0x00	; 0
    2be0:	9c 8b       	std	Y+20, r25	; 0x14
    2be2:	8b 8b       	std	Y+19, r24	; 0x13
    2be4:	3f c0       	rjmp	.+126    	; 0x2c64 <LCD_sendCommand+0x7dc>
	else if (__tmp > 65535)
    2be6:	6d 89       	ldd	r22, Y+21	; 0x15
    2be8:	7e 89       	ldd	r23, Y+22	; 0x16
    2bea:	8f 89       	ldd	r24, Y+23	; 0x17
    2bec:	98 8d       	ldd	r25, Y+24	; 0x18
    2bee:	20 e0       	ldi	r18, 0x00	; 0
    2bf0:	3f ef       	ldi	r19, 0xFF	; 255
    2bf2:	4f e7       	ldi	r20, 0x7F	; 127
    2bf4:	57 e4       	ldi	r21, 0x47	; 71
    2bf6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2bfa:	18 16       	cp	r1, r24
    2bfc:	4c f5       	brge	.+82     	; 0x2c50 <LCD_sendCommand+0x7c8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2bfe:	69 8d       	ldd	r22, Y+25	; 0x19
    2c00:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2c02:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2c04:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2c06:	20 e0       	ldi	r18, 0x00	; 0
    2c08:	30 e0       	ldi	r19, 0x00	; 0
    2c0a:	40 e2       	ldi	r20, 0x20	; 32
    2c0c:	51 e4       	ldi	r21, 0x41	; 65
    2c0e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c12:	dc 01       	movw	r26, r24
    2c14:	cb 01       	movw	r24, r22
    2c16:	bc 01       	movw	r22, r24
    2c18:	cd 01       	movw	r24, r26
    2c1a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c1e:	dc 01       	movw	r26, r24
    2c20:	cb 01       	movw	r24, r22
    2c22:	9c 8b       	std	Y+20, r25	; 0x14
    2c24:	8b 8b       	std	Y+19, r24	; 0x13
    2c26:	0f c0       	rjmp	.+30     	; 0x2c46 <LCD_sendCommand+0x7be>
    2c28:	89 e1       	ldi	r24, 0x19	; 25
    2c2a:	90 e0       	ldi	r25, 0x00	; 0
    2c2c:	9a 8b       	std	Y+18, r25	; 0x12
    2c2e:	89 8b       	std	Y+17, r24	; 0x11
    2c30:	89 89       	ldd	r24, Y+17	; 0x11
    2c32:	9a 89       	ldd	r25, Y+18	; 0x12
    2c34:	01 97       	sbiw	r24, 0x01	; 1
    2c36:	f1 f7       	brne	.-4      	; 0x2c34 <LCD_sendCommand+0x7ac>
    2c38:	9a 8b       	std	Y+18, r25	; 0x12
    2c3a:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2c3c:	8b 89       	ldd	r24, Y+19	; 0x13
    2c3e:	9c 89       	ldd	r25, Y+20	; 0x14
    2c40:	01 97       	sbiw	r24, 0x01	; 1
    2c42:	9c 8b       	std	Y+20, r25	; 0x14
    2c44:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2c46:	8b 89       	ldd	r24, Y+19	; 0x13
    2c48:	9c 89       	ldd	r25, Y+20	; 0x14
    2c4a:	00 97       	sbiw	r24, 0x00	; 0
    2c4c:	69 f7       	brne	.-38     	; 0x2c28 <LCD_sendCommand+0x7a0>
    2c4e:	14 c0       	rjmp	.+40     	; 0x2c78 <LCD_sendCommand+0x7f0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2c50:	6d 89       	ldd	r22, Y+21	; 0x15
    2c52:	7e 89       	ldd	r23, Y+22	; 0x16
    2c54:	8f 89       	ldd	r24, Y+23	; 0x17
    2c56:	98 8d       	ldd	r25, Y+24	; 0x18
    2c58:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c5c:	dc 01       	movw	r26, r24
    2c5e:	cb 01       	movw	r24, r22
    2c60:	9c 8b       	std	Y+20, r25	; 0x14
    2c62:	8b 8b       	std	Y+19, r24	; 0x13
    2c64:	8b 89       	ldd	r24, Y+19	; 0x13
    2c66:	9c 89       	ldd	r25, Y+20	; 0x14
    2c68:	98 8b       	std	Y+16, r25	; 0x10
    2c6a:	8f 87       	std	Y+15, r24	; 0x0f
    2c6c:	8f 85       	ldd	r24, Y+15	; 0x0f
    2c6e:	98 89       	ldd	r25, Y+16	; 0x10
    2c70:	01 97       	sbiw	r24, 0x01	; 1
    2c72:	f1 f7       	brne	.-4      	; 0x2c70 <LCD_sendCommand+0x7e8>
    2c74:	98 8b       	std	Y+16, r25	; 0x10
    2c76:	8f 87       	std	Y+15, r24	; 0x0f

	_delay_ms(1); /* 100ns */
	GPIO_writePin(LCD_ENABLE_PORT,LCD_ENABLE_PIN,LOW);
    2c78:	83 e0       	ldi	r24, 0x03	; 3
    2c7a:	65 e0       	ldi	r22, 0x05	; 5
    2c7c:	40 e0       	ldi	r20, 0x00	; 0
    2c7e:	0e 94 13 0d 	call	0x1a26	; 0x1a26 <GPIO_writePin>
    2c82:	80 e0       	ldi	r24, 0x00	; 0
    2c84:	90 e0       	ldi	r25, 0x00	; 0
    2c86:	a0 e8       	ldi	r26, 0x80	; 128
    2c88:	bf e3       	ldi	r27, 0x3F	; 63
    2c8a:	8b 87       	std	Y+11, r24	; 0x0b
    2c8c:	9c 87       	std	Y+12, r25	; 0x0c
    2c8e:	ad 87       	std	Y+13, r26	; 0x0d
    2c90:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2c92:	6b 85       	ldd	r22, Y+11	; 0x0b
    2c94:	7c 85       	ldd	r23, Y+12	; 0x0c
    2c96:	8d 85       	ldd	r24, Y+13	; 0x0d
    2c98:	9e 85       	ldd	r25, Y+14	; 0x0e
    2c9a:	20 e0       	ldi	r18, 0x00	; 0
    2c9c:	30 e0       	ldi	r19, 0x00	; 0
    2c9e:	4a e7       	ldi	r20, 0x7A	; 122
    2ca0:	53 e4       	ldi	r21, 0x43	; 67
    2ca2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ca6:	dc 01       	movw	r26, r24
    2ca8:	cb 01       	movw	r24, r22
    2caa:	8f 83       	std	Y+7, r24	; 0x07
    2cac:	98 87       	std	Y+8, r25	; 0x08
    2cae:	a9 87       	std	Y+9, r26	; 0x09
    2cb0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2cb2:	6f 81       	ldd	r22, Y+7	; 0x07
    2cb4:	78 85       	ldd	r23, Y+8	; 0x08
    2cb6:	89 85       	ldd	r24, Y+9	; 0x09
    2cb8:	9a 85       	ldd	r25, Y+10	; 0x0a
    2cba:	20 e0       	ldi	r18, 0x00	; 0
    2cbc:	30 e0       	ldi	r19, 0x00	; 0
    2cbe:	40 e8       	ldi	r20, 0x80	; 128
    2cc0:	5f e3       	ldi	r21, 0x3F	; 63
    2cc2:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2cc6:	88 23       	and	r24, r24
    2cc8:	2c f4       	brge	.+10     	; 0x2cd4 <LCD_sendCommand+0x84c>
		__ticks = 1;
    2cca:	81 e0       	ldi	r24, 0x01	; 1
    2ccc:	90 e0       	ldi	r25, 0x00	; 0
    2cce:	9e 83       	std	Y+6, r25	; 0x06
    2cd0:	8d 83       	std	Y+5, r24	; 0x05
    2cd2:	3f c0       	rjmp	.+126    	; 0x2d52 <LCD_sendCommand+0x8ca>
	else if (__tmp > 65535)
    2cd4:	6f 81       	ldd	r22, Y+7	; 0x07
    2cd6:	78 85       	ldd	r23, Y+8	; 0x08
    2cd8:	89 85       	ldd	r24, Y+9	; 0x09
    2cda:	9a 85       	ldd	r25, Y+10	; 0x0a
    2cdc:	20 e0       	ldi	r18, 0x00	; 0
    2cde:	3f ef       	ldi	r19, 0xFF	; 255
    2ce0:	4f e7       	ldi	r20, 0x7F	; 127
    2ce2:	57 e4       	ldi	r21, 0x47	; 71
    2ce4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2ce8:	18 16       	cp	r1, r24
    2cea:	4c f5       	brge	.+82     	; 0x2d3e <LCD_sendCommand+0x8b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2cec:	6b 85       	ldd	r22, Y+11	; 0x0b
    2cee:	7c 85       	ldd	r23, Y+12	; 0x0c
    2cf0:	8d 85       	ldd	r24, Y+13	; 0x0d
    2cf2:	9e 85       	ldd	r25, Y+14	; 0x0e
    2cf4:	20 e0       	ldi	r18, 0x00	; 0
    2cf6:	30 e0       	ldi	r19, 0x00	; 0
    2cf8:	40 e2       	ldi	r20, 0x20	; 32
    2cfa:	51 e4       	ldi	r21, 0x41	; 65
    2cfc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d00:	dc 01       	movw	r26, r24
    2d02:	cb 01       	movw	r24, r22
    2d04:	bc 01       	movw	r22, r24
    2d06:	cd 01       	movw	r24, r26
    2d08:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d0c:	dc 01       	movw	r26, r24
    2d0e:	cb 01       	movw	r24, r22
    2d10:	9e 83       	std	Y+6, r25	; 0x06
    2d12:	8d 83       	std	Y+5, r24	; 0x05
    2d14:	0f c0       	rjmp	.+30     	; 0x2d34 <LCD_sendCommand+0x8ac>
    2d16:	89 e1       	ldi	r24, 0x19	; 25
    2d18:	90 e0       	ldi	r25, 0x00	; 0
    2d1a:	9c 83       	std	Y+4, r25	; 0x04
    2d1c:	8b 83       	std	Y+3, r24	; 0x03
    2d1e:	8b 81       	ldd	r24, Y+3	; 0x03
    2d20:	9c 81       	ldd	r25, Y+4	; 0x04
    2d22:	01 97       	sbiw	r24, 0x01	; 1
    2d24:	f1 f7       	brne	.-4      	; 0x2d22 <LCD_sendCommand+0x89a>
    2d26:	9c 83       	std	Y+4, r25	; 0x04
    2d28:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2d2a:	8d 81       	ldd	r24, Y+5	; 0x05
    2d2c:	9e 81       	ldd	r25, Y+6	; 0x06
    2d2e:	01 97       	sbiw	r24, 0x01	; 1
    2d30:	9e 83       	std	Y+6, r25	; 0x06
    2d32:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2d34:	8d 81       	ldd	r24, Y+5	; 0x05
    2d36:	9e 81       	ldd	r25, Y+6	; 0x06
    2d38:	00 97       	sbiw	r24, 0x00	; 0
    2d3a:	69 f7       	brne	.-38     	; 0x2d16 <LCD_sendCommand+0x88e>
    2d3c:	14 c0       	rjmp	.+40     	; 0x2d66 <LCD_sendCommand+0x8de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2d3e:	6f 81       	ldd	r22, Y+7	; 0x07
    2d40:	78 85       	ldd	r23, Y+8	; 0x08
    2d42:	89 85       	ldd	r24, Y+9	; 0x09
    2d44:	9a 85       	ldd	r25, Y+10	; 0x0a
    2d46:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d4a:	dc 01       	movw	r26, r24
    2d4c:	cb 01       	movw	r24, r22
    2d4e:	9e 83       	std	Y+6, r25	; 0x06
    2d50:	8d 83       	std	Y+5, r24	; 0x05
    2d52:	8d 81       	ldd	r24, Y+5	; 0x05
    2d54:	9e 81       	ldd	r25, Y+6	; 0x06
    2d56:	9a 83       	std	Y+2, r25	; 0x02
    2d58:	89 83       	std	Y+1, r24	; 0x01
    2d5a:	89 81       	ldd	r24, Y+1	; 0x01
    2d5c:	9a 81       	ldd	r25, Y+2	; 0x02
    2d5e:	01 97       	sbiw	r24, 0x01	; 1
    2d60:	f1 f7       	brne	.-4      	; 0x2d5e <LCD_sendCommand+0x8d6>
    2d62:	9a 83       	std	Y+2, r25	; 0x02
    2d64:	89 83       	std	Y+1, r24	; 0x01
	GPIO_writePin(LCD_ENABLE_PORT,LCD_ENABLE_PIN,LOW);
	_delay_ms(1); /* 13ns */

#endif

}//end LCD_sendCommand
    2d66:	cd 59       	subi	r28, 0x9D	; 157
    2d68:	df 4f       	sbci	r29, 0xFF	; 255
    2d6a:	0f b6       	in	r0, 0x3f	; 63
    2d6c:	f8 94       	cli
    2d6e:	de bf       	out	0x3e, r29	; 62
    2d70:	0f be       	out	0x3f, r0	; 63
    2d72:	cd bf       	out	0x3d, r28	; 61
    2d74:	cf 91       	pop	r28
    2d76:	df 91       	pop	r29
    2d78:	1f 91       	pop	r17
    2d7a:	0f 91       	pop	r16
    2d7c:	08 95       	ret

00002d7e <LCD_displayCharacter>:

void LCD_displayCharacter(uint8 character){
    2d7e:	0f 93       	push	r16
    2d80:	1f 93       	push	r17
    2d82:	df 93       	push	r29
    2d84:	cf 93       	push	r28
    2d86:	cd b7       	in	r28, 0x3d	; 61
    2d88:	de b7       	in	r29, 0x3e	; 62
    2d8a:	c3 56       	subi	r28, 0x63	; 99
    2d8c:	d0 40       	sbci	r29, 0x00	; 0
    2d8e:	0f b6       	in	r0, 0x3f	; 63
    2d90:	f8 94       	cli
    2d92:	de bf       	out	0x3e, r29	; 62
    2d94:	0f be       	out	0x3f, r0	; 63
    2d96:	cd bf       	out	0x3d, r28	; 61
    2d98:	fe 01       	movw	r30, r28
    2d9a:	ed 59       	subi	r30, 0x9D	; 157
    2d9c:	ff 4f       	sbci	r31, 0xFF	; 255
    2d9e:	80 83       	st	Z, r24

	GPIO_writePin(LCD_RS_PORT,LCD_RS_PIN,HIGH);
    2da0:	83 e0       	ldi	r24, 0x03	; 3
    2da2:	64 e0       	ldi	r22, 0x04	; 4
    2da4:	41 e0       	ldi	r20, 0x01	; 1
    2da6:	0e 94 13 0d 	call	0x1a26	; 0x1a26 <GPIO_writePin>
    2daa:	fe 01       	movw	r30, r28
    2dac:	e1 5a       	subi	r30, 0xA1	; 161
    2dae:	ff 4f       	sbci	r31, 0xFF	; 255
    2db0:	80 e0       	ldi	r24, 0x00	; 0
    2db2:	90 e0       	ldi	r25, 0x00	; 0
    2db4:	a0 e8       	ldi	r26, 0x80	; 128
    2db6:	bf e3       	ldi	r27, 0x3F	; 63
    2db8:	80 83       	st	Z, r24
    2dba:	91 83       	std	Z+1, r25	; 0x01
    2dbc:	a2 83       	std	Z+2, r26	; 0x02
    2dbe:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2dc0:	8e 01       	movw	r16, r28
    2dc2:	05 5a       	subi	r16, 0xA5	; 165
    2dc4:	1f 4f       	sbci	r17, 0xFF	; 255
    2dc6:	fe 01       	movw	r30, r28
    2dc8:	e1 5a       	subi	r30, 0xA1	; 161
    2dca:	ff 4f       	sbci	r31, 0xFF	; 255
    2dcc:	60 81       	ld	r22, Z
    2dce:	71 81       	ldd	r23, Z+1	; 0x01
    2dd0:	82 81       	ldd	r24, Z+2	; 0x02
    2dd2:	93 81       	ldd	r25, Z+3	; 0x03
    2dd4:	20 e0       	ldi	r18, 0x00	; 0
    2dd6:	30 e0       	ldi	r19, 0x00	; 0
    2dd8:	4a e7       	ldi	r20, 0x7A	; 122
    2dda:	53 e4       	ldi	r21, 0x43	; 67
    2ddc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2de0:	dc 01       	movw	r26, r24
    2de2:	cb 01       	movw	r24, r22
    2de4:	f8 01       	movw	r30, r16
    2de6:	80 83       	st	Z, r24
    2de8:	91 83       	std	Z+1, r25	; 0x01
    2dea:	a2 83       	std	Z+2, r26	; 0x02
    2dec:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2dee:	fe 01       	movw	r30, r28
    2df0:	e5 5a       	subi	r30, 0xA5	; 165
    2df2:	ff 4f       	sbci	r31, 0xFF	; 255
    2df4:	60 81       	ld	r22, Z
    2df6:	71 81       	ldd	r23, Z+1	; 0x01
    2df8:	82 81       	ldd	r24, Z+2	; 0x02
    2dfa:	93 81       	ldd	r25, Z+3	; 0x03
    2dfc:	20 e0       	ldi	r18, 0x00	; 0
    2dfe:	30 e0       	ldi	r19, 0x00	; 0
    2e00:	40 e8       	ldi	r20, 0x80	; 128
    2e02:	5f e3       	ldi	r21, 0x3F	; 63
    2e04:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2e08:	88 23       	and	r24, r24
    2e0a:	44 f4       	brge	.+16     	; 0x2e1c <LCD_displayCharacter+0x9e>
		__ticks = 1;
    2e0c:	fe 01       	movw	r30, r28
    2e0e:	e7 5a       	subi	r30, 0xA7	; 167
    2e10:	ff 4f       	sbci	r31, 0xFF	; 255
    2e12:	81 e0       	ldi	r24, 0x01	; 1
    2e14:	90 e0       	ldi	r25, 0x00	; 0
    2e16:	91 83       	std	Z+1, r25	; 0x01
    2e18:	80 83       	st	Z, r24
    2e1a:	64 c0       	rjmp	.+200    	; 0x2ee4 <LCD_displayCharacter+0x166>
	else if (__tmp > 65535)
    2e1c:	fe 01       	movw	r30, r28
    2e1e:	e5 5a       	subi	r30, 0xA5	; 165
    2e20:	ff 4f       	sbci	r31, 0xFF	; 255
    2e22:	60 81       	ld	r22, Z
    2e24:	71 81       	ldd	r23, Z+1	; 0x01
    2e26:	82 81       	ldd	r24, Z+2	; 0x02
    2e28:	93 81       	ldd	r25, Z+3	; 0x03
    2e2a:	20 e0       	ldi	r18, 0x00	; 0
    2e2c:	3f ef       	ldi	r19, 0xFF	; 255
    2e2e:	4f e7       	ldi	r20, 0x7F	; 127
    2e30:	57 e4       	ldi	r21, 0x47	; 71
    2e32:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2e36:	18 16       	cp	r1, r24
    2e38:	0c f0       	brlt	.+2      	; 0x2e3c <LCD_displayCharacter+0xbe>
    2e3a:	43 c0       	rjmp	.+134    	; 0x2ec2 <LCD_displayCharacter+0x144>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2e3c:	fe 01       	movw	r30, r28
    2e3e:	e1 5a       	subi	r30, 0xA1	; 161
    2e40:	ff 4f       	sbci	r31, 0xFF	; 255
    2e42:	60 81       	ld	r22, Z
    2e44:	71 81       	ldd	r23, Z+1	; 0x01
    2e46:	82 81       	ldd	r24, Z+2	; 0x02
    2e48:	93 81       	ldd	r25, Z+3	; 0x03
    2e4a:	20 e0       	ldi	r18, 0x00	; 0
    2e4c:	30 e0       	ldi	r19, 0x00	; 0
    2e4e:	40 e2       	ldi	r20, 0x20	; 32
    2e50:	51 e4       	ldi	r21, 0x41	; 65
    2e52:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e56:	dc 01       	movw	r26, r24
    2e58:	cb 01       	movw	r24, r22
    2e5a:	8e 01       	movw	r16, r28
    2e5c:	07 5a       	subi	r16, 0xA7	; 167
    2e5e:	1f 4f       	sbci	r17, 0xFF	; 255
    2e60:	bc 01       	movw	r22, r24
    2e62:	cd 01       	movw	r24, r26
    2e64:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e68:	dc 01       	movw	r26, r24
    2e6a:	cb 01       	movw	r24, r22
    2e6c:	f8 01       	movw	r30, r16
    2e6e:	91 83       	std	Z+1, r25	; 0x01
    2e70:	80 83       	st	Z, r24
    2e72:	1f c0       	rjmp	.+62     	; 0x2eb2 <LCD_displayCharacter+0x134>
    2e74:	fe 01       	movw	r30, r28
    2e76:	e9 5a       	subi	r30, 0xA9	; 169
    2e78:	ff 4f       	sbci	r31, 0xFF	; 255
    2e7a:	89 e1       	ldi	r24, 0x19	; 25
    2e7c:	90 e0       	ldi	r25, 0x00	; 0
    2e7e:	91 83       	std	Z+1, r25	; 0x01
    2e80:	80 83       	st	Z, r24
    2e82:	fe 01       	movw	r30, r28
    2e84:	e9 5a       	subi	r30, 0xA9	; 169
    2e86:	ff 4f       	sbci	r31, 0xFF	; 255
    2e88:	80 81       	ld	r24, Z
    2e8a:	91 81       	ldd	r25, Z+1	; 0x01
    2e8c:	01 97       	sbiw	r24, 0x01	; 1
    2e8e:	f1 f7       	brne	.-4      	; 0x2e8c <LCD_displayCharacter+0x10e>
    2e90:	fe 01       	movw	r30, r28
    2e92:	e9 5a       	subi	r30, 0xA9	; 169
    2e94:	ff 4f       	sbci	r31, 0xFF	; 255
    2e96:	91 83       	std	Z+1, r25	; 0x01
    2e98:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2e9a:	de 01       	movw	r26, r28
    2e9c:	a7 5a       	subi	r26, 0xA7	; 167
    2e9e:	bf 4f       	sbci	r27, 0xFF	; 255
    2ea0:	fe 01       	movw	r30, r28
    2ea2:	e7 5a       	subi	r30, 0xA7	; 167
    2ea4:	ff 4f       	sbci	r31, 0xFF	; 255
    2ea6:	80 81       	ld	r24, Z
    2ea8:	91 81       	ldd	r25, Z+1	; 0x01
    2eaa:	01 97       	sbiw	r24, 0x01	; 1
    2eac:	11 96       	adiw	r26, 0x01	; 1
    2eae:	9c 93       	st	X, r25
    2eb0:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2eb2:	fe 01       	movw	r30, r28
    2eb4:	e7 5a       	subi	r30, 0xA7	; 167
    2eb6:	ff 4f       	sbci	r31, 0xFF	; 255
    2eb8:	80 81       	ld	r24, Z
    2eba:	91 81       	ldd	r25, Z+1	; 0x01
    2ebc:	00 97       	sbiw	r24, 0x00	; 0
    2ebe:	d1 f6       	brne	.-76     	; 0x2e74 <LCD_displayCharacter+0xf6>
    2ec0:	27 c0       	rjmp	.+78     	; 0x2f10 <LCD_displayCharacter+0x192>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2ec2:	8e 01       	movw	r16, r28
    2ec4:	07 5a       	subi	r16, 0xA7	; 167
    2ec6:	1f 4f       	sbci	r17, 0xFF	; 255
    2ec8:	fe 01       	movw	r30, r28
    2eca:	e5 5a       	subi	r30, 0xA5	; 165
    2ecc:	ff 4f       	sbci	r31, 0xFF	; 255
    2ece:	60 81       	ld	r22, Z
    2ed0:	71 81       	ldd	r23, Z+1	; 0x01
    2ed2:	82 81       	ldd	r24, Z+2	; 0x02
    2ed4:	93 81       	ldd	r25, Z+3	; 0x03
    2ed6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2eda:	dc 01       	movw	r26, r24
    2edc:	cb 01       	movw	r24, r22
    2ede:	f8 01       	movw	r30, r16
    2ee0:	91 83       	std	Z+1, r25	; 0x01
    2ee2:	80 83       	st	Z, r24
    2ee4:	de 01       	movw	r26, r28
    2ee6:	ab 5a       	subi	r26, 0xAB	; 171
    2ee8:	bf 4f       	sbci	r27, 0xFF	; 255
    2eea:	fe 01       	movw	r30, r28
    2eec:	e7 5a       	subi	r30, 0xA7	; 167
    2eee:	ff 4f       	sbci	r31, 0xFF	; 255
    2ef0:	80 81       	ld	r24, Z
    2ef2:	91 81       	ldd	r25, Z+1	; 0x01
    2ef4:	8d 93       	st	X+, r24
    2ef6:	9c 93       	st	X, r25
    2ef8:	fe 01       	movw	r30, r28
    2efa:	eb 5a       	subi	r30, 0xAB	; 171
    2efc:	ff 4f       	sbci	r31, 0xFF	; 255
    2efe:	80 81       	ld	r24, Z
    2f00:	91 81       	ldd	r25, Z+1	; 0x01
    2f02:	01 97       	sbiw	r24, 0x01	; 1
    2f04:	f1 f7       	brne	.-4      	; 0x2f02 <LCD_displayCharacter+0x184>
    2f06:	fe 01       	movw	r30, r28
    2f08:	eb 5a       	subi	r30, 0xAB	; 171
    2f0a:	ff 4f       	sbci	r31, 0xFF	; 255
    2f0c:	91 83       	std	Z+1, r25	; 0x01
    2f0e:	80 83       	st	Z, r24
	_delay_ms(1); /* 50ns */
	GPIO_writePin(LCD_ENABLE_PORT,LCD_ENABLE_PIN,HIGH);
    2f10:	83 e0       	ldi	r24, 0x03	; 3
    2f12:	65 e0       	ldi	r22, 0x05	; 5
    2f14:	41 e0       	ldi	r20, 0x01	; 1
    2f16:	0e 94 13 0d 	call	0x1a26	; 0x1a26 <GPIO_writePin>
    2f1a:	fe 01       	movw	r30, r28
    2f1c:	ef 5a       	subi	r30, 0xAF	; 175
    2f1e:	ff 4f       	sbci	r31, 0xFF	; 255
    2f20:	80 e0       	ldi	r24, 0x00	; 0
    2f22:	90 e0       	ldi	r25, 0x00	; 0
    2f24:	a0 e8       	ldi	r26, 0x80	; 128
    2f26:	bf e3       	ldi	r27, 0x3F	; 63
    2f28:	80 83       	st	Z, r24
    2f2a:	91 83       	std	Z+1, r25	; 0x01
    2f2c:	a2 83       	std	Z+2, r26	; 0x02
    2f2e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2f30:	8e 01       	movw	r16, r28
    2f32:	03 5b       	subi	r16, 0xB3	; 179
    2f34:	1f 4f       	sbci	r17, 0xFF	; 255
    2f36:	fe 01       	movw	r30, r28
    2f38:	ef 5a       	subi	r30, 0xAF	; 175
    2f3a:	ff 4f       	sbci	r31, 0xFF	; 255
    2f3c:	60 81       	ld	r22, Z
    2f3e:	71 81       	ldd	r23, Z+1	; 0x01
    2f40:	82 81       	ldd	r24, Z+2	; 0x02
    2f42:	93 81       	ldd	r25, Z+3	; 0x03
    2f44:	20 e0       	ldi	r18, 0x00	; 0
    2f46:	30 e0       	ldi	r19, 0x00	; 0
    2f48:	4a e7       	ldi	r20, 0x7A	; 122
    2f4a:	53 e4       	ldi	r21, 0x43	; 67
    2f4c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f50:	dc 01       	movw	r26, r24
    2f52:	cb 01       	movw	r24, r22
    2f54:	f8 01       	movw	r30, r16
    2f56:	80 83       	st	Z, r24
    2f58:	91 83       	std	Z+1, r25	; 0x01
    2f5a:	a2 83       	std	Z+2, r26	; 0x02
    2f5c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2f5e:	fe 01       	movw	r30, r28
    2f60:	e3 5b       	subi	r30, 0xB3	; 179
    2f62:	ff 4f       	sbci	r31, 0xFF	; 255
    2f64:	60 81       	ld	r22, Z
    2f66:	71 81       	ldd	r23, Z+1	; 0x01
    2f68:	82 81       	ldd	r24, Z+2	; 0x02
    2f6a:	93 81       	ldd	r25, Z+3	; 0x03
    2f6c:	20 e0       	ldi	r18, 0x00	; 0
    2f6e:	30 e0       	ldi	r19, 0x00	; 0
    2f70:	40 e8       	ldi	r20, 0x80	; 128
    2f72:	5f e3       	ldi	r21, 0x3F	; 63
    2f74:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2f78:	88 23       	and	r24, r24
    2f7a:	44 f4       	brge	.+16     	; 0x2f8c <LCD_displayCharacter+0x20e>
		__ticks = 1;
    2f7c:	fe 01       	movw	r30, r28
    2f7e:	e5 5b       	subi	r30, 0xB5	; 181
    2f80:	ff 4f       	sbci	r31, 0xFF	; 255
    2f82:	81 e0       	ldi	r24, 0x01	; 1
    2f84:	90 e0       	ldi	r25, 0x00	; 0
    2f86:	91 83       	std	Z+1, r25	; 0x01
    2f88:	80 83       	st	Z, r24
    2f8a:	64 c0       	rjmp	.+200    	; 0x3054 <LCD_displayCharacter+0x2d6>
	else if (__tmp > 65535)
    2f8c:	fe 01       	movw	r30, r28
    2f8e:	e3 5b       	subi	r30, 0xB3	; 179
    2f90:	ff 4f       	sbci	r31, 0xFF	; 255
    2f92:	60 81       	ld	r22, Z
    2f94:	71 81       	ldd	r23, Z+1	; 0x01
    2f96:	82 81       	ldd	r24, Z+2	; 0x02
    2f98:	93 81       	ldd	r25, Z+3	; 0x03
    2f9a:	20 e0       	ldi	r18, 0x00	; 0
    2f9c:	3f ef       	ldi	r19, 0xFF	; 255
    2f9e:	4f e7       	ldi	r20, 0x7F	; 127
    2fa0:	57 e4       	ldi	r21, 0x47	; 71
    2fa2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2fa6:	18 16       	cp	r1, r24
    2fa8:	0c f0       	brlt	.+2      	; 0x2fac <LCD_displayCharacter+0x22e>
    2faa:	43 c0       	rjmp	.+134    	; 0x3032 <LCD_displayCharacter+0x2b4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2fac:	fe 01       	movw	r30, r28
    2fae:	ef 5a       	subi	r30, 0xAF	; 175
    2fb0:	ff 4f       	sbci	r31, 0xFF	; 255
    2fb2:	60 81       	ld	r22, Z
    2fb4:	71 81       	ldd	r23, Z+1	; 0x01
    2fb6:	82 81       	ldd	r24, Z+2	; 0x02
    2fb8:	93 81       	ldd	r25, Z+3	; 0x03
    2fba:	20 e0       	ldi	r18, 0x00	; 0
    2fbc:	30 e0       	ldi	r19, 0x00	; 0
    2fbe:	40 e2       	ldi	r20, 0x20	; 32
    2fc0:	51 e4       	ldi	r21, 0x41	; 65
    2fc2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2fc6:	dc 01       	movw	r26, r24
    2fc8:	cb 01       	movw	r24, r22
    2fca:	8e 01       	movw	r16, r28
    2fcc:	05 5b       	subi	r16, 0xB5	; 181
    2fce:	1f 4f       	sbci	r17, 0xFF	; 255
    2fd0:	bc 01       	movw	r22, r24
    2fd2:	cd 01       	movw	r24, r26
    2fd4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2fd8:	dc 01       	movw	r26, r24
    2fda:	cb 01       	movw	r24, r22
    2fdc:	f8 01       	movw	r30, r16
    2fde:	91 83       	std	Z+1, r25	; 0x01
    2fe0:	80 83       	st	Z, r24
    2fe2:	1f c0       	rjmp	.+62     	; 0x3022 <LCD_displayCharacter+0x2a4>
    2fe4:	fe 01       	movw	r30, r28
    2fe6:	e7 5b       	subi	r30, 0xB7	; 183
    2fe8:	ff 4f       	sbci	r31, 0xFF	; 255
    2fea:	89 e1       	ldi	r24, 0x19	; 25
    2fec:	90 e0       	ldi	r25, 0x00	; 0
    2fee:	91 83       	std	Z+1, r25	; 0x01
    2ff0:	80 83       	st	Z, r24
    2ff2:	fe 01       	movw	r30, r28
    2ff4:	e7 5b       	subi	r30, 0xB7	; 183
    2ff6:	ff 4f       	sbci	r31, 0xFF	; 255
    2ff8:	80 81       	ld	r24, Z
    2ffa:	91 81       	ldd	r25, Z+1	; 0x01
    2ffc:	01 97       	sbiw	r24, 0x01	; 1
    2ffe:	f1 f7       	brne	.-4      	; 0x2ffc <LCD_displayCharacter+0x27e>
    3000:	fe 01       	movw	r30, r28
    3002:	e7 5b       	subi	r30, 0xB7	; 183
    3004:	ff 4f       	sbci	r31, 0xFF	; 255
    3006:	91 83       	std	Z+1, r25	; 0x01
    3008:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    300a:	de 01       	movw	r26, r28
    300c:	a5 5b       	subi	r26, 0xB5	; 181
    300e:	bf 4f       	sbci	r27, 0xFF	; 255
    3010:	fe 01       	movw	r30, r28
    3012:	e5 5b       	subi	r30, 0xB5	; 181
    3014:	ff 4f       	sbci	r31, 0xFF	; 255
    3016:	80 81       	ld	r24, Z
    3018:	91 81       	ldd	r25, Z+1	; 0x01
    301a:	01 97       	sbiw	r24, 0x01	; 1
    301c:	11 96       	adiw	r26, 0x01	; 1
    301e:	9c 93       	st	X, r25
    3020:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3022:	fe 01       	movw	r30, r28
    3024:	e5 5b       	subi	r30, 0xB5	; 181
    3026:	ff 4f       	sbci	r31, 0xFF	; 255
    3028:	80 81       	ld	r24, Z
    302a:	91 81       	ldd	r25, Z+1	; 0x01
    302c:	00 97       	sbiw	r24, 0x00	; 0
    302e:	d1 f6       	brne	.-76     	; 0x2fe4 <LCD_displayCharacter+0x266>
    3030:	27 c0       	rjmp	.+78     	; 0x3080 <LCD_displayCharacter+0x302>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3032:	8e 01       	movw	r16, r28
    3034:	05 5b       	subi	r16, 0xB5	; 181
    3036:	1f 4f       	sbci	r17, 0xFF	; 255
    3038:	fe 01       	movw	r30, r28
    303a:	e3 5b       	subi	r30, 0xB3	; 179
    303c:	ff 4f       	sbci	r31, 0xFF	; 255
    303e:	60 81       	ld	r22, Z
    3040:	71 81       	ldd	r23, Z+1	; 0x01
    3042:	82 81       	ldd	r24, Z+2	; 0x02
    3044:	93 81       	ldd	r25, Z+3	; 0x03
    3046:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    304a:	dc 01       	movw	r26, r24
    304c:	cb 01       	movw	r24, r22
    304e:	f8 01       	movw	r30, r16
    3050:	91 83       	std	Z+1, r25	; 0x01
    3052:	80 83       	st	Z, r24
    3054:	de 01       	movw	r26, r28
    3056:	a9 5b       	subi	r26, 0xB9	; 185
    3058:	bf 4f       	sbci	r27, 0xFF	; 255
    305a:	fe 01       	movw	r30, r28
    305c:	e5 5b       	subi	r30, 0xB5	; 181
    305e:	ff 4f       	sbci	r31, 0xFF	; 255
    3060:	80 81       	ld	r24, Z
    3062:	91 81       	ldd	r25, Z+1	; 0x01
    3064:	8d 93       	st	X+, r24
    3066:	9c 93       	st	X, r25
    3068:	fe 01       	movw	r30, r28
    306a:	e9 5b       	subi	r30, 0xB9	; 185
    306c:	ff 4f       	sbci	r31, 0xFF	; 255
    306e:	80 81       	ld	r24, Z
    3070:	91 81       	ldd	r25, Z+1	; 0x01
    3072:	01 97       	sbiw	r24, 0x01	; 1
    3074:	f1 f7       	brne	.-4      	; 0x3072 <LCD_displayCharacter+0x2f4>
    3076:	fe 01       	movw	r30, r28
    3078:	e9 5b       	subi	r30, 0xB9	; 185
    307a:	ff 4f       	sbci	r31, 0xFF	; 255
    307c:	91 83       	std	Z+1, r25	; 0x01
    307e:	80 83       	st	Z, r24
	_delay_ms(1); /* 290-200 = 190ns */

#if(LCD_DATA_BIT_MODE == 4)

	GPIO_writePin(LCD_DATA_PORT,LCD_DB4,GET_BIT(character,4));
    3080:	fe 01       	movw	r30, r28
    3082:	ed 59       	subi	r30, 0x9D	; 157
    3084:	ff 4f       	sbci	r31, 0xFF	; 255
    3086:	80 81       	ld	r24, Z
    3088:	88 2f       	mov	r24, r24
    308a:	90 e0       	ldi	r25, 0x00	; 0
    308c:	80 71       	andi	r24, 0x10	; 16
    308e:	90 70       	andi	r25, 0x00	; 0
    3090:	95 95       	asr	r25
    3092:	87 95       	ror	r24
    3094:	95 95       	asr	r25
    3096:	87 95       	ror	r24
    3098:	95 95       	asr	r25
    309a:	87 95       	ror	r24
    309c:	95 95       	asr	r25
    309e:	87 95       	ror	r24
    30a0:	98 2f       	mov	r25, r24
    30a2:	82 e0       	ldi	r24, 0x02	; 2
    30a4:	63 e0       	ldi	r22, 0x03	; 3
    30a6:	49 2f       	mov	r20, r25
    30a8:	0e 94 13 0d 	call	0x1a26	; 0x1a26 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT,LCD_DB5,GET_BIT(character,5));
    30ac:	fe 01       	movw	r30, r28
    30ae:	ed 59       	subi	r30, 0x9D	; 157
    30b0:	ff 4f       	sbci	r31, 0xFF	; 255
    30b2:	80 81       	ld	r24, Z
    30b4:	88 2f       	mov	r24, r24
    30b6:	90 e0       	ldi	r25, 0x00	; 0
    30b8:	80 72       	andi	r24, 0x20	; 32
    30ba:	90 70       	andi	r25, 0x00	; 0
    30bc:	95 95       	asr	r25
    30be:	87 95       	ror	r24
    30c0:	95 95       	asr	r25
    30c2:	87 95       	ror	r24
    30c4:	95 95       	asr	r25
    30c6:	87 95       	ror	r24
    30c8:	95 95       	asr	r25
    30ca:	87 95       	ror	r24
    30cc:	95 95       	asr	r25
    30ce:	87 95       	ror	r24
    30d0:	98 2f       	mov	r25, r24
    30d2:	82 e0       	ldi	r24, 0x02	; 2
    30d4:	64 e0       	ldi	r22, 0x04	; 4
    30d6:	49 2f       	mov	r20, r25
    30d8:	0e 94 13 0d 	call	0x1a26	; 0x1a26 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT,LCD_DB6,GET_BIT(character,6));
    30dc:	fe 01       	movw	r30, r28
    30de:	ed 59       	subi	r30, 0x9D	; 157
    30e0:	ff 4f       	sbci	r31, 0xFF	; 255
    30e2:	80 81       	ld	r24, Z
    30e4:	88 2f       	mov	r24, r24
    30e6:	90 e0       	ldi	r25, 0x00	; 0
    30e8:	80 74       	andi	r24, 0x40	; 64
    30ea:	90 70       	andi	r25, 0x00	; 0
    30ec:	08 2e       	mov	r0, r24
    30ee:	89 2f       	mov	r24, r25
    30f0:	00 0c       	add	r0, r0
    30f2:	88 1f       	adc	r24, r24
    30f4:	99 0b       	sbc	r25, r25
    30f6:	00 0c       	add	r0, r0
    30f8:	88 1f       	adc	r24, r24
    30fa:	99 1f       	adc	r25, r25
    30fc:	98 2f       	mov	r25, r24
    30fe:	82 e0       	ldi	r24, 0x02	; 2
    3100:	65 e0       	ldi	r22, 0x05	; 5
    3102:	49 2f       	mov	r20, r25
    3104:	0e 94 13 0d 	call	0x1a26	; 0x1a26 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT,LCD_DB7,GET_BIT(character,7));
    3108:	fe 01       	movw	r30, r28
    310a:	ed 59       	subi	r30, 0x9D	; 157
    310c:	ff 4f       	sbci	r31, 0xFF	; 255
    310e:	80 81       	ld	r24, Z
    3110:	98 2f       	mov	r25, r24
    3112:	99 1f       	adc	r25, r25
    3114:	99 27       	eor	r25, r25
    3116:	99 1f       	adc	r25, r25
    3118:	82 e0       	ldi	r24, 0x02	; 2
    311a:	66 e0       	ldi	r22, 0x06	; 6
    311c:	49 2f       	mov	r20, r25
    311e:	0e 94 13 0d 	call	0x1a26	; 0x1a26 <GPIO_writePin>
    3122:	fe 01       	movw	r30, r28
    3124:	ed 5b       	subi	r30, 0xBD	; 189
    3126:	ff 4f       	sbci	r31, 0xFF	; 255
    3128:	80 e0       	ldi	r24, 0x00	; 0
    312a:	90 e0       	ldi	r25, 0x00	; 0
    312c:	a0 e8       	ldi	r26, 0x80	; 128
    312e:	bf e3       	ldi	r27, 0x3F	; 63
    3130:	80 83       	st	Z, r24
    3132:	91 83       	std	Z+1, r25	; 0x01
    3134:	a2 83       	std	Z+2, r26	; 0x02
    3136:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3138:	8e 01       	movw	r16, r28
    313a:	01 5c       	subi	r16, 0xC1	; 193
    313c:	1f 4f       	sbci	r17, 0xFF	; 255
    313e:	fe 01       	movw	r30, r28
    3140:	ed 5b       	subi	r30, 0xBD	; 189
    3142:	ff 4f       	sbci	r31, 0xFF	; 255
    3144:	60 81       	ld	r22, Z
    3146:	71 81       	ldd	r23, Z+1	; 0x01
    3148:	82 81       	ldd	r24, Z+2	; 0x02
    314a:	93 81       	ldd	r25, Z+3	; 0x03
    314c:	20 e0       	ldi	r18, 0x00	; 0
    314e:	30 e0       	ldi	r19, 0x00	; 0
    3150:	4a e7       	ldi	r20, 0x7A	; 122
    3152:	53 e4       	ldi	r21, 0x43	; 67
    3154:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3158:	dc 01       	movw	r26, r24
    315a:	cb 01       	movw	r24, r22
    315c:	f8 01       	movw	r30, r16
    315e:	80 83       	st	Z, r24
    3160:	91 83       	std	Z+1, r25	; 0x01
    3162:	a2 83       	std	Z+2, r26	; 0x02
    3164:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3166:	fe 01       	movw	r30, r28
    3168:	ff 96       	adiw	r30, 0x3f	; 63
    316a:	60 81       	ld	r22, Z
    316c:	71 81       	ldd	r23, Z+1	; 0x01
    316e:	82 81       	ldd	r24, Z+2	; 0x02
    3170:	93 81       	ldd	r25, Z+3	; 0x03
    3172:	20 e0       	ldi	r18, 0x00	; 0
    3174:	30 e0       	ldi	r19, 0x00	; 0
    3176:	40 e8       	ldi	r20, 0x80	; 128
    3178:	5f e3       	ldi	r21, 0x3F	; 63
    317a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    317e:	88 23       	and	r24, r24
    3180:	2c f4       	brge	.+10     	; 0x318c <LCD_displayCharacter+0x40e>
		__ticks = 1;
    3182:	81 e0       	ldi	r24, 0x01	; 1
    3184:	90 e0       	ldi	r25, 0x00	; 0
    3186:	9e af       	std	Y+62, r25	; 0x3e
    3188:	8d af       	std	Y+61, r24	; 0x3d
    318a:	46 c0       	rjmp	.+140    	; 0x3218 <LCD_displayCharacter+0x49a>
	else if (__tmp > 65535)
    318c:	fe 01       	movw	r30, r28
    318e:	ff 96       	adiw	r30, 0x3f	; 63
    3190:	60 81       	ld	r22, Z
    3192:	71 81       	ldd	r23, Z+1	; 0x01
    3194:	82 81       	ldd	r24, Z+2	; 0x02
    3196:	93 81       	ldd	r25, Z+3	; 0x03
    3198:	20 e0       	ldi	r18, 0x00	; 0
    319a:	3f ef       	ldi	r19, 0xFF	; 255
    319c:	4f e7       	ldi	r20, 0x7F	; 127
    319e:	57 e4       	ldi	r21, 0x47	; 71
    31a0:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    31a4:	18 16       	cp	r1, r24
    31a6:	64 f5       	brge	.+88     	; 0x3200 <LCD_displayCharacter+0x482>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    31a8:	fe 01       	movw	r30, r28
    31aa:	ed 5b       	subi	r30, 0xBD	; 189
    31ac:	ff 4f       	sbci	r31, 0xFF	; 255
    31ae:	60 81       	ld	r22, Z
    31b0:	71 81       	ldd	r23, Z+1	; 0x01
    31b2:	82 81       	ldd	r24, Z+2	; 0x02
    31b4:	93 81       	ldd	r25, Z+3	; 0x03
    31b6:	20 e0       	ldi	r18, 0x00	; 0
    31b8:	30 e0       	ldi	r19, 0x00	; 0
    31ba:	40 e2       	ldi	r20, 0x20	; 32
    31bc:	51 e4       	ldi	r21, 0x41	; 65
    31be:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    31c2:	dc 01       	movw	r26, r24
    31c4:	cb 01       	movw	r24, r22
    31c6:	bc 01       	movw	r22, r24
    31c8:	cd 01       	movw	r24, r26
    31ca:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    31ce:	dc 01       	movw	r26, r24
    31d0:	cb 01       	movw	r24, r22
    31d2:	9e af       	std	Y+62, r25	; 0x3e
    31d4:	8d af       	std	Y+61, r24	; 0x3d
    31d6:	0f c0       	rjmp	.+30     	; 0x31f6 <LCD_displayCharacter+0x478>
    31d8:	89 e1       	ldi	r24, 0x19	; 25
    31da:	90 e0       	ldi	r25, 0x00	; 0
    31dc:	9c af       	std	Y+60, r25	; 0x3c
    31de:	8b af       	std	Y+59, r24	; 0x3b
    31e0:	8b ad       	ldd	r24, Y+59	; 0x3b
    31e2:	9c ad       	ldd	r25, Y+60	; 0x3c
    31e4:	01 97       	sbiw	r24, 0x01	; 1
    31e6:	f1 f7       	brne	.-4      	; 0x31e4 <LCD_displayCharacter+0x466>
    31e8:	9c af       	std	Y+60, r25	; 0x3c
    31ea:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    31ec:	8d ad       	ldd	r24, Y+61	; 0x3d
    31ee:	9e ad       	ldd	r25, Y+62	; 0x3e
    31f0:	01 97       	sbiw	r24, 0x01	; 1
    31f2:	9e af       	std	Y+62, r25	; 0x3e
    31f4:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    31f6:	8d ad       	ldd	r24, Y+61	; 0x3d
    31f8:	9e ad       	ldd	r25, Y+62	; 0x3e
    31fa:	00 97       	sbiw	r24, 0x00	; 0
    31fc:	69 f7       	brne	.-38     	; 0x31d8 <LCD_displayCharacter+0x45a>
    31fe:	16 c0       	rjmp	.+44     	; 0x322c <LCD_displayCharacter+0x4ae>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3200:	fe 01       	movw	r30, r28
    3202:	ff 96       	adiw	r30, 0x3f	; 63
    3204:	60 81       	ld	r22, Z
    3206:	71 81       	ldd	r23, Z+1	; 0x01
    3208:	82 81       	ldd	r24, Z+2	; 0x02
    320a:	93 81       	ldd	r25, Z+3	; 0x03
    320c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3210:	dc 01       	movw	r26, r24
    3212:	cb 01       	movw	r24, r22
    3214:	9e af       	std	Y+62, r25	; 0x3e
    3216:	8d af       	std	Y+61, r24	; 0x3d
    3218:	8d ad       	ldd	r24, Y+61	; 0x3d
    321a:	9e ad       	ldd	r25, Y+62	; 0x3e
    321c:	9a af       	std	Y+58, r25	; 0x3a
    321e:	89 af       	std	Y+57, r24	; 0x39
    3220:	89 ad       	ldd	r24, Y+57	; 0x39
    3222:	9a ad       	ldd	r25, Y+58	; 0x3a
    3224:	01 97       	sbiw	r24, 0x01	; 1
    3226:	f1 f7       	brne	.-4      	; 0x3224 <LCD_displayCharacter+0x4a6>
    3228:	9a af       	std	Y+58, r25	; 0x3a
    322a:	89 af       	std	Y+57, r24	; 0x39

	_delay_ms(1); /* 100ns */
	GPIO_writePin(LCD_ENABLE_PORT,LCD_ENABLE_PIN,LOW);
    322c:	83 e0       	ldi	r24, 0x03	; 3
    322e:	65 e0       	ldi	r22, 0x05	; 5
    3230:	40 e0       	ldi	r20, 0x00	; 0
    3232:	0e 94 13 0d 	call	0x1a26	; 0x1a26 <GPIO_writePin>
    3236:	80 e0       	ldi	r24, 0x00	; 0
    3238:	90 e0       	ldi	r25, 0x00	; 0
    323a:	a0 e8       	ldi	r26, 0x80	; 128
    323c:	bf e3       	ldi	r27, 0x3F	; 63
    323e:	8d ab       	std	Y+53, r24	; 0x35
    3240:	9e ab       	std	Y+54, r25	; 0x36
    3242:	af ab       	std	Y+55, r26	; 0x37
    3244:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3246:	6d a9       	ldd	r22, Y+53	; 0x35
    3248:	7e a9       	ldd	r23, Y+54	; 0x36
    324a:	8f a9       	ldd	r24, Y+55	; 0x37
    324c:	98 ad       	ldd	r25, Y+56	; 0x38
    324e:	20 e0       	ldi	r18, 0x00	; 0
    3250:	30 e0       	ldi	r19, 0x00	; 0
    3252:	4a e7       	ldi	r20, 0x7A	; 122
    3254:	53 e4       	ldi	r21, 0x43	; 67
    3256:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    325a:	dc 01       	movw	r26, r24
    325c:	cb 01       	movw	r24, r22
    325e:	89 ab       	std	Y+49, r24	; 0x31
    3260:	9a ab       	std	Y+50, r25	; 0x32
    3262:	ab ab       	std	Y+51, r26	; 0x33
    3264:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    3266:	69 a9       	ldd	r22, Y+49	; 0x31
    3268:	7a a9       	ldd	r23, Y+50	; 0x32
    326a:	8b a9       	ldd	r24, Y+51	; 0x33
    326c:	9c a9       	ldd	r25, Y+52	; 0x34
    326e:	20 e0       	ldi	r18, 0x00	; 0
    3270:	30 e0       	ldi	r19, 0x00	; 0
    3272:	40 e8       	ldi	r20, 0x80	; 128
    3274:	5f e3       	ldi	r21, 0x3F	; 63
    3276:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    327a:	88 23       	and	r24, r24
    327c:	2c f4       	brge	.+10     	; 0x3288 <LCD_displayCharacter+0x50a>
		__ticks = 1;
    327e:	81 e0       	ldi	r24, 0x01	; 1
    3280:	90 e0       	ldi	r25, 0x00	; 0
    3282:	98 ab       	std	Y+48, r25	; 0x30
    3284:	8f a7       	std	Y+47, r24	; 0x2f
    3286:	3f c0       	rjmp	.+126    	; 0x3306 <LCD_displayCharacter+0x588>
	else if (__tmp > 65535)
    3288:	69 a9       	ldd	r22, Y+49	; 0x31
    328a:	7a a9       	ldd	r23, Y+50	; 0x32
    328c:	8b a9       	ldd	r24, Y+51	; 0x33
    328e:	9c a9       	ldd	r25, Y+52	; 0x34
    3290:	20 e0       	ldi	r18, 0x00	; 0
    3292:	3f ef       	ldi	r19, 0xFF	; 255
    3294:	4f e7       	ldi	r20, 0x7F	; 127
    3296:	57 e4       	ldi	r21, 0x47	; 71
    3298:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    329c:	18 16       	cp	r1, r24
    329e:	4c f5       	brge	.+82     	; 0x32f2 <LCD_displayCharacter+0x574>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    32a0:	6d a9       	ldd	r22, Y+53	; 0x35
    32a2:	7e a9       	ldd	r23, Y+54	; 0x36
    32a4:	8f a9       	ldd	r24, Y+55	; 0x37
    32a6:	98 ad       	ldd	r25, Y+56	; 0x38
    32a8:	20 e0       	ldi	r18, 0x00	; 0
    32aa:	30 e0       	ldi	r19, 0x00	; 0
    32ac:	40 e2       	ldi	r20, 0x20	; 32
    32ae:	51 e4       	ldi	r21, 0x41	; 65
    32b0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    32b4:	dc 01       	movw	r26, r24
    32b6:	cb 01       	movw	r24, r22
    32b8:	bc 01       	movw	r22, r24
    32ba:	cd 01       	movw	r24, r26
    32bc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    32c0:	dc 01       	movw	r26, r24
    32c2:	cb 01       	movw	r24, r22
    32c4:	98 ab       	std	Y+48, r25	; 0x30
    32c6:	8f a7       	std	Y+47, r24	; 0x2f
    32c8:	0f c0       	rjmp	.+30     	; 0x32e8 <LCD_displayCharacter+0x56a>
    32ca:	89 e1       	ldi	r24, 0x19	; 25
    32cc:	90 e0       	ldi	r25, 0x00	; 0
    32ce:	9e a7       	std	Y+46, r25	; 0x2e
    32d0:	8d a7       	std	Y+45, r24	; 0x2d
    32d2:	8d a5       	ldd	r24, Y+45	; 0x2d
    32d4:	9e a5       	ldd	r25, Y+46	; 0x2e
    32d6:	01 97       	sbiw	r24, 0x01	; 1
    32d8:	f1 f7       	brne	.-4      	; 0x32d6 <LCD_displayCharacter+0x558>
    32da:	9e a7       	std	Y+46, r25	; 0x2e
    32dc:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    32de:	8f a5       	ldd	r24, Y+47	; 0x2f
    32e0:	98 a9       	ldd	r25, Y+48	; 0x30
    32e2:	01 97       	sbiw	r24, 0x01	; 1
    32e4:	98 ab       	std	Y+48, r25	; 0x30
    32e6:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    32e8:	8f a5       	ldd	r24, Y+47	; 0x2f
    32ea:	98 a9       	ldd	r25, Y+48	; 0x30
    32ec:	00 97       	sbiw	r24, 0x00	; 0
    32ee:	69 f7       	brne	.-38     	; 0x32ca <LCD_displayCharacter+0x54c>
    32f0:	14 c0       	rjmp	.+40     	; 0x331a <LCD_displayCharacter+0x59c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    32f2:	69 a9       	ldd	r22, Y+49	; 0x31
    32f4:	7a a9       	ldd	r23, Y+50	; 0x32
    32f6:	8b a9       	ldd	r24, Y+51	; 0x33
    32f8:	9c a9       	ldd	r25, Y+52	; 0x34
    32fa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    32fe:	dc 01       	movw	r26, r24
    3300:	cb 01       	movw	r24, r22
    3302:	98 ab       	std	Y+48, r25	; 0x30
    3304:	8f a7       	std	Y+47, r24	; 0x2f
    3306:	8f a5       	ldd	r24, Y+47	; 0x2f
    3308:	98 a9       	ldd	r25, Y+48	; 0x30
    330a:	9c a7       	std	Y+44, r25	; 0x2c
    330c:	8b a7       	std	Y+43, r24	; 0x2b
    330e:	8b a5       	ldd	r24, Y+43	; 0x2b
    3310:	9c a5       	ldd	r25, Y+44	; 0x2c
    3312:	01 97       	sbiw	r24, 0x01	; 1
    3314:	f1 f7       	brne	.-4      	; 0x3312 <LCD_displayCharacter+0x594>
    3316:	9c a7       	std	Y+44, r25	; 0x2c
    3318:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* 13ns */
	GPIO_writePin(LCD_ENABLE_PORT,LCD_ENABLE_PIN,HIGH);
    331a:	83 e0       	ldi	r24, 0x03	; 3
    331c:	65 e0       	ldi	r22, 0x05	; 5
    331e:	41 e0       	ldi	r20, 0x01	; 1
    3320:	0e 94 13 0d 	call	0x1a26	; 0x1a26 <GPIO_writePin>
    3324:	80 e0       	ldi	r24, 0x00	; 0
    3326:	90 e0       	ldi	r25, 0x00	; 0
    3328:	a0 e8       	ldi	r26, 0x80	; 128
    332a:	bf e3       	ldi	r27, 0x3F	; 63
    332c:	8f a3       	std	Y+39, r24	; 0x27
    332e:	98 a7       	std	Y+40, r25	; 0x28
    3330:	a9 a7       	std	Y+41, r26	; 0x29
    3332:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3334:	6f a1       	ldd	r22, Y+39	; 0x27
    3336:	78 a5       	ldd	r23, Y+40	; 0x28
    3338:	89 a5       	ldd	r24, Y+41	; 0x29
    333a:	9a a5       	ldd	r25, Y+42	; 0x2a
    333c:	20 e0       	ldi	r18, 0x00	; 0
    333e:	30 e0       	ldi	r19, 0x00	; 0
    3340:	4a e7       	ldi	r20, 0x7A	; 122
    3342:	53 e4       	ldi	r21, 0x43	; 67
    3344:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3348:	dc 01       	movw	r26, r24
    334a:	cb 01       	movw	r24, r22
    334c:	8b a3       	std	Y+35, r24	; 0x23
    334e:	9c a3       	std	Y+36, r25	; 0x24
    3350:	ad a3       	std	Y+37, r26	; 0x25
    3352:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    3354:	6b a1       	ldd	r22, Y+35	; 0x23
    3356:	7c a1       	ldd	r23, Y+36	; 0x24
    3358:	8d a1       	ldd	r24, Y+37	; 0x25
    335a:	9e a1       	ldd	r25, Y+38	; 0x26
    335c:	20 e0       	ldi	r18, 0x00	; 0
    335e:	30 e0       	ldi	r19, 0x00	; 0
    3360:	40 e8       	ldi	r20, 0x80	; 128
    3362:	5f e3       	ldi	r21, 0x3F	; 63
    3364:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3368:	88 23       	and	r24, r24
    336a:	2c f4       	brge	.+10     	; 0x3376 <LCD_displayCharacter+0x5f8>
		__ticks = 1;
    336c:	81 e0       	ldi	r24, 0x01	; 1
    336e:	90 e0       	ldi	r25, 0x00	; 0
    3370:	9a a3       	std	Y+34, r25	; 0x22
    3372:	89 a3       	std	Y+33, r24	; 0x21
    3374:	3f c0       	rjmp	.+126    	; 0x33f4 <LCD_displayCharacter+0x676>
	else if (__tmp > 65535)
    3376:	6b a1       	ldd	r22, Y+35	; 0x23
    3378:	7c a1       	ldd	r23, Y+36	; 0x24
    337a:	8d a1       	ldd	r24, Y+37	; 0x25
    337c:	9e a1       	ldd	r25, Y+38	; 0x26
    337e:	20 e0       	ldi	r18, 0x00	; 0
    3380:	3f ef       	ldi	r19, 0xFF	; 255
    3382:	4f e7       	ldi	r20, 0x7F	; 127
    3384:	57 e4       	ldi	r21, 0x47	; 71
    3386:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    338a:	18 16       	cp	r1, r24
    338c:	4c f5       	brge	.+82     	; 0x33e0 <LCD_displayCharacter+0x662>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    338e:	6f a1       	ldd	r22, Y+39	; 0x27
    3390:	78 a5       	ldd	r23, Y+40	; 0x28
    3392:	89 a5       	ldd	r24, Y+41	; 0x29
    3394:	9a a5       	ldd	r25, Y+42	; 0x2a
    3396:	20 e0       	ldi	r18, 0x00	; 0
    3398:	30 e0       	ldi	r19, 0x00	; 0
    339a:	40 e2       	ldi	r20, 0x20	; 32
    339c:	51 e4       	ldi	r21, 0x41	; 65
    339e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    33a2:	dc 01       	movw	r26, r24
    33a4:	cb 01       	movw	r24, r22
    33a6:	bc 01       	movw	r22, r24
    33a8:	cd 01       	movw	r24, r26
    33aa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    33ae:	dc 01       	movw	r26, r24
    33b0:	cb 01       	movw	r24, r22
    33b2:	9a a3       	std	Y+34, r25	; 0x22
    33b4:	89 a3       	std	Y+33, r24	; 0x21
    33b6:	0f c0       	rjmp	.+30     	; 0x33d6 <LCD_displayCharacter+0x658>
    33b8:	89 e1       	ldi	r24, 0x19	; 25
    33ba:	90 e0       	ldi	r25, 0x00	; 0
    33bc:	98 a3       	std	Y+32, r25	; 0x20
    33be:	8f 8f       	std	Y+31, r24	; 0x1f
    33c0:	8f 8d       	ldd	r24, Y+31	; 0x1f
    33c2:	98 a1       	ldd	r25, Y+32	; 0x20
    33c4:	01 97       	sbiw	r24, 0x01	; 1
    33c6:	f1 f7       	brne	.-4      	; 0x33c4 <LCD_displayCharacter+0x646>
    33c8:	98 a3       	std	Y+32, r25	; 0x20
    33ca:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    33cc:	89 a1       	ldd	r24, Y+33	; 0x21
    33ce:	9a a1       	ldd	r25, Y+34	; 0x22
    33d0:	01 97       	sbiw	r24, 0x01	; 1
    33d2:	9a a3       	std	Y+34, r25	; 0x22
    33d4:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    33d6:	89 a1       	ldd	r24, Y+33	; 0x21
    33d8:	9a a1       	ldd	r25, Y+34	; 0x22
    33da:	00 97       	sbiw	r24, 0x00	; 0
    33dc:	69 f7       	brne	.-38     	; 0x33b8 <LCD_displayCharacter+0x63a>
    33de:	14 c0       	rjmp	.+40     	; 0x3408 <LCD_displayCharacter+0x68a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    33e0:	6b a1       	ldd	r22, Y+35	; 0x23
    33e2:	7c a1       	ldd	r23, Y+36	; 0x24
    33e4:	8d a1       	ldd	r24, Y+37	; 0x25
    33e6:	9e a1       	ldd	r25, Y+38	; 0x26
    33e8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    33ec:	dc 01       	movw	r26, r24
    33ee:	cb 01       	movw	r24, r22
    33f0:	9a a3       	std	Y+34, r25	; 0x22
    33f2:	89 a3       	std	Y+33, r24	; 0x21
    33f4:	89 a1       	ldd	r24, Y+33	; 0x21
    33f6:	9a a1       	ldd	r25, Y+34	; 0x22
    33f8:	9e 8f       	std	Y+30, r25	; 0x1e
    33fa:	8d 8f       	std	Y+29, r24	; 0x1d
    33fc:	8d 8d       	ldd	r24, Y+29	; 0x1d
    33fe:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3400:	01 97       	sbiw	r24, 0x01	; 1
    3402:	f1 f7       	brne	.-4      	; 0x3400 <LCD_displayCharacter+0x682>
    3404:	9e 8f       	std	Y+30, r25	; 0x1e
    3406:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* 13ns */

	GPIO_writePin(LCD_DATA_PORT,LCD_DB4,GET_BIT(character,0));
    3408:	fe 01       	movw	r30, r28
    340a:	ed 59       	subi	r30, 0x9D	; 157
    340c:	ff 4f       	sbci	r31, 0xFF	; 255
    340e:	80 81       	ld	r24, Z
    3410:	98 2f       	mov	r25, r24
    3412:	91 70       	andi	r25, 0x01	; 1
    3414:	82 e0       	ldi	r24, 0x02	; 2
    3416:	63 e0       	ldi	r22, 0x03	; 3
    3418:	49 2f       	mov	r20, r25
    341a:	0e 94 13 0d 	call	0x1a26	; 0x1a26 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT,LCD_DB5,GET_BIT(character,1));
    341e:	fe 01       	movw	r30, r28
    3420:	ed 59       	subi	r30, 0x9D	; 157
    3422:	ff 4f       	sbci	r31, 0xFF	; 255
    3424:	80 81       	ld	r24, Z
    3426:	88 2f       	mov	r24, r24
    3428:	90 e0       	ldi	r25, 0x00	; 0
    342a:	82 70       	andi	r24, 0x02	; 2
    342c:	90 70       	andi	r25, 0x00	; 0
    342e:	95 95       	asr	r25
    3430:	87 95       	ror	r24
    3432:	98 2f       	mov	r25, r24
    3434:	82 e0       	ldi	r24, 0x02	; 2
    3436:	64 e0       	ldi	r22, 0x04	; 4
    3438:	49 2f       	mov	r20, r25
    343a:	0e 94 13 0d 	call	0x1a26	; 0x1a26 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT,LCD_DB6,GET_BIT(character,2));
    343e:	fe 01       	movw	r30, r28
    3440:	ed 59       	subi	r30, 0x9D	; 157
    3442:	ff 4f       	sbci	r31, 0xFF	; 255
    3444:	80 81       	ld	r24, Z
    3446:	88 2f       	mov	r24, r24
    3448:	90 e0       	ldi	r25, 0x00	; 0
    344a:	84 70       	andi	r24, 0x04	; 4
    344c:	90 70       	andi	r25, 0x00	; 0
    344e:	95 95       	asr	r25
    3450:	87 95       	ror	r24
    3452:	95 95       	asr	r25
    3454:	87 95       	ror	r24
    3456:	98 2f       	mov	r25, r24
    3458:	82 e0       	ldi	r24, 0x02	; 2
    345a:	65 e0       	ldi	r22, 0x05	; 5
    345c:	49 2f       	mov	r20, r25
    345e:	0e 94 13 0d 	call	0x1a26	; 0x1a26 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT,LCD_DB7,GET_BIT(character,3));
    3462:	fe 01       	movw	r30, r28
    3464:	ed 59       	subi	r30, 0x9D	; 157
    3466:	ff 4f       	sbci	r31, 0xFF	; 255
    3468:	80 81       	ld	r24, Z
    346a:	88 2f       	mov	r24, r24
    346c:	90 e0       	ldi	r25, 0x00	; 0
    346e:	88 70       	andi	r24, 0x08	; 8
    3470:	90 70       	andi	r25, 0x00	; 0
    3472:	95 95       	asr	r25
    3474:	87 95       	ror	r24
    3476:	95 95       	asr	r25
    3478:	87 95       	ror	r24
    347a:	95 95       	asr	r25
    347c:	87 95       	ror	r24
    347e:	98 2f       	mov	r25, r24
    3480:	82 e0       	ldi	r24, 0x02	; 2
    3482:	66 e0       	ldi	r22, 0x06	; 6
    3484:	49 2f       	mov	r20, r25
    3486:	0e 94 13 0d 	call	0x1a26	; 0x1a26 <GPIO_writePin>
    348a:	80 e0       	ldi	r24, 0x00	; 0
    348c:	90 e0       	ldi	r25, 0x00	; 0
    348e:	a0 e8       	ldi	r26, 0x80	; 128
    3490:	bf e3       	ldi	r27, 0x3F	; 63
    3492:	89 8f       	std	Y+25, r24	; 0x19
    3494:	9a 8f       	std	Y+26, r25	; 0x1a
    3496:	ab 8f       	std	Y+27, r26	; 0x1b
    3498:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    349a:	69 8d       	ldd	r22, Y+25	; 0x19
    349c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    349e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    34a0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    34a2:	20 e0       	ldi	r18, 0x00	; 0
    34a4:	30 e0       	ldi	r19, 0x00	; 0
    34a6:	4a e7       	ldi	r20, 0x7A	; 122
    34a8:	53 e4       	ldi	r21, 0x43	; 67
    34aa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    34ae:	dc 01       	movw	r26, r24
    34b0:	cb 01       	movw	r24, r22
    34b2:	8d 8b       	std	Y+21, r24	; 0x15
    34b4:	9e 8b       	std	Y+22, r25	; 0x16
    34b6:	af 8b       	std	Y+23, r26	; 0x17
    34b8:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    34ba:	6d 89       	ldd	r22, Y+21	; 0x15
    34bc:	7e 89       	ldd	r23, Y+22	; 0x16
    34be:	8f 89       	ldd	r24, Y+23	; 0x17
    34c0:	98 8d       	ldd	r25, Y+24	; 0x18
    34c2:	20 e0       	ldi	r18, 0x00	; 0
    34c4:	30 e0       	ldi	r19, 0x00	; 0
    34c6:	40 e8       	ldi	r20, 0x80	; 128
    34c8:	5f e3       	ldi	r21, 0x3F	; 63
    34ca:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    34ce:	88 23       	and	r24, r24
    34d0:	2c f4       	brge	.+10     	; 0x34dc <LCD_displayCharacter+0x75e>
		__ticks = 1;
    34d2:	81 e0       	ldi	r24, 0x01	; 1
    34d4:	90 e0       	ldi	r25, 0x00	; 0
    34d6:	9c 8b       	std	Y+20, r25	; 0x14
    34d8:	8b 8b       	std	Y+19, r24	; 0x13
    34da:	3f c0       	rjmp	.+126    	; 0x355a <LCD_displayCharacter+0x7dc>
	else if (__tmp > 65535)
    34dc:	6d 89       	ldd	r22, Y+21	; 0x15
    34de:	7e 89       	ldd	r23, Y+22	; 0x16
    34e0:	8f 89       	ldd	r24, Y+23	; 0x17
    34e2:	98 8d       	ldd	r25, Y+24	; 0x18
    34e4:	20 e0       	ldi	r18, 0x00	; 0
    34e6:	3f ef       	ldi	r19, 0xFF	; 255
    34e8:	4f e7       	ldi	r20, 0x7F	; 127
    34ea:	57 e4       	ldi	r21, 0x47	; 71
    34ec:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    34f0:	18 16       	cp	r1, r24
    34f2:	4c f5       	brge	.+82     	; 0x3546 <LCD_displayCharacter+0x7c8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    34f4:	69 8d       	ldd	r22, Y+25	; 0x19
    34f6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    34f8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    34fa:	9c 8d       	ldd	r25, Y+28	; 0x1c
    34fc:	20 e0       	ldi	r18, 0x00	; 0
    34fe:	30 e0       	ldi	r19, 0x00	; 0
    3500:	40 e2       	ldi	r20, 0x20	; 32
    3502:	51 e4       	ldi	r21, 0x41	; 65
    3504:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3508:	dc 01       	movw	r26, r24
    350a:	cb 01       	movw	r24, r22
    350c:	bc 01       	movw	r22, r24
    350e:	cd 01       	movw	r24, r26
    3510:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3514:	dc 01       	movw	r26, r24
    3516:	cb 01       	movw	r24, r22
    3518:	9c 8b       	std	Y+20, r25	; 0x14
    351a:	8b 8b       	std	Y+19, r24	; 0x13
    351c:	0f c0       	rjmp	.+30     	; 0x353c <LCD_displayCharacter+0x7be>
    351e:	89 e1       	ldi	r24, 0x19	; 25
    3520:	90 e0       	ldi	r25, 0x00	; 0
    3522:	9a 8b       	std	Y+18, r25	; 0x12
    3524:	89 8b       	std	Y+17, r24	; 0x11
    3526:	89 89       	ldd	r24, Y+17	; 0x11
    3528:	9a 89       	ldd	r25, Y+18	; 0x12
    352a:	01 97       	sbiw	r24, 0x01	; 1
    352c:	f1 f7       	brne	.-4      	; 0x352a <LCD_displayCharacter+0x7ac>
    352e:	9a 8b       	std	Y+18, r25	; 0x12
    3530:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3532:	8b 89       	ldd	r24, Y+19	; 0x13
    3534:	9c 89       	ldd	r25, Y+20	; 0x14
    3536:	01 97       	sbiw	r24, 0x01	; 1
    3538:	9c 8b       	std	Y+20, r25	; 0x14
    353a:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    353c:	8b 89       	ldd	r24, Y+19	; 0x13
    353e:	9c 89       	ldd	r25, Y+20	; 0x14
    3540:	00 97       	sbiw	r24, 0x00	; 0
    3542:	69 f7       	brne	.-38     	; 0x351e <LCD_displayCharacter+0x7a0>
    3544:	14 c0       	rjmp	.+40     	; 0x356e <LCD_displayCharacter+0x7f0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3546:	6d 89       	ldd	r22, Y+21	; 0x15
    3548:	7e 89       	ldd	r23, Y+22	; 0x16
    354a:	8f 89       	ldd	r24, Y+23	; 0x17
    354c:	98 8d       	ldd	r25, Y+24	; 0x18
    354e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3552:	dc 01       	movw	r26, r24
    3554:	cb 01       	movw	r24, r22
    3556:	9c 8b       	std	Y+20, r25	; 0x14
    3558:	8b 8b       	std	Y+19, r24	; 0x13
    355a:	8b 89       	ldd	r24, Y+19	; 0x13
    355c:	9c 89       	ldd	r25, Y+20	; 0x14
    355e:	98 8b       	std	Y+16, r25	; 0x10
    3560:	8f 87       	std	Y+15, r24	; 0x0f
    3562:	8f 85       	ldd	r24, Y+15	; 0x0f
    3564:	98 89       	ldd	r25, Y+16	; 0x10
    3566:	01 97       	sbiw	r24, 0x01	; 1
    3568:	f1 f7       	brne	.-4      	; 0x3566 <LCD_displayCharacter+0x7e8>
    356a:	98 8b       	std	Y+16, r25	; 0x10
    356c:	8f 87       	std	Y+15, r24	; 0x0f

	_delay_ms(1); /* 100ns */
	GPIO_writePin(LCD_ENABLE_PORT,LCD_ENABLE_PIN,LOW);
    356e:	83 e0       	ldi	r24, 0x03	; 3
    3570:	65 e0       	ldi	r22, 0x05	; 5
    3572:	40 e0       	ldi	r20, 0x00	; 0
    3574:	0e 94 13 0d 	call	0x1a26	; 0x1a26 <GPIO_writePin>
    3578:	80 e0       	ldi	r24, 0x00	; 0
    357a:	90 e0       	ldi	r25, 0x00	; 0
    357c:	a0 e8       	ldi	r26, 0x80	; 128
    357e:	bf e3       	ldi	r27, 0x3F	; 63
    3580:	8b 87       	std	Y+11, r24	; 0x0b
    3582:	9c 87       	std	Y+12, r25	; 0x0c
    3584:	ad 87       	std	Y+13, r26	; 0x0d
    3586:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3588:	6b 85       	ldd	r22, Y+11	; 0x0b
    358a:	7c 85       	ldd	r23, Y+12	; 0x0c
    358c:	8d 85       	ldd	r24, Y+13	; 0x0d
    358e:	9e 85       	ldd	r25, Y+14	; 0x0e
    3590:	20 e0       	ldi	r18, 0x00	; 0
    3592:	30 e0       	ldi	r19, 0x00	; 0
    3594:	4a e7       	ldi	r20, 0x7A	; 122
    3596:	53 e4       	ldi	r21, 0x43	; 67
    3598:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    359c:	dc 01       	movw	r26, r24
    359e:	cb 01       	movw	r24, r22
    35a0:	8f 83       	std	Y+7, r24	; 0x07
    35a2:	98 87       	std	Y+8, r25	; 0x08
    35a4:	a9 87       	std	Y+9, r26	; 0x09
    35a6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    35a8:	6f 81       	ldd	r22, Y+7	; 0x07
    35aa:	78 85       	ldd	r23, Y+8	; 0x08
    35ac:	89 85       	ldd	r24, Y+9	; 0x09
    35ae:	9a 85       	ldd	r25, Y+10	; 0x0a
    35b0:	20 e0       	ldi	r18, 0x00	; 0
    35b2:	30 e0       	ldi	r19, 0x00	; 0
    35b4:	40 e8       	ldi	r20, 0x80	; 128
    35b6:	5f e3       	ldi	r21, 0x3F	; 63
    35b8:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    35bc:	88 23       	and	r24, r24
    35be:	2c f4       	brge	.+10     	; 0x35ca <LCD_displayCharacter+0x84c>
		__ticks = 1;
    35c0:	81 e0       	ldi	r24, 0x01	; 1
    35c2:	90 e0       	ldi	r25, 0x00	; 0
    35c4:	9e 83       	std	Y+6, r25	; 0x06
    35c6:	8d 83       	std	Y+5, r24	; 0x05
    35c8:	3f c0       	rjmp	.+126    	; 0x3648 <LCD_displayCharacter+0x8ca>
	else if (__tmp > 65535)
    35ca:	6f 81       	ldd	r22, Y+7	; 0x07
    35cc:	78 85       	ldd	r23, Y+8	; 0x08
    35ce:	89 85       	ldd	r24, Y+9	; 0x09
    35d0:	9a 85       	ldd	r25, Y+10	; 0x0a
    35d2:	20 e0       	ldi	r18, 0x00	; 0
    35d4:	3f ef       	ldi	r19, 0xFF	; 255
    35d6:	4f e7       	ldi	r20, 0x7F	; 127
    35d8:	57 e4       	ldi	r21, 0x47	; 71
    35da:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    35de:	18 16       	cp	r1, r24
    35e0:	4c f5       	brge	.+82     	; 0x3634 <LCD_displayCharacter+0x8b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    35e2:	6b 85       	ldd	r22, Y+11	; 0x0b
    35e4:	7c 85       	ldd	r23, Y+12	; 0x0c
    35e6:	8d 85       	ldd	r24, Y+13	; 0x0d
    35e8:	9e 85       	ldd	r25, Y+14	; 0x0e
    35ea:	20 e0       	ldi	r18, 0x00	; 0
    35ec:	30 e0       	ldi	r19, 0x00	; 0
    35ee:	40 e2       	ldi	r20, 0x20	; 32
    35f0:	51 e4       	ldi	r21, 0x41	; 65
    35f2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    35f6:	dc 01       	movw	r26, r24
    35f8:	cb 01       	movw	r24, r22
    35fa:	bc 01       	movw	r22, r24
    35fc:	cd 01       	movw	r24, r26
    35fe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3602:	dc 01       	movw	r26, r24
    3604:	cb 01       	movw	r24, r22
    3606:	9e 83       	std	Y+6, r25	; 0x06
    3608:	8d 83       	std	Y+5, r24	; 0x05
    360a:	0f c0       	rjmp	.+30     	; 0x362a <LCD_displayCharacter+0x8ac>
    360c:	89 e1       	ldi	r24, 0x19	; 25
    360e:	90 e0       	ldi	r25, 0x00	; 0
    3610:	9c 83       	std	Y+4, r25	; 0x04
    3612:	8b 83       	std	Y+3, r24	; 0x03
    3614:	8b 81       	ldd	r24, Y+3	; 0x03
    3616:	9c 81       	ldd	r25, Y+4	; 0x04
    3618:	01 97       	sbiw	r24, 0x01	; 1
    361a:	f1 f7       	brne	.-4      	; 0x3618 <LCD_displayCharacter+0x89a>
    361c:	9c 83       	std	Y+4, r25	; 0x04
    361e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3620:	8d 81       	ldd	r24, Y+5	; 0x05
    3622:	9e 81       	ldd	r25, Y+6	; 0x06
    3624:	01 97       	sbiw	r24, 0x01	; 1
    3626:	9e 83       	std	Y+6, r25	; 0x06
    3628:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    362a:	8d 81       	ldd	r24, Y+5	; 0x05
    362c:	9e 81       	ldd	r25, Y+6	; 0x06
    362e:	00 97       	sbiw	r24, 0x00	; 0
    3630:	69 f7       	brne	.-38     	; 0x360c <LCD_displayCharacter+0x88e>
    3632:	14 c0       	rjmp	.+40     	; 0x365c <LCD_displayCharacter+0x8de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3634:	6f 81       	ldd	r22, Y+7	; 0x07
    3636:	78 85       	ldd	r23, Y+8	; 0x08
    3638:	89 85       	ldd	r24, Y+9	; 0x09
    363a:	9a 85       	ldd	r25, Y+10	; 0x0a
    363c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3640:	dc 01       	movw	r26, r24
    3642:	cb 01       	movw	r24, r22
    3644:	9e 83       	std	Y+6, r25	; 0x06
    3646:	8d 83       	std	Y+5, r24	; 0x05
    3648:	8d 81       	ldd	r24, Y+5	; 0x05
    364a:	9e 81       	ldd	r25, Y+6	; 0x06
    364c:	9a 83       	std	Y+2, r25	; 0x02
    364e:	89 83       	std	Y+1, r24	; 0x01
    3650:	89 81       	ldd	r24, Y+1	; 0x01
    3652:	9a 81       	ldd	r25, Y+2	; 0x02
    3654:	01 97       	sbiw	r24, 0x01	; 1
    3656:	f1 f7       	brne	.-4      	; 0x3654 <LCD_displayCharacter+0x8d6>
    3658:	9a 83       	std	Y+2, r25	; 0x02
    365a:	89 83       	std	Y+1, r24	; 0x01
	GPIO_writePin(LCD_ENABLE_PORT,LCD_ENABLE_PIN,LOW);
	_delay_ms(1); /* 13ns */

#endif

}//end LCD_displayCharacter
    365c:	cd 59       	subi	r28, 0x9D	; 157
    365e:	df 4f       	sbci	r29, 0xFF	; 255
    3660:	0f b6       	in	r0, 0x3f	; 63
    3662:	f8 94       	cli
    3664:	de bf       	out	0x3e, r29	; 62
    3666:	0f be       	out	0x3f, r0	; 63
    3668:	cd bf       	out	0x3d, r28	; 61
    366a:	cf 91       	pop	r28
    366c:	df 91       	pop	r29
    366e:	1f 91       	pop	r17
    3670:	0f 91       	pop	r16
    3672:	08 95       	ret

00003674 <LCD_init>:

void LCD_init(void){
    3674:	df 93       	push	r29
    3676:	cf 93       	push	r28
    3678:	cd b7       	in	r28, 0x3d	; 61
    367a:	de b7       	in	r29, 0x3e	; 62
    367c:	2e 97       	sbiw	r28, 0x0e	; 14
    367e:	0f b6       	in	r0, 0x3f	; 63
    3680:	f8 94       	cli
    3682:	de bf       	out	0x3e, r29	; 62
    3684:	0f be       	out	0x3f, r0	; 63
    3686:	cd bf       	out	0x3d, r28	; 61

	GPIO_setupPinDirection(LCD_RS_PORT,LCD_RS_PIN,PIN_OUTPUT);
    3688:	83 e0       	ldi	r24, 0x03	; 3
    368a:	64 e0       	ldi	r22, 0x04	; 4
    368c:	41 e0       	ldi	r20, 0x01	; 1
    368e:	0e 94 28 0c 	call	0x1850	; 0x1850 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_ENABLE_PORT,LCD_ENABLE_PIN,PIN_OUTPUT);
    3692:	83 e0       	ldi	r24, 0x03	; 3
    3694:	65 e0       	ldi	r22, 0x05	; 5
    3696:	41 e0       	ldi	r20, 0x01	; 1
    3698:	0e 94 28 0c 	call	0x1850	; 0x1850 <GPIO_setupPinDirection>
    369c:	80 e0       	ldi	r24, 0x00	; 0
    369e:	90 e0       	ldi	r25, 0x00	; 0
    36a0:	a0 ea       	ldi	r26, 0xA0	; 160
    36a2:	b1 e4       	ldi	r27, 0x41	; 65
    36a4:	8b 87       	std	Y+11, r24	; 0x0b
    36a6:	9c 87       	std	Y+12, r25	; 0x0c
    36a8:	ad 87       	std	Y+13, r26	; 0x0d
    36aa:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    36ac:	6b 85       	ldd	r22, Y+11	; 0x0b
    36ae:	7c 85       	ldd	r23, Y+12	; 0x0c
    36b0:	8d 85       	ldd	r24, Y+13	; 0x0d
    36b2:	9e 85       	ldd	r25, Y+14	; 0x0e
    36b4:	20 e0       	ldi	r18, 0x00	; 0
    36b6:	30 e0       	ldi	r19, 0x00	; 0
    36b8:	4a e7       	ldi	r20, 0x7A	; 122
    36ba:	53 e4       	ldi	r21, 0x43	; 67
    36bc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    36c0:	dc 01       	movw	r26, r24
    36c2:	cb 01       	movw	r24, r22
    36c4:	8f 83       	std	Y+7, r24	; 0x07
    36c6:	98 87       	std	Y+8, r25	; 0x08
    36c8:	a9 87       	std	Y+9, r26	; 0x09
    36ca:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    36cc:	6f 81       	ldd	r22, Y+7	; 0x07
    36ce:	78 85       	ldd	r23, Y+8	; 0x08
    36d0:	89 85       	ldd	r24, Y+9	; 0x09
    36d2:	9a 85       	ldd	r25, Y+10	; 0x0a
    36d4:	20 e0       	ldi	r18, 0x00	; 0
    36d6:	30 e0       	ldi	r19, 0x00	; 0
    36d8:	40 e8       	ldi	r20, 0x80	; 128
    36da:	5f e3       	ldi	r21, 0x3F	; 63
    36dc:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    36e0:	88 23       	and	r24, r24
    36e2:	2c f4       	brge	.+10     	; 0x36ee <LCD_init+0x7a>
		__ticks = 1;
    36e4:	81 e0       	ldi	r24, 0x01	; 1
    36e6:	90 e0       	ldi	r25, 0x00	; 0
    36e8:	9e 83       	std	Y+6, r25	; 0x06
    36ea:	8d 83       	std	Y+5, r24	; 0x05
    36ec:	3f c0       	rjmp	.+126    	; 0x376c <LCD_init+0xf8>
	else if (__tmp > 65535)
    36ee:	6f 81       	ldd	r22, Y+7	; 0x07
    36f0:	78 85       	ldd	r23, Y+8	; 0x08
    36f2:	89 85       	ldd	r24, Y+9	; 0x09
    36f4:	9a 85       	ldd	r25, Y+10	; 0x0a
    36f6:	20 e0       	ldi	r18, 0x00	; 0
    36f8:	3f ef       	ldi	r19, 0xFF	; 255
    36fa:	4f e7       	ldi	r20, 0x7F	; 127
    36fc:	57 e4       	ldi	r21, 0x47	; 71
    36fe:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3702:	18 16       	cp	r1, r24
    3704:	4c f5       	brge	.+82     	; 0x3758 <LCD_init+0xe4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3706:	6b 85       	ldd	r22, Y+11	; 0x0b
    3708:	7c 85       	ldd	r23, Y+12	; 0x0c
    370a:	8d 85       	ldd	r24, Y+13	; 0x0d
    370c:	9e 85       	ldd	r25, Y+14	; 0x0e
    370e:	20 e0       	ldi	r18, 0x00	; 0
    3710:	30 e0       	ldi	r19, 0x00	; 0
    3712:	40 e2       	ldi	r20, 0x20	; 32
    3714:	51 e4       	ldi	r21, 0x41	; 65
    3716:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    371a:	dc 01       	movw	r26, r24
    371c:	cb 01       	movw	r24, r22
    371e:	bc 01       	movw	r22, r24
    3720:	cd 01       	movw	r24, r26
    3722:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3726:	dc 01       	movw	r26, r24
    3728:	cb 01       	movw	r24, r22
    372a:	9e 83       	std	Y+6, r25	; 0x06
    372c:	8d 83       	std	Y+5, r24	; 0x05
    372e:	0f c0       	rjmp	.+30     	; 0x374e <LCD_init+0xda>
    3730:	89 e1       	ldi	r24, 0x19	; 25
    3732:	90 e0       	ldi	r25, 0x00	; 0
    3734:	9c 83       	std	Y+4, r25	; 0x04
    3736:	8b 83       	std	Y+3, r24	; 0x03
    3738:	8b 81       	ldd	r24, Y+3	; 0x03
    373a:	9c 81       	ldd	r25, Y+4	; 0x04
    373c:	01 97       	sbiw	r24, 0x01	; 1
    373e:	f1 f7       	brne	.-4      	; 0x373c <LCD_init+0xc8>
    3740:	9c 83       	std	Y+4, r25	; 0x04
    3742:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3744:	8d 81       	ldd	r24, Y+5	; 0x05
    3746:	9e 81       	ldd	r25, Y+6	; 0x06
    3748:	01 97       	sbiw	r24, 0x01	; 1
    374a:	9e 83       	std	Y+6, r25	; 0x06
    374c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    374e:	8d 81       	ldd	r24, Y+5	; 0x05
    3750:	9e 81       	ldd	r25, Y+6	; 0x06
    3752:	00 97       	sbiw	r24, 0x00	; 0
    3754:	69 f7       	brne	.-38     	; 0x3730 <LCD_init+0xbc>
    3756:	14 c0       	rjmp	.+40     	; 0x3780 <LCD_init+0x10c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3758:	6f 81       	ldd	r22, Y+7	; 0x07
    375a:	78 85       	ldd	r23, Y+8	; 0x08
    375c:	89 85       	ldd	r24, Y+9	; 0x09
    375e:	9a 85       	ldd	r25, Y+10	; 0x0a
    3760:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3764:	dc 01       	movw	r26, r24
    3766:	cb 01       	movw	r24, r22
    3768:	9e 83       	std	Y+6, r25	; 0x06
    376a:	8d 83       	std	Y+5, r24	; 0x05
    376c:	8d 81       	ldd	r24, Y+5	; 0x05
    376e:	9e 81       	ldd	r25, Y+6	; 0x06
    3770:	9a 83       	std	Y+2, r25	; 0x02
    3772:	89 83       	std	Y+1, r24	; 0x01
    3774:	89 81       	ldd	r24, Y+1	; 0x01
    3776:	9a 81       	ldd	r25, Y+2	; 0x02
    3778:	01 97       	sbiw	r24, 0x01	; 1
    377a:	f1 f7       	brne	.-4      	; 0x3778 <LCD_init+0x104>
    377c:	9a 83       	std	Y+2, r25	; 0x02
    377e:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(20); /* due to LCD hardware booting */

#if(LCD_DATA_BIT_MODE == 4)

	GPIO_setupPinDirection(LCD_DATA_PORT,LCD_DB4,PIN_OUTPUT);
    3780:	82 e0       	ldi	r24, 0x02	; 2
    3782:	63 e0       	ldi	r22, 0x03	; 3
    3784:	41 e0       	ldi	r20, 0x01	; 1
    3786:	0e 94 28 0c 	call	0x1850	; 0x1850 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_DATA_PORT,LCD_DB5,PIN_OUTPUT);
    378a:	82 e0       	ldi	r24, 0x02	; 2
    378c:	64 e0       	ldi	r22, 0x04	; 4
    378e:	41 e0       	ldi	r20, 0x01	; 1
    3790:	0e 94 28 0c 	call	0x1850	; 0x1850 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_DATA_PORT,LCD_DB6,PIN_OUTPUT);
    3794:	82 e0       	ldi	r24, 0x02	; 2
    3796:	65 e0       	ldi	r22, 0x05	; 5
    3798:	41 e0       	ldi	r20, 0x01	; 1
    379a:	0e 94 28 0c 	call	0x1850	; 0x1850 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_DATA_PORT,LCD_DB7,PIN_OUTPUT);
    379e:	82 e0       	ldi	r24, 0x02	; 2
    37a0:	66 e0       	ldi	r22, 0x06	; 6
    37a2:	41 e0       	ldi	r20, 0x01	; 1
    37a4:	0e 94 28 0c 	call	0x1850	; 0x1850 <GPIO_setupPinDirection>

	LCD_sendCommand(TWO_LINES_FOUR_BITS_MODE_INIT1);
    37a8:	83 e3       	ldi	r24, 0x33	; 51
    37aa:	0e 94 44 12 	call	0x2488	; 0x2488 <LCD_sendCommand>
	LCD_sendCommand(TWO_LINES_FOUR_BITS_MODE_INIT2);
    37ae:	82 e3       	ldi	r24, 0x32	; 50
    37b0:	0e 94 44 12 	call	0x2488	; 0x2488 <LCD_sendCommand>
	LCD_sendCommand(TWO_LINES_FOUR_BITS_MODE);
    37b4:	88 e2       	ldi	r24, 0x28	; 40
    37b6:	0e 94 44 12 	call	0x2488	; 0x2488 <LCD_sendCommand>

	GPIO_setupPortDirection(LCD_DATA_PORT,PORT_OUTPUT);
	LCD_sendCommand(TWO_LINES_EIGHT_BITS_MODE); /* 2lines + 8-bits */

#endif
	LCD_sendCommand(CURSOR_OFF); /* cursor off */
    37ba:	8c e0       	ldi	r24, 0x0C	; 12
    37bc:	0e 94 44 12 	call	0x2488	; 0x2488 <LCD_sendCommand>
	LCD_sendCommand(CLEAR_SCREEN); /* clear screen */
    37c0:	81 e0       	ldi	r24, 0x01	; 1
    37c2:	0e 94 44 12 	call	0x2488	; 0x2488 <LCD_sendCommand>

}//end LCD_init
    37c6:	2e 96       	adiw	r28, 0x0e	; 14
    37c8:	0f b6       	in	r0, 0x3f	; 63
    37ca:	f8 94       	cli
    37cc:	de bf       	out	0x3e, r29	; 62
    37ce:	0f be       	out	0x3f, r0	; 63
    37d0:	cd bf       	out	0x3d, r28	; 61
    37d2:	cf 91       	pop	r28
    37d4:	df 91       	pop	r29
    37d6:	08 95       	ret

000037d8 <LCD_displayString>:

void LCD_displayString(uint8 * str){
    37d8:	df 93       	push	r29
    37da:	cf 93       	push	r28
    37dc:	00 d0       	rcall	.+0      	; 0x37de <LCD_displayString+0x6>
    37de:	00 d0       	rcall	.+0      	; 0x37e0 <LCD_displayString+0x8>
    37e0:	cd b7       	in	r28, 0x3d	; 61
    37e2:	de b7       	in	r29, 0x3e	; 62
    37e4:	9c 83       	std	Y+4, r25	; 0x04
    37e6:	8b 83       	std	Y+3, r24	; 0x03
	int i;
	for(i=0; str[i] != '\0' ;i++){
    37e8:	1a 82       	std	Y+2, r1	; 0x02
    37ea:	19 82       	std	Y+1, r1	; 0x01
    37ec:	0f c0       	rjmp	.+30     	; 0x380c <LCD_displayString+0x34>
		LCD_displayCharacter(str[i]);
    37ee:	29 81       	ldd	r18, Y+1	; 0x01
    37f0:	3a 81       	ldd	r19, Y+2	; 0x02
    37f2:	8b 81       	ldd	r24, Y+3	; 0x03
    37f4:	9c 81       	ldd	r25, Y+4	; 0x04
    37f6:	fc 01       	movw	r30, r24
    37f8:	e2 0f       	add	r30, r18
    37fa:	f3 1f       	adc	r31, r19
    37fc:	80 81       	ld	r24, Z
    37fe:	0e 94 bf 16 	call	0x2d7e	; 0x2d7e <LCD_displayCharacter>

}//end LCD_init

void LCD_displayString(uint8 * str){
	int i;
	for(i=0; str[i] != '\0' ;i++){
    3802:	89 81       	ldd	r24, Y+1	; 0x01
    3804:	9a 81       	ldd	r25, Y+2	; 0x02
    3806:	01 96       	adiw	r24, 0x01	; 1
    3808:	9a 83       	std	Y+2, r25	; 0x02
    380a:	89 83       	std	Y+1, r24	; 0x01
    380c:	29 81       	ldd	r18, Y+1	; 0x01
    380e:	3a 81       	ldd	r19, Y+2	; 0x02
    3810:	8b 81       	ldd	r24, Y+3	; 0x03
    3812:	9c 81       	ldd	r25, Y+4	; 0x04
    3814:	fc 01       	movw	r30, r24
    3816:	e2 0f       	add	r30, r18
    3818:	f3 1f       	adc	r31, r19
    381a:	80 81       	ld	r24, Z
    381c:	88 23       	and	r24, r24
    381e:	39 f7       	brne	.-50     	; 0x37ee <LCD_displayString+0x16>
		LCD_displayCharacter(str[i]);
	}//end for

}//end LCD_displayString
    3820:	0f 90       	pop	r0
    3822:	0f 90       	pop	r0
    3824:	0f 90       	pop	r0
    3826:	0f 90       	pop	r0
    3828:	cf 91       	pop	r28
    382a:	df 91       	pop	r29
    382c:	08 95       	ret

0000382e <LCD_moveCursor>:
 * 0x80 is the command for moving cursor 1000 0000  ( no address this far )
 * the missing parameters is the position of column and base of row
 * first row : 00	second row : 40		third row : 10	fourth row : 50
 * and position of column from 0 to F
 * */
void LCD_moveCursor(uint8 row,uint8 col){
    382e:	df 93       	push	r29
    3830:	cf 93       	push	r28
    3832:	00 d0       	rcall	.+0      	; 0x3834 <LCD_moveCursor+0x6>
    3834:	00 d0       	rcall	.+0      	; 0x3836 <LCD_moveCursor+0x8>
    3836:	cd b7       	in	r28, 0x3d	; 61
    3838:	de b7       	in	r29, 0x3e	; 62
    383a:	89 83       	std	Y+1, r24	; 0x01
    383c:	6a 83       	std	Y+2, r22	; 0x02

	switch(row){
    383e:	89 81       	ldd	r24, Y+1	; 0x01
    3840:	28 2f       	mov	r18, r24
    3842:	30 e0       	ldi	r19, 0x00	; 0
    3844:	3c 83       	std	Y+4, r19	; 0x04
    3846:	2b 83       	std	Y+3, r18	; 0x03
    3848:	8b 81       	ldd	r24, Y+3	; 0x03
    384a:	9c 81       	ldd	r25, Y+4	; 0x04
    384c:	82 30       	cpi	r24, 0x02	; 2
    384e:	91 05       	cpc	r25, r1
    3850:	d9 f0       	breq	.+54     	; 0x3888 <LCD_moveCursor+0x5a>
    3852:	2b 81       	ldd	r18, Y+3	; 0x03
    3854:	3c 81       	ldd	r19, Y+4	; 0x04
    3856:	23 30       	cpi	r18, 0x03	; 3
    3858:	31 05       	cpc	r19, r1
    385a:	34 f4       	brge	.+12     	; 0x3868 <LCD_moveCursor+0x3a>
    385c:	8b 81       	ldd	r24, Y+3	; 0x03
    385e:	9c 81       	ldd	r25, Y+4	; 0x04
    3860:	81 30       	cpi	r24, 0x01	; 1
    3862:	91 05       	cpc	r25, r1
    3864:	61 f0       	breq	.+24     	; 0x387e <LCD_moveCursor+0x50>
    3866:	1f c0       	rjmp	.+62     	; 0x38a6 <LCD_moveCursor+0x78>
    3868:	2b 81       	ldd	r18, Y+3	; 0x03
    386a:	3c 81       	ldd	r19, Y+4	; 0x04
    386c:	23 30       	cpi	r18, 0x03	; 3
    386e:	31 05       	cpc	r19, r1
    3870:	81 f0       	breq	.+32     	; 0x3892 <LCD_moveCursor+0x64>
    3872:	8b 81       	ldd	r24, Y+3	; 0x03
    3874:	9c 81       	ldd	r25, Y+4	; 0x04
    3876:	84 30       	cpi	r24, 0x04	; 4
    3878:	91 05       	cpc	r25, r1
    387a:	81 f0       	breq	.+32     	; 0x389c <LCD_moveCursor+0x6e>
    387c:	14 c0       	rjmp	.+40     	; 0x38a6 <LCD_moveCursor+0x78>

	case 1:
		return LCD_sendCommand(0x80 + col);
    387e:	8a 81       	ldd	r24, Y+2	; 0x02
    3880:	80 58       	subi	r24, 0x80	; 128
    3882:	0e 94 44 12 	call	0x2488	; 0x2488 <LCD_sendCommand>
    3886:	12 c0       	rjmp	.+36     	; 0x38ac <LCD_moveCursor+0x7e>
	case 2:
		return LCD_sendCommand(0x80 + 0x40 + col);
    3888:	8a 81       	ldd	r24, Y+2	; 0x02
    388a:	80 54       	subi	r24, 0x40	; 64
    388c:	0e 94 44 12 	call	0x2488	; 0x2488 <LCD_sendCommand>
    3890:	0d c0       	rjmp	.+26     	; 0x38ac <LCD_moveCursor+0x7e>
	case 3:
		return LCD_sendCommand(0x80 + 0x10 + col);
    3892:	8a 81       	ldd	r24, Y+2	; 0x02
    3894:	80 57       	subi	r24, 0x70	; 112
    3896:	0e 94 44 12 	call	0x2488	; 0x2488 <LCD_sendCommand>
    389a:	08 c0       	rjmp	.+16     	; 0x38ac <LCD_moveCursor+0x7e>
	case 4:
		return LCD_sendCommand(0x80 + 0x50 + col);
    389c:	8a 81       	ldd	r24, Y+2	; 0x02
    389e:	80 53       	subi	r24, 0x30	; 48
    38a0:	0e 94 44 12 	call	0x2488	; 0x2488 <LCD_sendCommand>
    38a4:	03 c0       	rjmp	.+6      	; 0x38ac <LCD_moveCursor+0x7e>
	default:
		return LCD_sendCommand(0x80);
    38a6:	80 e8       	ldi	r24, 0x80	; 128
    38a8:	0e 94 44 12 	call	0x2488	; 0x2488 <LCD_sendCommand>
	}//end switch

}//end LCD_moveCursor
    38ac:	0f 90       	pop	r0
    38ae:	0f 90       	pop	r0
    38b0:	0f 90       	pop	r0
    38b2:	0f 90       	pop	r0
    38b4:	cf 91       	pop	r28
    38b6:	df 91       	pop	r29
    38b8:	08 95       	ret

000038ba <LCD_displayStringRowColumn>:

void LCD_displayStringRowColumn(uint8* string, uint8 row, uint8 col){
    38ba:	df 93       	push	r29
    38bc:	cf 93       	push	r28
    38be:	00 d0       	rcall	.+0      	; 0x38c0 <LCD_displayStringRowColumn+0x6>
    38c0:	00 d0       	rcall	.+0      	; 0x38c2 <LCD_displayStringRowColumn+0x8>
    38c2:	cd b7       	in	r28, 0x3d	; 61
    38c4:	de b7       	in	r29, 0x3e	; 62
    38c6:	9a 83       	std	Y+2, r25	; 0x02
    38c8:	89 83       	std	Y+1, r24	; 0x01
    38ca:	6b 83       	std	Y+3, r22	; 0x03
    38cc:	4c 83       	std	Y+4, r20	; 0x04

	LCD_moveCursor(row,col);
    38ce:	8b 81       	ldd	r24, Y+3	; 0x03
    38d0:	6c 81       	ldd	r22, Y+4	; 0x04
    38d2:	0e 94 17 1c 	call	0x382e	; 0x382e <LCD_moveCursor>
	LCD_displayString(string);
    38d6:	89 81       	ldd	r24, Y+1	; 0x01
    38d8:	9a 81       	ldd	r25, Y+2	; 0x02
    38da:	0e 94 ec 1b 	call	0x37d8	; 0x37d8 <LCD_displayString>

}//end LCD_displayStringRowColumn
    38de:	0f 90       	pop	r0
    38e0:	0f 90       	pop	r0
    38e2:	0f 90       	pop	r0
    38e4:	0f 90       	pop	r0
    38e6:	cf 91       	pop	r28
    38e8:	df 91       	pop	r29
    38ea:	08 95       	ret

000038ec <LCD_clearScreen>:

void LCD_clearScreen(void){
    38ec:	df 93       	push	r29
    38ee:	cf 93       	push	r28
    38f0:	cd b7       	in	r28, 0x3d	; 61
    38f2:	de b7       	in	r29, 0x3e	; 62

	LCD_sendCommand(CLEAR_SCREEN);
    38f4:	81 e0       	ldi	r24, 0x01	; 1
    38f6:	0e 94 44 12 	call	0x2488	; 0x2488 <LCD_sendCommand>

}//end LCD_clearScreen
    38fa:	cf 91       	pop	r28
    38fc:	df 91       	pop	r29
    38fe:	08 95       	ret

00003900 <LCD_intgerToString>:

void LCD_intgerToString(uint32 data){
    3900:	df 93       	push	r29
    3902:	cf 93       	push	r28
    3904:	cd b7       	in	r28, 0x3d	; 61
    3906:	de b7       	in	r29, 0x3e	; 62
    3908:	64 97       	sbiw	r28, 0x14	; 20
    390a:	0f b6       	in	r0, 0x3f	; 63
    390c:	f8 94       	cli
    390e:	de bf       	out	0x3e, r29	; 62
    3910:	0f be       	out	0x3f, r0	; 63
    3912:	cd bf       	out	0x3d, r28	; 61
    3914:	69 8b       	std	Y+17, r22	; 0x11
    3916:	7a 8b       	std	Y+18, r23	; 0x12
    3918:	8b 8b       	std	Y+19, r24	; 0x13
    391a:	9c 8b       	std	Y+20, r25	; 0x14

	uint8 buff[16]; /* String to hold the ASCII result */
	itoa(data,buff,10); /* Use itoa C function to convert the data to its corresponding ASCII value, 10 for decimal */
    391c:	89 89       	ldd	r24, Y+17	; 0x11
    391e:	9a 89       	ldd	r25, Y+18	; 0x12
    3920:	9e 01       	movw	r18, r28
    3922:	2f 5f       	subi	r18, 0xFF	; 255
    3924:	3f 4f       	sbci	r19, 0xFF	; 255
    3926:	b9 01       	movw	r22, r18
    3928:	4a e0       	ldi	r20, 0x0A	; 10
    392a:	50 e0       	ldi	r21, 0x00	; 0
    392c:	0e 94 36 21 	call	0x426c	; 0x426c <itoa>
	LCD_displayString(buff); /* Display the string */
    3930:	ce 01       	movw	r24, r28
    3932:	01 96       	adiw	r24, 0x01	; 1
    3934:	0e 94 ec 1b 	call	0x37d8	; 0x37d8 <LCD_displayString>

}//end LCD_intgerToString
    3938:	64 96       	adiw	r28, 0x14	; 20
    393a:	0f b6       	in	r0, 0x3f	; 63
    393c:	f8 94       	cli
    393e:	de bf       	out	0x3e, r29	; 62
    3940:	0f be       	out	0x3f, r0	; 63
    3942:	cd bf       	out	0x3d, r28	; 61
    3944:	cf 91       	pop	r28
    3946:	df 91       	pop	r29
    3948:	08 95       	ret

0000394a <LM35_getTemperature>:

/****************************************************************************
 *                             Functions definition
 * ************************************************************************/

uint8 LM35_getTemperature(void){
    394a:	df 93       	push	r29
    394c:	cf 93       	push	r28
    394e:	00 d0       	rcall	.+0      	; 0x3950 <LM35_getTemperature+0x6>
    3950:	0f 92       	push	r0
    3952:	cd b7       	in	r28, 0x3d	; 61
    3954:	de b7       	in	r29, 0x3e	; 62
uint8 temp;
uint16 adc_value;


#ifdef POLLING
adc_value = ADC_readChannel(CHANNEL);
    3956:	82 e0       	ldi	r24, 0x02	; 2
    3958:	0e 94 d0 07 	call	0xfa0	; 0xfa0 <ADC_readChannel>
    395c:	9a 83       	std	Y+2, r25	; 0x02
    395e:	89 83       	std	Y+1, r24	; 0x01
#ifdef INTERRUPT
ADC_readChannel(CHANNEL);
adc_value = g_channelReading;
#endif

temp = (uint8)(((uint32)adc_value*MAX_TEMPERATURE*ADC_V_REF)/(MAX_VOLT*ADC_MAX_VALUE));
    3960:	89 81       	ldd	r24, Y+1	; 0x01
    3962:	9a 81       	ldd	r25, Y+2	; 0x02
    3964:	cc 01       	movw	r24, r24
    3966:	a0 e0       	ldi	r26, 0x00	; 0
    3968:	b0 e0       	ldi	r27, 0x00	; 0
    396a:	2e ee       	ldi	r18, 0xEE	; 238
    396c:	32 e0       	ldi	r19, 0x02	; 2
    396e:	40 e0       	ldi	r20, 0x00	; 0
    3970:	50 e0       	ldi	r21, 0x00	; 0
    3972:	bc 01       	movw	r22, r24
    3974:	cd 01       	movw	r24, r26
    3976:	0e 94 be 20 	call	0x417c	; 0x417c <__mulsi3>
    397a:	dc 01       	movw	r26, r24
    397c:	cb 01       	movw	r24, r22
    397e:	bc 01       	movw	r22, r24
    3980:	cd 01       	movw	r24, r26
    3982:	0e 94 07 05 	call	0xa0e	; 0xa0e <__floatunsisf>
    3986:	dc 01       	movw	r26, r24
    3988:	cb 01       	movw	r24, r22
    398a:	bc 01       	movw	r22, r24
    398c:	cd 01       	movw	r24, r26
    398e:	20 e0       	ldi	r18, 0x00	; 0
    3990:	30 ed       	ldi	r19, 0xD0	; 208
    3992:	4f eb       	ldi	r20, 0xBF	; 191
    3994:	54 e4       	ldi	r21, 0x44	; 68
    3996:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    399a:	dc 01       	movw	r26, r24
    399c:	cb 01       	movw	r24, r22
    399e:	bc 01       	movw	r22, r24
    39a0:	cd 01       	movw	r24, r26
    39a2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    39a6:	dc 01       	movw	r26, r24
    39a8:	cb 01       	movw	r24, r22
    39aa:	8b 83       	std	Y+3, r24	; 0x03

return temp;
    39ac:	8b 81       	ldd	r24, Y+3	; 0x03
}//end LM35_getTemperature
    39ae:	0f 90       	pop	r0
    39b0:	0f 90       	pop	r0
    39b2:	0f 90       	pop	r0
    39b4:	cf 91       	pop	r28
    39b6:	df 91       	pop	r29
    39b8:	08 95       	ret

000039ba <BUZZER_init>:

/****************************************************************************
 *                          Functions definitions
 ****************************************************************************/

void BUZZER_init(void){
    39ba:	df 93       	push	r29
    39bc:	cf 93       	push	r28
    39be:	cd b7       	in	r28, 0x3d	; 61
    39c0:	de b7       	in	r29, 0x3e	; 62

	/* Setup buzzer pin to be output pin */
	GPIO_setupPinDirection(BUZZER_PORT,BUZZER_PIN,PIN_OUTPUT);
    39c2:	82 e0       	ldi	r24, 0x02	; 2
    39c4:	64 e0       	ldi	r22, 0x04	; 4
    39c6:	41 e0       	ldi	r20, 0x01	; 1
    39c8:	0e 94 28 0c 	call	0x1850	; 0x1850 <GPIO_setupPinDirection>

	/* Initial value foe buzzer = zero */
	GPIO_writePin(BUZZER_PORT,BUZZER_PIN,LOW);
    39cc:	82 e0       	ldi	r24, 0x02	; 2
    39ce:	64 e0       	ldi	r22, 0x04	; 4
    39d0:	40 e0       	ldi	r20, 0x00	; 0
    39d2:	0e 94 13 0d 	call	0x1a26	; 0x1a26 <GPIO_writePin>
}
    39d6:	cf 91       	pop	r28
    39d8:	df 91       	pop	r29
    39da:	08 95       	ret

000039dc <BUZZER_on>:

void BUZZER_on(void){
    39dc:	df 93       	push	r29
    39de:	cf 93       	push	r28
    39e0:	cd b7       	in	r28, 0x3d	; 61
    39e2:	de b7       	in	r29, 0x3e	; 62

	GPIO_writePin(BUZZER_PORT,BUZZER_PIN,HIGH);
    39e4:	82 e0       	ldi	r24, 0x02	; 2
    39e6:	64 e0       	ldi	r22, 0x04	; 4
    39e8:	41 e0       	ldi	r20, 0x01	; 1
    39ea:	0e 94 13 0d 	call	0x1a26	; 0x1a26 <GPIO_writePin>
}
    39ee:	cf 91       	pop	r28
    39f0:	df 91       	pop	r29
    39f2:	08 95       	ret

000039f4 <BUZZER_off>:

void BUZZER_off(void){
    39f4:	df 93       	push	r29
    39f6:	cf 93       	push	r28
    39f8:	cd b7       	in	r28, 0x3d	; 61
    39fa:	de b7       	in	r29, 0x3e	; 62

	GPIO_writePin(BUZZER_PORT,BUZZER_PIN,LOW);
    39fc:	82 e0       	ldi	r24, 0x02	; 2
    39fe:	64 e0       	ldi	r22, 0x04	; 4
    3a00:	40 e0       	ldi	r20, 0x00	; 0
    3a02:	0e 94 13 0d 	call	0x1a26	; 0x1a26 <GPIO_writePin>
}
    3a06:	cf 91       	pop	r28
    3a08:	df 91       	pop	r29
    3a0a:	08 95       	ret

00003a0c <EEPROM_init>:

/****************************************************************************
 *                          Functions definition
 ***************************************************************************/

void EEPROM_init(void){
    3a0c:	df 93       	push	r29
    3a0e:	cf 93       	push	r28
    3a10:	cd b7       	in	r28, 0x3d	; 61
    3a12:	de b7       	in	r29, 0x3e	; 62

	TWI_init(&g_configs);
    3a14:	88 e6       	ldi	r24, 0x68	; 104
    3a16:	91 e0       	ldi	r25, 0x01	; 1
    3a18:	0e 94 2f 0a 	call	0x145e	; 0x145e <TWI_init>

}
    3a1c:	cf 91       	pop	r28
    3a1e:	df 91       	pop	r29
    3a20:	08 95       	ret

00003a22 <EEPROM_writeByte>:

uint8 EEPROM_writeByte(uint16 u16add,uint8 u8data){
    3a22:	df 93       	push	r29
    3a24:	cf 93       	push	r28
    3a26:	00 d0       	rcall	.+0      	; 0x3a28 <EEPROM_writeByte+0x6>
    3a28:	00 d0       	rcall	.+0      	; 0x3a2a <EEPROM_writeByte+0x8>
    3a2a:	cd b7       	in	r28, 0x3d	; 61
    3a2c:	de b7       	in	r29, 0x3e	; 62
    3a2e:	9a 83       	std	Y+2, r25	; 0x02
    3a30:	89 83       	std	Y+1, r24	; 0x01
    3a32:	6b 83       	std	Y+3, r22	; 0x03

	TWI_start();
    3a34:	0e 94 73 0a 	call	0x14e6	; 0x14e6 <TWI_start>

	if(TWI_getStatus() != TWI_STATUS_START)
    3a38:	0e 94 f7 0a 	call	0x15ee	; 0x15ee <TWI_getStatus>
    3a3c:	88 30       	cpi	r24, 0x08	; 8
    3a3e:	11 f0       	breq	.+4      	; 0x3a44 <EEPROM_writeByte+0x22>
		return ERROR;
    3a40:	1c 82       	std	Y+4, r1	; 0x04
    3a42:	28 c0       	rjmp	.+80     	; 0x3a94 <EEPROM_writeByte+0x72>

	/*
	 *  Take A8 A9 A10 bits from memory address to device address
	 *  (RW bit = 0 (write))
	 * */
	TWI_writeByte((uint8) (0xA0 | ((u16add & 0x0700)>>7)) );
    3a44:	89 81       	ldd	r24, Y+1	; 0x01
    3a46:	9a 81       	ldd	r25, Y+2	; 0x02
    3a48:	80 70       	andi	r24, 0x00	; 0
    3a4a:	97 70       	andi	r25, 0x07	; 7
    3a4c:	88 0f       	add	r24, r24
    3a4e:	89 2f       	mov	r24, r25
    3a50:	88 1f       	adc	r24, r24
    3a52:	99 0b       	sbc	r25, r25
    3a54:	91 95       	neg	r25
    3a56:	80 6a       	ori	r24, 0xA0	; 160
    3a58:	0e 94 a3 0a 	call	0x1546	; 0x1546 <TWI_writeByte>

	if(TWI_getStatus() != TWI_STATUS_MT_SLA_W_ACK)
    3a5c:	0e 94 f7 0a 	call	0x15ee	; 0x15ee <TWI_getStatus>
    3a60:	88 31       	cpi	r24, 0x18	; 24
    3a62:	11 f0       	breq	.+4      	; 0x3a68 <EEPROM_writeByte+0x46>
		return ERROR;
    3a64:	1c 82       	std	Y+4, r1	; 0x04
    3a66:	16 c0       	rjmp	.+44     	; 0x3a94 <EEPROM_writeByte+0x72>

	/* Send memory address to store in */
	TWI_writeByte((uint8) u16add );
    3a68:	89 81       	ldd	r24, Y+1	; 0x01
    3a6a:	0e 94 a3 0a 	call	0x1546	; 0x1546 <TWI_writeByte>

	if(TWI_getStatus() != TWI_STATUS_MT_DATA_ACK)
    3a6e:	0e 94 f7 0a 	call	0x15ee	; 0x15ee <TWI_getStatus>
    3a72:	88 32       	cpi	r24, 0x28	; 40
    3a74:	11 f0       	breq	.+4      	; 0x3a7a <EEPROM_writeByte+0x58>
		return ERROR;
    3a76:	1c 82       	std	Y+4, r1	; 0x04
    3a78:	0d c0       	rjmp	.+26     	; 0x3a94 <EEPROM_writeByte+0x72>

	/* Write data in the EEPROM memory */
	TWI_writeByte(u8data);
    3a7a:	8b 81       	ldd	r24, Y+3	; 0x03
    3a7c:	0e 94 a3 0a 	call	0x1546	; 0x1546 <TWI_writeByte>

	if(TWI_getStatus() != TWI_STATUS_MT_DATA_ACK)
    3a80:	0e 94 f7 0a 	call	0x15ee	; 0x15ee <TWI_getStatus>
    3a84:	88 32       	cpi	r24, 0x28	; 40
    3a86:	11 f0       	breq	.+4      	; 0x3a8c <EEPROM_writeByte+0x6a>
		return ERROR;
    3a88:	1c 82       	std	Y+4, r1	; 0x04
    3a8a:	04 c0       	rjmp	.+8      	; 0x3a94 <EEPROM_writeByte+0x72>

	TWI_stop();
    3a8c:	0e 94 8e 0a 	call	0x151c	; 0x151c <TWI_stop>

	return SUCCESS;
    3a90:	81 e0       	ldi	r24, 0x01	; 1
    3a92:	8c 83       	std	Y+4, r24	; 0x04
    3a94:	8c 81       	ldd	r24, Y+4	; 0x04
}
    3a96:	0f 90       	pop	r0
    3a98:	0f 90       	pop	r0
    3a9a:	0f 90       	pop	r0
    3a9c:	0f 90       	pop	r0
    3a9e:	cf 91       	pop	r28
    3aa0:	df 91       	pop	r29
    3aa2:	08 95       	ret

00003aa4 <EEPROM_readByte>:


uint8 EEPROM_readByte(uint16 u16add,uint8* data){
    3aa4:	df 93       	push	r29
    3aa6:	cf 93       	push	r28
    3aa8:	00 d0       	rcall	.+0      	; 0x3aaa <EEPROM_readByte+0x6>
    3aaa:	00 d0       	rcall	.+0      	; 0x3aac <EEPROM_readByte+0x8>
    3aac:	0f 92       	push	r0
    3aae:	cd b7       	in	r28, 0x3d	; 61
    3ab0:	de b7       	in	r29, 0x3e	; 62
    3ab2:	9a 83       	std	Y+2, r25	; 0x02
    3ab4:	89 83       	std	Y+1, r24	; 0x01
    3ab6:	7c 83       	std	Y+4, r23	; 0x04
    3ab8:	6b 83       	std	Y+3, r22	; 0x03

	TWI_start();
    3aba:	0e 94 73 0a 	call	0x14e6	; 0x14e6 <TWI_start>

	if(TWI_getStatus() != TWI_STATUS_START)
    3abe:	0e 94 f7 0a 	call	0x15ee	; 0x15ee <TWI_getStatus>
    3ac2:	88 30       	cpi	r24, 0x08	; 8
    3ac4:	11 f0       	breq	.+4      	; 0x3aca <EEPROM_readByte+0x26>
		return ERROR;
    3ac6:	1d 82       	std	Y+5, r1	; 0x05
    3ac8:	44 c0       	rjmp	.+136    	; 0x3b52 <EEPROM_readByte+0xae>

	/*
	 *  Take A8 A9 A10 bits from memory address to device address
	 *  (RW bit = 0 (write))
	 * */
	TWI_writeByte((uint8) (0xA0 | ((u16add & 0x0700)>>7)) );
    3aca:	89 81       	ldd	r24, Y+1	; 0x01
    3acc:	9a 81       	ldd	r25, Y+2	; 0x02
    3ace:	80 70       	andi	r24, 0x00	; 0
    3ad0:	97 70       	andi	r25, 0x07	; 7
    3ad2:	88 0f       	add	r24, r24
    3ad4:	89 2f       	mov	r24, r25
    3ad6:	88 1f       	adc	r24, r24
    3ad8:	99 0b       	sbc	r25, r25
    3ada:	91 95       	neg	r25
    3adc:	80 6a       	ori	r24, 0xA0	; 160
    3ade:	0e 94 a3 0a 	call	0x1546	; 0x1546 <TWI_writeByte>

	if(TWI_getStatus() != TWI_STATUS_MT_SLA_W_ACK)
    3ae2:	0e 94 f7 0a 	call	0x15ee	; 0x15ee <TWI_getStatus>
    3ae6:	88 31       	cpi	r24, 0x18	; 24
    3ae8:	11 f0       	breq	.+4      	; 0x3aee <EEPROM_readByte+0x4a>
		return ERROR;
    3aea:	1d 82       	std	Y+5, r1	; 0x05
    3aec:	32 c0       	rjmp	.+100    	; 0x3b52 <EEPROM_readByte+0xae>

	/* Send memory address to store in */
	TWI_writeByte((uint8) u16add );
    3aee:	89 81       	ldd	r24, Y+1	; 0x01
    3af0:	0e 94 a3 0a 	call	0x1546	; 0x1546 <TWI_writeByte>

	if(TWI_getStatus() != TWI_STATUS_MT_DATA_ACK)
    3af4:	0e 94 f7 0a 	call	0x15ee	; 0x15ee <TWI_getStatus>
    3af8:	88 32       	cpi	r24, 0x28	; 40
    3afa:	11 f0       	breq	.+4      	; 0x3b00 <EEPROM_readByte+0x5c>
		return ERROR;
    3afc:	1d 82       	std	Y+5, r1	; 0x05
    3afe:	29 c0       	rjmp	.+82     	; 0x3b52 <EEPROM_readByte+0xae>

	TWI_start();
    3b00:	0e 94 73 0a 	call	0x14e6	; 0x14e6 <TWI_start>

	if(TWI_getStatus() != TWI_STATUS_REPEATED_START)
    3b04:	0e 94 f7 0a 	call	0x15ee	; 0x15ee <TWI_getStatus>
    3b08:	80 31       	cpi	r24, 0x10	; 16
    3b0a:	11 f0       	breq	.+4      	; 0x3b10 <EEPROM_readByte+0x6c>
		return ERROR;
    3b0c:	1d 82       	std	Y+5, r1	; 0x05
    3b0e:	21 c0       	rjmp	.+66     	; 0x3b52 <EEPROM_readByte+0xae>

	/*
	 *  Take A8 A9 A10 bits from memory address to device address
	 *  (RW bit = 1 (read))
	 * */
	TWI_writeByte((uint8) (0xA0 | ((u16add & 0x0700)>>7) | 1) );
    3b10:	89 81       	ldd	r24, Y+1	; 0x01
    3b12:	9a 81       	ldd	r25, Y+2	; 0x02
    3b14:	80 70       	andi	r24, 0x00	; 0
    3b16:	97 70       	andi	r25, 0x07	; 7
    3b18:	88 0f       	add	r24, r24
    3b1a:	89 2f       	mov	r24, r25
    3b1c:	88 1f       	adc	r24, r24
    3b1e:	99 0b       	sbc	r25, r25
    3b20:	91 95       	neg	r25
    3b22:	81 6a       	ori	r24, 0xA1	; 161
    3b24:	0e 94 a3 0a 	call	0x1546	; 0x1546 <TWI_writeByte>

	if(TWI_getStatus() != TWI_STATUS_MT_SLA_R_ACK)
    3b28:	0e 94 f7 0a 	call	0x15ee	; 0x15ee <TWI_getStatus>
    3b2c:	80 34       	cpi	r24, 0x40	; 64
    3b2e:	11 f0       	breq	.+4      	; 0x3b34 <EEPROM_readByte+0x90>
		return ERROR;
    3b30:	1d 82       	std	Y+5, r1	; 0x05
    3b32:	0f c0       	rjmp	.+30     	; 0x3b52 <EEPROM_readByte+0xae>

	*data = TWI_readByteWithNACK();
    3b34:	0e 94 de 0a 	call	0x15bc	; 0x15bc <TWI_readByteWithNACK>
    3b38:	eb 81       	ldd	r30, Y+3	; 0x03
    3b3a:	fc 81       	ldd	r31, Y+4	; 0x04
    3b3c:	80 83       	st	Z, r24

	if(TWI_getStatus() != TWI_STATUS_MR_DATA_NACK)
    3b3e:	0e 94 f7 0a 	call	0x15ee	; 0x15ee <TWI_getStatus>
    3b42:	88 35       	cpi	r24, 0x58	; 88
    3b44:	11 f0       	breq	.+4      	; 0x3b4a <EEPROM_readByte+0xa6>
		return ERROR;
    3b46:	1d 82       	std	Y+5, r1	; 0x05
    3b48:	04 c0       	rjmp	.+8      	; 0x3b52 <EEPROM_readByte+0xae>

	TWI_stop();
    3b4a:	0e 94 8e 0a 	call	0x151c	; 0x151c <TWI_stop>

	return SUCCESS;
    3b4e:	81 e0       	ldi	r24, 0x01	; 1
    3b50:	8d 83       	std	Y+5, r24	; 0x05
    3b52:	8d 81       	ldd	r24, Y+5	; 0x05
}
    3b54:	0f 90       	pop	r0
    3b56:	0f 90       	pop	r0
    3b58:	0f 90       	pop	r0
    3b5a:	0f 90       	pop	r0
    3b5c:	0f 90       	pop	r0
    3b5e:	cf 91       	pop	r28
    3b60:	df 91       	pop	r29
    3b62:	08 95       	ret

00003b64 <KEYPAD_getPressedKey>:

/***************************************************************************
 *                            Function definition
 * ***************************************************************************/

uint8 KEYPAD_getPressedKey(void){
    3b64:	df 93       	push	r29
    3b66:	cf 93       	push	r28
    3b68:	cd b7       	in	r28, 0x3d	; 61
    3b6a:	de b7       	in	r29, 0x3e	; 62
    3b6c:	60 97       	sbiw	r28, 0x10	; 16
    3b6e:	0f b6       	in	r0, 0x3f	; 63
    3b70:	f8 94       	cli
    3b72:	de bf       	out	0x3e, r29	; 62
    3b74:	0f be       	out	0x3f, r0	; 63
    3b76:	cd bf       	out	0x3d, r28	; 61

	uint8 row,col;

	GPIO_setupPinDirection(KEYPAD_ROW_PORT,KEYPAD_FIRST_ROW_PIN,PIN_INPUT);
    3b78:	81 e0       	ldi	r24, 0x01	; 1
    3b7a:	64 e0       	ldi	r22, 0x04	; 4
    3b7c:	40 e0       	ldi	r20, 0x00	; 0
    3b7e:	0e 94 28 0c 	call	0x1850	; 0x1850 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_ROW_PORT,KEYPAD_FIRST_ROW_PIN+1,PIN_INPUT);
    3b82:	81 e0       	ldi	r24, 0x01	; 1
    3b84:	65 e0       	ldi	r22, 0x05	; 5
    3b86:	40 e0       	ldi	r20, 0x00	; 0
    3b88:	0e 94 28 0c 	call	0x1850	; 0x1850 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_ROW_PORT,KEYPAD_FIRST_ROW_PIN+2,PIN_INPUT);
    3b8c:	81 e0       	ldi	r24, 0x01	; 1
    3b8e:	66 e0       	ldi	r22, 0x06	; 6
    3b90:	40 e0       	ldi	r20, 0x00	; 0
    3b92:	0e 94 28 0c 	call	0x1850	; 0x1850 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_ROW_PORT,KEYPAD_FIRST_ROW_PIN+3,PIN_INPUT);
    3b96:	81 e0       	ldi	r24, 0x01	; 1
    3b98:	67 e0       	ldi	r22, 0x07	; 7
    3b9a:	40 e0       	ldi	r20, 0x00	; 0
    3b9c:	0e 94 28 0c 	call	0x1850	; 0x1850 <GPIO_setupPinDirection>

	GPIO_setupPinDirection(KEYPAD_COL_PORT,KEYPAD_FIRST_COL_PIN,PIN_INPUT);
    3ba0:	83 e0       	ldi	r24, 0x03	; 3
    3ba2:	62 e0       	ldi	r22, 0x02	; 2
    3ba4:	40 e0       	ldi	r20, 0x00	; 0
    3ba6:	0e 94 28 0c 	call	0x1850	; 0x1850 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_COL_PORT,KEYPAD_FIRST_COL_PIN+1,PIN_INPUT);
    3baa:	83 e0       	ldi	r24, 0x03	; 3
    3bac:	63 e0       	ldi	r22, 0x03	; 3
    3bae:	40 e0       	ldi	r20, 0x00	; 0
    3bb0:	0e 94 28 0c 	call	0x1850	; 0x1850 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_COL_PORT,KEYPAD_FIRST_COL_PIN+2,PIN_INPUT);
    3bb4:	83 e0       	ldi	r24, 0x03	; 3
    3bb6:	64 e0       	ldi	r22, 0x04	; 4
    3bb8:	40 e0       	ldi	r20, 0x00	; 0
    3bba:	0e 94 28 0c 	call	0x1850	; 0x1850 <GPIO_setupPinDirection>
#if(KEYPAD_NUM_OF_COLS == 4)
	GPIO_setupPinDirection(KEYPAD_COL_PORT,KEYPAD_FIRST_COL_PIN+3,PIN_INPUT);
    3bbe:	83 e0       	ldi	r24, 0x03	; 3
    3bc0:	65 e0       	ldi	r22, 0x05	; 5
    3bc2:	40 e0       	ldi	r20, 0x00	; 0
    3bc4:	0e 94 28 0c 	call	0x1850	; 0x1850 <GPIO_setupPinDirection>
#endif

	while(1){

		for(row=0;row<KEYPAD_NUM_OF_ROWS;row++){
    3bc8:	18 8a       	std	Y+16, r1	; 0x10
    3bca:	b4 c0       	rjmp	.+360    	; 0x3d34 <KEYPAD_getPressedKey+0x1d0>

			GPIO_setupPinDirection(KEYPAD_ROW_PORT,KEYPAD_FIRST_ROW_PIN+row,PIN_OUTPUT);
    3bcc:	88 89       	ldd	r24, Y+16	; 0x10
    3bce:	98 2f       	mov	r25, r24
    3bd0:	9c 5f       	subi	r25, 0xFC	; 252
    3bd2:	81 e0       	ldi	r24, 0x01	; 1
    3bd4:	69 2f       	mov	r22, r25
    3bd6:	41 e0       	ldi	r20, 0x01	; 1
    3bd8:	0e 94 28 0c 	call	0x1850	; 0x1850 <GPIO_setupPinDirection>

			GPIO_writePin(KEYPAD_ROW_PORT,KEYPAD_FIRST_ROW_PIN+row,KEYPAD_PRESSED);
    3bdc:	88 89       	ldd	r24, Y+16	; 0x10
    3bde:	98 2f       	mov	r25, r24
    3be0:	9c 5f       	subi	r25, 0xFC	; 252
    3be2:	81 e0       	ldi	r24, 0x01	; 1
    3be4:	69 2f       	mov	r22, r25
    3be6:	40 e0       	ldi	r20, 0x00	; 0
    3be8:	0e 94 13 0d 	call	0x1a26	; 0x1a26 <GPIO_writePin>

			for(col=0;col<KEYPAD_NUM_OF_COLS;col++){
    3bec:	1f 86       	std	Y+15, r1	; 0x0f
    3bee:	22 c0       	rjmp	.+68     	; 0x3c34 <KEYPAD_getPressedKey+0xd0>

				if(GPIO_readPin(KEYPAD_COL_PORT,KEYPAD_FIRST_COL_PIN+col) == KEYPAD_PRESSED){
    3bf0:	8f 85       	ldd	r24, Y+15	; 0x0f
    3bf2:	98 2f       	mov	r25, r24
    3bf4:	9e 5f       	subi	r25, 0xFE	; 254
    3bf6:	83 e0       	ldi	r24, 0x03	; 3
    3bf8:	69 2f       	mov	r22, r25
    3bfa:	0e 94 fe 0d 	call	0x1bfc	; 0x1bfc <GPIO_readPin>
    3bfe:	88 23       	and	r24, r24
    3c00:	b1 f4       	brne	.+44     	; 0x3c2e <KEYPAD_getPressedKey+0xca>
#if(KEYPAD_NUM_OF_COLS == 3)
					return KEYPAD_4x3_adjustKey((row*KEYPAD_NUM_OF_COLS)+col+1);
#elif(KEYPAD_NUM_OF_COLS == 4)

				#ifdef STANDARD_KEYPAD
					return (KEYPAD_4x4_adjustKey((row*KEYPAD_NUM_OF_COLS)+col+1));
    3c02:	88 89       	ldd	r24, Y+16	; 0x10
    3c04:	88 2f       	mov	r24, r24
    3c06:	90 e0       	ldi	r25, 0x00	; 0
    3c08:	88 0f       	add	r24, r24
    3c0a:	99 1f       	adc	r25, r25
    3c0c:	88 0f       	add	r24, r24
    3c0e:	99 1f       	adc	r25, r25
    3c10:	98 2f       	mov	r25, r24
    3c12:	8f 85       	ldd	r24, Y+15	; 0x0f
    3c14:	89 0f       	add	r24, r25
    3c16:	8f 5f       	subi	r24, 0xFF	; 255
    3c18:	0e 94 9f 1e 	call	0x3d3e	; 0x3d3e <KEYPAD_4x4_adjustKey>

			GPIO_setupPinDirection(KEYPAD_ROW_PORT,KEYPAD_FIRST_ROW_PIN+row,PIN_INPUT);
			_delay_ms(5);
		}//end outer for
	}//end while
}
    3c1c:	60 96       	adiw	r28, 0x10	; 16
    3c1e:	0f b6       	in	r0, 0x3f	; 63
    3c20:	f8 94       	cli
    3c22:	de bf       	out	0x3e, r29	; 62
    3c24:	0f be       	out	0x3f, r0	; 63
    3c26:	cd bf       	out	0x3d, r28	; 61
    3c28:	cf 91       	pop	r28
    3c2a:	df 91       	pop	r29
    3c2c:	08 95       	ret

			GPIO_setupPinDirection(KEYPAD_ROW_PORT,KEYPAD_FIRST_ROW_PIN+row,PIN_OUTPUT);

			GPIO_writePin(KEYPAD_ROW_PORT,KEYPAD_FIRST_ROW_PIN+row,KEYPAD_PRESSED);

			for(col=0;col<KEYPAD_NUM_OF_COLS;col++){
    3c2e:	8f 85       	ldd	r24, Y+15	; 0x0f
    3c30:	8f 5f       	subi	r24, 0xFF	; 255
    3c32:	8f 87       	std	Y+15, r24	; 0x0f
    3c34:	8f 85       	ldd	r24, Y+15	; 0x0f
    3c36:	84 30       	cpi	r24, 0x04	; 4
    3c38:	d8 f2       	brcs	.-74     	; 0x3bf0 <KEYPAD_getPressedKey+0x8c>

#endif
				}
			}//end inner for

			GPIO_setupPinDirection(KEYPAD_ROW_PORT,KEYPAD_FIRST_ROW_PIN+row,PIN_INPUT);
    3c3a:	88 89       	ldd	r24, Y+16	; 0x10
    3c3c:	98 2f       	mov	r25, r24
    3c3e:	9c 5f       	subi	r25, 0xFC	; 252
    3c40:	81 e0       	ldi	r24, 0x01	; 1
    3c42:	69 2f       	mov	r22, r25
    3c44:	40 e0       	ldi	r20, 0x00	; 0
    3c46:	0e 94 28 0c 	call	0x1850	; 0x1850 <GPIO_setupPinDirection>
    3c4a:	80 e0       	ldi	r24, 0x00	; 0
    3c4c:	90 e0       	ldi	r25, 0x00	; 0
    3c4e:	a0 ea       	ldi	r26, 0xA0	; 160
    3c50:	b0 e4       	ldi	r27, 0x40	; 64
    3c52:	8b 87       	std	Y+11, r24	; 0x0b
    3c54:	9c 87       	std	Y+12, r25	; 0x0c
    3c56:	ad 87       	std	Y+13, r26	; 0x0d
    3c58:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3c5a:	6b 85       	ldd	r22, Y+11	; 0x0b
    3c5c:	7c 85       	ldd	r23, Y+12	; 0x0c
    3c5e:	8d 85       	ldd	r24, Y+13	; 0x0d
    3c60:	9e 85       	ldd	r25, Y+14	; 0x0e
    3c62:	20 e0       	ldi	r18, 0x00	; 0
    3c64:	30 e0       	ldi	r19, 0x00	; 0
    3c66:	4a e7       	ldi	r20, 0x7A	; 122
    3c68:	53 e4       	ldi	r21, 0x43	; 67
    3c6a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3c6e:	dc 01       	movw	r26, r24
    3c70:	cb 01       	movw	r24, r22
    3c72:	8f 83       	std	Y+7, r24	; 0x07
    3c74:	98 87       	std	Y+8, r25	; 0x08
    3c76:	a9 87       	std	Y+9, r26	; 0x09
    3c78:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3c7a:	6f 81       	ldd	r22, Y+7	; 0x07
    3c7c:	78 85       	ldd	r23, Y+8	; 0x08
    3c7e:	89 85       	ldd	r24, Y+9	; 0x09
    3c80:	9a 85       	ldd	r25, Y+10	; 0x0a
    3c82:	20 e0       	ldi	r18, 0x00	; 0
    3c84:	30 e0       	ldi	r19, 0x00	; 0
    3c86:	40 e8       	ldi	r20, 0x80	; 128
    3c88:	5f e3       	ldi	r21, 0x3F	; 63
    3c8a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3c8e:	88 23       	and	r24, r24
    3c90:	2c f4       	brge	.+10     	; 0x3c9c <KEYPAD_getPressedKey+0x138>
		__ticks = 1;
    3c92:	81 e0       	ldi	r24, 0x01	; 1
    3c94:	90 e0       	ldi	r25, 0x00	; 0
    3c96:	9e 83       	std	Y+6, r25	; 0x06
    3c98:	8d 83       	std	Y+5, r24	; 0x05
    3c9a:	3f c0       	rjmp	.+126    	; 0x3d1a <KEYPAD_getPressedKey+0x1b6>
	else if (__tmp > 65535)
    3c9c:	6f 81       	ldd	r22, Y+7	; 0x07
    3c9e:	78 85       	ldd	r23, Y+8	; 0x08
    3ca0:	89 85       	ldd	r24, Y+9	; 0x09
    3ca2:	9a 85       	ldd	r25, Y+10	; 0x0a
    3ca4:	20 e0       	ldi	r18, 0x00	; 0
    3ca6:	3f ef       	ldi	r19, 0xFF	; 255
    3ca8:	4f e7       	ldi	r20, 0x7F	; 127
    3caa:	57 e4       	ldi	r21, 0x47	; 71
    3cac:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3cb0:	18 16       	cp	r1, r24
    3cb2:	4c f5       	brge	.+82     	; 0x3d06 <KEYPAD_getPressedKey+0x1a2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3cb4:	6b 85       	ldd	r22, Y+11	; 0x0b
    3cb6:	7c 85       	ldd	r23, Y+12	; 0x0c
    3cb8:	8d 85       	ldd	r24, Y+13	; 0x0d
    3cba:	9e 85       	ldd	r25, Y+14	; 0x0e
    3cbc:	20 e0       	ldi	r18, 0x00	; 0
    3cbe:	30 e0       	ldi	r19, 0x00	; 0
    3cc0:	40 e2       	ldi	r20, 0x20	; 32
    3cc2:	51 e4       	ldi	r21, 0x41	; 65
    3cc4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3cc8:	dc 01       	movw	r26, r24
    3cca:	cb 01       	movw	r24, r22
    3ccc:	bc 01       	movw	r22, r24
    3cce:	cd 01       	movw	r24, r26
    3cd0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3cd4:	dc 01       	movw	r26, r24
    3cd6:	cb 01       	movw	r24, r22
    3cd8:	9e 83       	std	Y+6, r25	; 0x06
    3cda:	8d 83       	std	Y+5, r24	; 0x05
    3cdc:	0f c0       	rjmp	.+30     	; 0x3cfc <KEYPAD_getPressedKey+0x198>
    3cde:	89 e1       	ldi	r24, 0x19	; 25
    3ce0:	90 e0       	ldi	r25, 0x00	; 0
    3ce2:	9c 83       	std	Y+4, r25	; 0x04
    3ce4:	8b 83       	std	Y+3, r24	; 0x03
    3ce6:	8b 81       	ldd	r24, Y+3	; 0x03
    3ce8:	9c 81       	ldd	r25, Y+4	; 0x04
    3cea:	01 97       	sbiw	r24, 0x01	; 1
    3cec:	f1 f7       	brne	.-4      	; 0x3cea <KEYPAD_getPressedKey+0x186>
    3cee:	9c 83       	std	Y+4, r25	; 0x04
    3cf0:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3cf2:	8d 81       	ldd	r24, Y+5	; 0x05
    3cf4:	9e 81       	ldd	r25, Y+6	; 0x06
    3cf6:	01 97       	sbiw	r24, 0x01	; 1
    3cf8:	9e 83       	std	Y+6, r25	; 0x06
    3cfa:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3cfc:	8d 81       	ldd	r24, Y+5	; 0x05
    3cfe:	9e 81       	ldd	r25, Y+6	; 0x06
    3d00:	00 97       	sbiw	r24, 0x00	; 0
    3d02:	69 f7       	brne	.-38     	; 0x3cde <KEYPAD_getPressedKey+0x17a>
    3d04:	14 c0       	rjmp	.+40     	; 0x3d2e <KEYPAD_getPressedKey+0x1ca>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3d06:	6f 81       	ldd	r22, Y+7	; 0x07
    3d08:	78 85       	ldd	r23, Y+8	; 0x08
    3d0a:	89 85       	ldd	r24, Y+9	; 0x09
    3d0c:	9a 85       	ldd	r25, Y+10	; 0x0a
    3d0e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3d12:	dc 01       	movw	r26, r24
    3d14:	cb 01       	movw	r24, r22
    3d16:	9e 83       	std	Y+6, r25	; 0x06
    3d18:	8d 83       	std	Y+5, r24	; 0x05
    3d1a:	8d 81       	ldd	r24, Y+5	; 0x05
    3d1c:	9e 81       	ldd	r25, Y+6	; 0x06
    3d1e:	9a 83       	std	Y+2, r25	; 0x02
    3d20:	89 83       	std	Y+1, r24	; 0x01
    3d22:	89 81       	ldd	r24, Y+1	; 0x01
    3d24:	9a 81       	ldd	r25, Y+2	; 0x02
    3d26:	01 97       	sbiw	r24, 0x01	; 1
    3d28:	f1 f7       	brne	.-4      	; 0x3d26 <KEYPAD_getPressedKey+0x1c2>
    3d2a:	9a 83       	std	Y+2, r25	; 0x02
    3d2c:	89 83       	std	Y+1, r24	; 0x01
	GPIO_setupPinDirection(KEYPAD_COL_PORT,KEYPAD_FIRST_COL_PIN+3,PIN_INPUT);
#endif

	while(1){

		for(row=0;row<KEYPAD_NUM_OF_ROWS;row++){
    3d2e:	88 89       	ldd	r24, Y+16	; 0x10
    3d30:	8f 5f       	subi	r24, 0xFF	; 255
    3d32:	88 8b       	std	Y+16, r24	; 0x10
    3d34:	88 89       	ldd	r24, Y+16	; 0x10
    3d36:	84 30       	cpi	r24, 0x04	; 4
    3d38:	08 f4       	brcc	.+2      	; 0x3d3c <KEYPAD_getPressedKey+0x1d8>
    3d3a:	48 cf       	rjmp	.-368    	; 0x3bcc <KEYPAD_getPressedKey+0x68>
    3d3c:	45 cf       	rjmp	.-374    	; 0x3bc8 <KEYPAD_getPressedKey+0x64>

00003d3e <KEYPAD_4x4_adjustKey>:
}//end rev4x4
#endif /* STANDARD */


#ifdef STANDARD_KEYPAD
static uint8 KEYPAD_4x4_adjustKey(uint8 num){
    3d3e:	df 93       	push	r29
    3d40:	cf 93       	push	r28
    3d42:	00 d0       	rcall	.+0      	; 0x3d44 <KEYPAD_4x4_adjustKey+0x6>
    3d44:	00 d0       	rcall	.+0      	; 0x3d46 <KEYPAD_4x4_adjustKey+0x8>
    3d46:	cd b7       	in	r28, 0x3d	; 61
    3d48:	de b7       	in	r29, 0x3e	; 62
    3d4a:	89 83       	std	Y+1, r24	; 0x01

	switch(num){
    3d4c:	89 81       	ldd	r24, Y+1	; 0x01
    3d4e:	28 2f       	mov	r18, r24
    3d50:	30 e0       	ldi	r19, 0x00	; 0
    3d52:	3c 83       	std	Y+4, r19	; 0x04
    3d54:	2b 83       	std	Y+3, r18	; 0x03
    3d56:	8b 81       	ldd	r24, Y+3	; 0x03
    3d58:	9c 81       	ldd	r25, Y+4	; 0x04
    3d5a:	8a 30       	cpi	r24, 0x0A	; 10
    3d5c:	91 05       	cpc	r25, r1
    3d5e:	09 f4       	brne	.+2      	; 0x3d62 <KEYPAD_4x4_adjustKey+0x24>
    3d60:	5d c0       	rjmp	.+186    	; 0x3e1c <KEYPAD_4x4_adjustKey+0xde>
    3d62:	2b 81       	ldd	r18, Y+3	; 0x03
    3d64:	3c 81       	ldd	r19, Y+4	; 0x04
    3d66:	2b 30       	cpi	r18, 0x0B	; 11
    3d68:	31 05       	cpc	r19, r1
    3d6a:	0c f5       	brge	.+66     	; 0x3dae <KEYPAD_4x4_adjustKey+0x70>
    3d6c:	8b 81       	ldd	r24, Y+3	; 0x03
    3d6e:	9c 81       	ldd	r25, Y+4	; 0x04
    3d70:	86 30       	cpi	r24, 0x06	; 6
    3d72:	91 05       	cpc	r25, r1
    3d74:	09 f4       	brne	.+2      	; 0x3d78 <KEYPAD_4x4_adjustKey+0x3a>
    3d76:	46 c0       	rjmp	.+140    	; 0x3e04 <KEYPAD_4x4_adjustKey+0xc6>
    3d78:	2b 81       	ldd	r18, Y+3	; 0x03
    3d7a:	3c 81       	ldd	r19, Y+4	; 0x04
    3d7c:	27 30       	cpi	r18, 0x07	; 7
    3d7e:	31 05       	cpc	r19, r1
    3d80:	5c f4       	brge	.+22     	; 0x3d98 <KEYPAD_4x4_adjustKey+0x5a>
    3d82:	8b 81       	ldd	r24, Y+3	; 0x03
    3d84:	9c 81       	ldd	r25, Y+4	; 0x04
    3d86:	84 30       	cpi	r24, 0x04	; 4
    3d88:	91 05       	cpc	r25, r1
    3d8a:	b1 f1       	breq	.+108    	; 0x3df8 <KEYPAD_4x4_adjustKey+0xba>
    3d8c:	2b 81       	ldd	r18, Y+3	; 0x03
    3d8e:	3c 81       	ldd	r19, Y+4	; 0x04
    3d90:	25 30       	cpi	r18, 0x05	; 5
    3d92:	31 05       	cpc	r19, r1
    3d94:	a1 f1       	breq	.+104    	; 0x3dfe <KEYPAD_4x4_adjustKey+0xc0>
    3d96:	56 c0       	rjmp	.+172    	; 0x3e44 <KEYPAD_4x4_adjustKey+0x106>
    3d98:	8b 81       	ldd	r24, Y+3	; 0x03
    3d9a:	9c 81       	ldd	r25, Y+4	; 0x04
    3d9c:	88 30       	cpi	r24, 0x08	; 8
    3d9e:	91 05       	cpc	r25, r1
    3da0:	b9 f1       	breq	.+110    	; 0x3e10 <KEYPAD_4x4_adjustKey+0xd2>
    3da2:	2b 81       	ldd	r18, Y+3	; 0x03
    3da4:	3c 81       	ldd	r19, Y+4	; 0x04
    3da6:	29 30       	cpi	r18, 0x09	; 9
    3da8:	31 05       	cpc	r19, r1
    3daa:	ac f5       	brge	.+106    	; 0x3e16 <KEYPAD_4x4_adjustKey+0xd8>
    3dac:	2e c0       	rjmp	.+92     	; 0x3e0a <KEYPAD_4x4_adjustKey+0xcc>
    3dae:	8b 81       	ldd	r24, Y+3	; 0x03
    3db0:	9c 81       	ldd	r25, Y+4	; 0x04
    3db2:	8d 30       	cpi	r24, 0x0D	; 13
    3db4:	91 05       	cpc	r25, r1
    3db6:	d9 f1       	breq	.+118    	; 0x3e2e <KEYPAD_4x4_adjustKey+0xf0>
    3db8:	2b 81       	ldd	r18, Y+3	; 0x03
    3dba:	3c 81       	ldd	r19, Y+4	; 0x04
    3dbc:	2e 30       	cpi	r18, 0x0E	; 14
    3dbe:	31 05       	cpc	r19, r1
    3dc0:	5c f4       	brge	.+22     	; 0x3dd8 <KEYPAD_4x4_adjustKey+0x9a>
    3dc2:	8b 81       	ldd	r24, Y+3	; 0x03
    3dc4:	9c 81       	ldd	r25, Y+4	; 0x04
    3dc6:	8b 30       	cpi	r24, 0x0B	; 11
    3dc8:	91 05       	cpc	r25, r1
    3dca:	59 f1       	breq	.+86     	; 0x3e22 <KEYPAD_4x4_adjustKey+0xe4>
    3dcc:	2b 81       	ldd	r18, Y+3	; 0x03
    3dce:	3c 81       	ldd	r19, Y+4	; 0x04
    3dd0:	2c 30       	cpi	r18, 0x0C	; 12
    3dd2:	31 05       	cpc	r19, r1
    3dd4:	49 f1       	breq	.+82     	; 0x3e28 <KEYPAD_4x4_adjustKey+0xea>
    3dd6:	36 c0       	rjmp	.+108    	; 0x3e44 <KEYPAD_4x4_adjustKey+0x106>
    3dd8:	8b 81       	ldd	r24, Y+3	; 0x03
    3dda:	9c 81       	ldd	r25, Y+4	; 0x04
    3ddc:	8f 30       	cpi	r24, 0x0F	; 15
    3dde:	91 05       	cpc	r25, r1
    3de0:	59 f1       	breq	.+86     	; 0x3e38 <KEYPAD_4x4_adjustKey+0xfa>
    3de2:	2b 81       	ldd	r18, Y+3	; 0x03
    3de4:	3c 81       	ldd	r19, Y+4	; 0x04
    3de6:	2f 30       	cpi	r18, 0x0F	; 15
    3de8:	31 05       	cpc	r19, r1
    3dea:	24 f1       	brlt	.+72     	; 0x3e34 <KEYPAD_4x4_adjustKey+0xf6>
    3dec:	8b 81       	ldd	r24, Y+3	; 0x03
    3dee:	9c 81       	ldd	r25, Y+4	; 0x04
    3df0:	80 31       	cpi	r24, 0x10	; 16
    3df2:	91 05       	cpc	r25, r1
    3df4:	21 f1       	breq	.+72     	; 0x3e3e <KEYPAD_4x4_adjustKey+0x100>
    3df6:	26 c0       	rjmp	.+76     	; 0x3e44 <KEYPAD_4x4_adjustKey+0x106>
	case 4:
		return 'A';
    3df8:	91 e4       	ldi	r25, 0x41	; 65
    3dfa:	9a 83       	std	Y+2, r25	; 0x02
    3dfc:	25 c0       	rjmp	.+74     	; 0x3e48 <KEYPAD_4x4_adjustKey+0x10a>
	case 5:
		return 4;
    3dfe:	24 e0       	ldi	r18, 0x04	; 4
    3e00:	2a 83       	std	Y+2, r18	; 0x02
    3e02:	22 c0       	rjmp	.+68     	; 0x3e48 <KEYPAD_4x4_adjustKey+0x10a>
	case 6:
		return 5;
    3e04:	35 e0       	ldi	r19, 0x05	; 5
    3e06:	3a 83       	std	Y+2, r19	; 0x02
    3e08:	1f c0       	rjmp	.+62     	; 0x3e48 <KEYPAD_4x4_adjustKey+0x10a>
	case 7:
		return 6;
    3e0a:	86 e0       	ldi	r24, 0x06	; 6
    3e0c:	8a 83       	std	Y+2, r24	; 0x02
    3e0e:	1c c0       	rjmp	.+56     	; 0x3e48 <KEYPAD_4x4_adjustKey+0x10a>
	case 8:
		return 'B';
    3e10:	92 e4       	ldi	r25, 0x42	; 66
    3e12:	9a 83       	std	Y+2, r25	; 0x02
    3e14:	19 c0       	rjmp	.+50     	; 0x3e48 <KEYPAD_4x4_adjustKey+0x10a>
	case 9:
		return 7;
    3e16:	27 e0       	ldi	r18, 0x07	; 7
    3e18:	2a 83       	std	Y+2, r18	; 0x02
    3e1a:	16 c0       	rjmp	.+44     	; 0x3e48 <KEYPAD_4x4_adjustKey+0x10a>
	case 10:
		return 8;
    3e1c:	38 e0       	ldi	r19, 0x08	; 8
    3e1e:	3a 83       	std	Y+2, r19	; 0x02
    3e20:	13 c0       	rjmp	.+38     	; 0x3e48 <KEYPAD_4x4_adjustKey+0x10a>
	case 11:
		return 9;
    3e22:	89 e0       	ldi	r24, 0x09	; 9
    3e24:	8a 83       	std	Y+2, r24	; 0x02
    3e26:	10 c0       	rjmp	.+32     	; 0x3e48 <KEYPAD_4x4_adjustKey+0x10a>
	case 12:
		return 'C';
    3e28:	93 e4       	ldi	r25, 0x43	; 67
    3e2a:	9a 83       	std	Y+2, r25	; 0x02
    3e2c:	0d c0       	rjmp	.+26     	; 0x3e48 <KEYPAD_4x4_adjustKey+0x10a>
	case 13:
		return '*';
    3e2e:	2a e2       	ldi	r18, 0x2A	; 42
    3e30:	2a 83       	std	Y+2, r18	; 0x02
    3e32:	0a c0       	rjmp	.+20     	; 0x3e48 <KEYPAD_4x4_adjustKey+0x10a>
	case 14:
		return 0;
    3e34:	1a 82       	std	Y+2, r1	; 0x02
    3e36:	08 c0       	rjmp	.+16     	; 0x3e48 <KEYPAD_4x4_adjustKey+0x10a>
	case 15:
		return '#';
    3e38:	33 e2       	ldi	r19, 0x23	; 35
    3e3a:	3a 83       	std	Y+2, r19	; 0x02
    3e3c:	05 c0       	rjmp	.+10     	; 0x3e48 <KEYPAD_4x4_adjustKey+0x10a>
	case 16:
		return 'D';
    3e3e:	84 e4       	ldi	r24, 0x44	; 68
    3e40:	8a 83       	std	Y+2, r24	; 0x02
    3e42:	02 c0       	rjmp	.+4      	; 0x3e48 <KEYPAD_4x4_adjustKey+0x10a>
	default:
		return num;
    3e44:	99 81       	ldd	r25, Y+1	; 0x01
    3e46:	9a 83       	std	Y+2, r25	; 0x02
    3e48:	8a 81       	ldd	r24, Y+2	; 0x02
	}//end switch
}//end 4x4
    3e4a:	0f 90       	pop	r0
    3e4c:	0f 90       	pop	r0
    3e4e:	0f 90       	pop	r0
    3e50:	0f 90       	pop	r0
    3e52:	cf 91       	pop	r28
    3e54:	df 91       	pop	r29
    3e56:	08 95       	ret

00003e58 <PB_init>:
#include"MCAL Atmega32/GPIO.h"

/***************************************************************************
 *                          Functions definition
 *************************************************************************** */
void PB_init(uint8 PB_num){
    3e58:	df 93       	push	r29
    3e5a:	cf 93       	push	r28
    3e5c:	0f 92       	push	r0
    3e5e:	cd b7       	in	r28, 0x3d	; 61
    3e60:	de b7       	in	r29, 0x3e	; 62
    3e62:	89 83       	std	Y+1, r24	; 0x01

	GPIO_setupPinDirection(PB_PORT,PB_num,PIN_INPUT);
    3e64:	80 e0       	ldi	r24, 0x00	; 0
    3e66:	69 81       	ldd	r22, Y+1	; 0x01
    3e68:	40 e0       	ldi	r20, 0x00	; 0
    3e6a:	0e 94 28 0c 	call	0x1850	; 0x1850 <GPIO_setupPinDirection>
}
    3e6e:	0f 90       	pop	r0
    3e70:	cf 91       	pop	r28
    3e72:	df 91       	pop	r29
    3e74:	08 95       	ret

00003e76 <PB_getReading>:


uint8 PB_getReading(uint8 PB_num){
    3e76:	df 93       	push	r29
    3e78:	cf 93       	push	r28
    3e7a:	0f 92       	push	r0
    3e7c:	cd b7       	in	r28, 0x3d	; 61
    3e7e:	de b7       	in	r29, 0x3e	; 62
    3e80:	89 83       	std	Y+1, r24	; 0x01

	return GPIO_readPin(PB_PORT,PB_num);
    3e82:	80 e0       	ldi	r24, 0x00	; 0
    3e84:	69 81       	ldd	r22, Y+1	; 0x01
    3e86:	0e 94 fe 0d 	call	0x1bfc	; 0x1bfc <GPIO_readPin>
}
    3e8a:	0f 90       	pop	r0
    3e8c:	cf 91       	pop	r28
    3e8e:	df 91       	pop	r29
    3e90:	08 95       	ret

00003e92 <RELAY_init>:

/***************************************************************************
 *                           Functions definitions
 *************************************************************************** */

void RELAY_init(uint8 relay_num){
    3e92:	df 93       	push	r29
    3e94:	cf 93       	push	r28
    3e96:	0f 92       	push	r0
    3e98:	cd b7       	in	r28, 0x3d	; 61
    3e9a:	de b7       	in	r29, 0x3e	; 62
    3e9c:	89 83       	std	Y+1, r24	; 0x01

	GPIO_setupPinDirection(RELAYS_PORT,relay_num,PIN_OUTPUT);
    3e9e:	81 e0       	ldi	r24, 0x01	; 1
    3ea0:	69 81       	ldd	r22, Y+1	; 0x01
    3ea2:	41 e0       	ldi	r20, 0x01	; 1
    3ea4:	0e 94 28 0c 	call	0x1850	; 0x1850 <GPIO_setupPinDirection>
}
    3ea8:	0f 90       	pop	r0
    3eaa:	cf 91       	pop	r28
    3eac:	df 91       	pop	r29
    3eae:	08 95       	ret

00003eb0 <RELAY_on>:

void RELAY_on(uint8 relay_num){
    3eb0:	df 93       	push	r29
    3eb2:	cf 93       	push	r28
    3eb4:	0f 92       	push	r0
    3eb6:	cd b7       	in	r28, 0x3d	; 61
    3eb8:	de b7       	in	r29, 0x3e	; 62
    3eba:	89 83       	std	Y+1, r24	; 0x01

	GPIO_writePin(RELAYS_PORT,relay_num,HIGH);
    3ebc:	81 e0       	ldi	r24, 0x01	; 1
    3ebe:	69 81       	ldd	r22, Y+1	; 0x01
    3ec0:	41 e0       	ldi	r20, 0x01	; 1
    3ec2:	0e 94 13 0d 	call	0x1a26	; 0x1a26 <GPIO_writePin>
}
    3ec6:	0f 90       	pop	r0
    3ec8:	cf 91       	pop	r28
    3eca:	df 91       	pop	r29
    3ecc:	08 95       	ret

00003ece <RELAY_off>:

void RELAY_off(uint8 relay_num){
    3ece:	df 93       	push	r29
    3ed0:	cf 93       	push	r28
    3ed2:	0f 92       	push	r0
    3ed4:	cd b7       	in	r28, 0x3d	; 61
    3ed6:	de b7       	in	r29, 0x3e	; 62
    3ed8:	89 83       	std	Y+1, r24	; 0x01

	GPIO_writePin(RELAYS_PORT,relay_num,LOW);
    3eda:	81 e0       	ldi	r24, 0x01	; 1
    3edc:	69 81       	ldd	r22, Y+1	; 0x01
    3ede:	40 e0       	ldi	r20, 0x00	; 0
    3ee0:	0e 94 13 0d 	call	0x1a26	; 0x1a26 <GPIO_writePin>
}
    3ee4:	0f 90       	pop	r0
    3ee6:	cf 91       	pop	r28
    3ee8:	df 91       	pop	r29
    3eea:	08 95       	ret

00003eec <ULTRASONIC_init>:

/****************************************************************************
 *                         Function definition
 * *************************************************************************/

void ULTRASONIC_init(void){
    3eec:	df 93       	push	r29
    3eee:	cf 93       	push	r28
    3ef0:	cd b7       	in	r28, 0x3d	; 61
    3ef2:	de b7       	in	r29, 0x3e	; 62

	ICU_init(&ICU_configrations);
    3ef4:	8d e6       	ldi	r24, 0x6D	; 109
    3ef6:	91 e0       	ldi	r25, 0x01	; 1
    3ef8:	0e 94 2b 08 	call	0x1056	; 0x1056 <ICU_init>
	ICU_setCallBack(ULTRASONIC_edgeProcessing);
    3efc:	83 e9       	ldi	r24, 0x93	; 147
    3efe:	90 e2       	ldi	r25, 0x20	; 32
    3f00:	0e 94 6f 08 	call	0x10de	; 0x10de <ICU_setCallBack>
	GPIO_setupPinDirection(ULTRASONIC_TRIGGER_PORT,ULTRASONIC_TRIGGER_PIN,PIN_OUTPUT);
    3f04:	81 e0       	ldi	r24, 0x01	; 1
    3f06:	65 e0       	ldi	r22, 0x05	; 5
    3f08:	41 e0       	ldi	r20, 0x01	; 1
    3f0a:	0e 94 28 0c 	call	0x1850	; 0x1850 <GPIO_setupPinDirection>

}
    3f0e:	cf 91       	pop	r28
    3f10:	df 91       	pop	r29
    3f12:	08 95       	ret

00003f14 <ULTRASONIC_trigger>:

void ULTRASONIC_trigger(void){
    3f14:	df 93       	push	r29
    3f16:	cf 93       	push	r28
    3f18:	cd b7       	in	r28, 0x3d	; 61
    3f1a:	de b7       	in	r29, 0x3e	; 62
    3f1c:	68 97       	sbiw	r28, 0x18	; 24
    3f1e:	0f b6       	in	r0, 0x3f	; 63
    3f20:	f8 94       	cli
    3f22:	de bf       	out	0x3e, r29	; 62
    3f24:	0f be       	out	0x3f, r0	; 63
    3f26:	cd bf       	out	0x3d, r28	; 61

	GPIO_writePin(ULTRASONIC_TRIGGER_PORT,ULTRASONIC_TRIGGER_PIN,HIGH);
    3f28:	81 e0       	ldi	r24, 0x01	; 1
    3f2a:	65 e0       	ldi	r22, 0x05	; 5
    3f2c:	41 e0       	ldi	r20, 0x01	; 1
    3f2e:	0e 94 13 0d 	call	0x1a26	; 0x1a26 <GPIO_writePin>
    3f32:	80 e0       	ldi	r24, 0x00	; 0
    3f34:	90 e0       	ldi	r25, 0x00	; 0
    3f36:	a0 e4       	ldi	r26, 0x40	; 64
    3f38:	b1 e4       	ldi	r27, 0x41	; 65
    3f3a:	8d 8b       	std	Y+21, r24	; 0x15
    3f3c:	9e 8b       	std	Y+22, r25	; 0x16
    3f3e:	af 8b       	std	Y+23, r26	; 0x17
    3f40:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    3f42:	6d 89       	ldd	r22, Y+21	; 0x15
    3f44:	7e 89       	ldd	r23, Y+22	; 0x16
    3f46:	8f 89       	ldd	r24, Y+23	; 0x17
    3f48:	98 8d       	ldd	r25, Y+24	; 0x18
    3f4a:	2b ea       	ldi	r18, 0xAB	; 171
    3f4c:	3a ea       	ldi	r19, 0xAA	; 170
    3f4e:	4a ea       	ldi	r20, 0xAA	; 170
    3f50:	5e e3       	ldi	r21, 0x3E	; 62
    3f52:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3f56:	dc 01       	movw	r26, r24
    3f58:	cb 01       	movw	r24, r22
    3f5a:	89 8b       	std	Y+17, r24	; 0x11
    3f5c:	9a 8b       	std	Y+18, r25	; 0x12
    3f5e:	ab 8b       	std	Y+19, r26	; 0x13
    3f60:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    3f62:	69 89       	ldd	r22, Y+17	; 0x11
    3f64:	7a 89       	ldd	r23, Y+18	; 0x12
    3f66:	8b 89       	ldd	r24, Y+19	; 0x13
    3f68:	9c 89       	ldd	r25, Y+20	; 0x14
    3f6a:	20 e0       	ldi	r18, 0x00	; 0
    3f6c:	30 e0       	ldi	r19, 0x00	; 0
    3f6e:	40 e8       	ldi	r20, 0x80	; 128
    3f70:	5f e3       	ldi	r21, 0x3F	; 63
    3f72:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3f76:	88 23       	and	r24, r24
    3f78:	1c f4       	brge	.+6      	; 0x3f80 <ULTRASONIC_trigger+0x6c>
		__ticks = 1;
    3f7a:	81 e0       	ldi	r24, 0x01	; 1
    3f7c:	88 8b       	std	Y+16, r24	; 0x10
    3f7e:	91 c0       	rjmp	.+290    	; 0x40a2 <ULTRASONIC_trigger+0x18e>
	else if (__tmp > 255)
    3f80:	69 89       	ldd	r22, Y+17	; 0x11
    3f82:	7a 89       	ldd	r23, Y+18	; 0x12
    3f84:	8b 89       	ldd	r24, Y+19	; 0x13
    3f86:	9c 89       	ldd	r25, Y+20	; 0x14
    3f88:	20 e0       	ldi	r18, 0x00	; 0
    3f8a:	30 e0       	ldi	r19, 0x00	; 0
    3f8c:	4f e7       	ldi	r20, 0x7F	; 127
    3f8e:	53 e4       	ldi	r21, 0x43	; 67
    3f90:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3f94:	18 16       	cp	r1, r24
    3f96:	0c f0       	brlt	.+2      	; 0x3f9a <ULTRASONIC_trigger+0x86>
    3f98:	7b c0       	rjmp	.+246    	; 0x4090 <ULTRASONIC_trigger+0x17c>
	{
		_delay_ms(__us / 1000.0);
    3f9a:	6d 89       	ldd	r22, Y+21	; 0x15
    3f9c:	7e 89       	ldd	r23, Y+22	; 0x16
    3f9e:	8f 89       	ldd	r24, Y+23	; 0x17
    3fa0:	98 8d       	ldd	r25, Y+24	; 0x18
    3fa2:	20 e0       	ldi	r18, 0x00	; 0
    3fa4:	30 e0       	ldi	r19, 0x00	; 0
    3fa6:	4a e7       	ldi	r20, 0x7A	; 122
    3fa8:	54 e4       	ldi	r21, 0x44	; 68
    3faa:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    3fae:	dc 01       	movw	r26, r24
    3fb0:	cb 01       	movw	r24, r22
    3fb2:	8c 87       	std	Y+12, r24	; 0x0c
    3fb4:	9d 87       	std	Y+13, r25	; 0x0d
    3fb6:	ae 87       	std	Y+14, r26	; 0x0e
    3fb8:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3fba:	6c 85       	ldd	r22, Y+12	; 0x0c
    3fbc:	7d 85       	ldd	r23, Y+13	; 0x0d
    3fbe:	8e 85       	ldd	r24, Y+14	; 0x0e
    3fc0:	9f 85       	ldd	r25, Y+15	; 0x0f
    3fc2:	20 e0       	ldi	r18, 0x00	; 0
    3fc4:	30 e0       	ldi	r19, 0x00	; 0
    3fc6:	4a e7       	ldi	r20, 0x7A	; 122
    3fc8:	53 e4       	ldi	r21, 0x43	; 67
    3fca:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3fce:	dc 01       	movw	r26, r24
    3fd0:	cb 01       	movw	r24, r22
    3fd2:	88 87       	std	Y+8, r24	; 0x08
    3fd4:	99 87       	std	Y+9, r25	; 0x09
    3fd6:	aa 87       	std	Y+10, r26	; 0x0a
    3fd8:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    3fda:	68 85       	ldd	r22, Y+8	; 0x08
    3fdc:	79 85       	ldd	r23, Y+9	; 0x09
    3fde:	8a 85       	ldd	r24, Y+10	; 0x0a
    3fe0:	9b 85       	ldd	r25, Y+11	; 0x0b
    3fe2:	20 e0       	ldi	r18, 0x00	; 0
    3fe4:	30 e0       	ldi	r19, 0x00	; 0
    3fe6:	40 e8       	ldi	r20, 0x80	; 128
    3fe8:	5f e3       	ldi	r21, 0x3F	; 63
    3fea:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3fee:	88 23       	and	r24, r24
    3ff0:	2c f4       	brge	.+10     	; 0x3ffc <ULTRASONIC_trigger+0xe8>
		__ticks = 1;
    3ff2:	81 e0       	ldi	r24, 0x01	; 1
    3ff4:	90 e0       	ldi	r25, 0x00	; 0
    3ff6:	9f 83       	std	Y+7, r25	; 0x07
    3ff8:	8e 83       	std	Y+6, r24	; 0x06
    3ffa:	3f c0       	rjmp	.+126    	; 0x407a <ULTRASONIC_trigger+0x166>
	else if (__tmp > 65535)
    3ffc:	68 85       	ldd	r22, Y+8	; 0x08
    3ffe:	79 85       	ldd	r23, Y+9	; 0x09
    4000:	8a 85       	ldd	r24, Y+10	; 0x0a
    4002:	9b 85       	ldd	r25, Y+11	; 0x0b
    4004:	20 e0       	ldi	r18, 0x00	; 0
    4006:	3f ef       	ldi	r19, 0xFF	; 255
    4008:	4f e7       	ldi	r20, 0x7F	; 127
    400a:	57 e4       	ldi	r21, 0x47	; 71
    400c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4010:	18 16       	cp	r1, r24
    4012:	4c f5       	brge	.+82     	; 0x4066 <ULTRASONIC_trigger+0x152>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4014:	6c 85       	ldd	r22, Y+12	; 0x0c
    4016:	7d 85       	ldd	r23, Y+13	; 0x0d
    4018:	8e 85       	ldd	r24, Y+14	; 0x0e
    401a:	9f 85       	ldd	r25, Y+15	; 0x0f
    401c:	20 e0       	ldi	r18, 0x00	; 0
    401e:	30 e0       	ldi	r19, 0x00	; 0
    4020:	40 e2       	ldi	r20, 0x20	; 32
    4022:	51 e4       	ldi	r21, 0x41	; 65
    4024:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4028:	dc 01       	movw	r26, r24
    402a:	cb 01       	movw	r24, r22
    402c:	bc 01       	movw	r22, r24
    402e:	cd 01       	movw	r24, r26
    4030:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4034:	dc 01       	movw	r26, r24
    4036:	cb 01       	movw	r24, r22
    4038:	9f 83       	std	Y+7, r25	; 0x07
    403a:	8e 83       	std	Y+6, r24	; 0x06
    403c:	0f c0       	rjmp	.+30     	; 0x405c <ULTRASONIC_trigger+0x148>
    403e:	89 e1       	ldi	r24, 0x19	; 25
    4040:	90 e0       	ldi	r25, 0x00	; 0
    4042:	9d 83       	std	Y+5, r25	; 0x05
    4044:	8c 83       	std	Y+4, r24	; 0x04
    4046:	8c 81       	ldd	r24, Y+4	; 0x04
    4048:	9d 81       	ldd	r25, Y+5	; 0x05
    404a:	01 97       	sbiw	r24, 0x01	; 1
    404c:	f1 f7       	brne	.-4      	; 0x404a <ULTRASONIC_trigger+0x136>
    404e:	9d 83       	std	Y+5, r25	; 0x05
    4050:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4052:	8e 81       	ldd	r24, Y+6	; 0x06
    4054:	9f 81       	ldd	r25, Y+7	; 0x07
    4056:	01 97       	sbiw	r24, 0x01	; 1
    4058:	9f 83       	std	Y+7, r25	; 0x07
    405a:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    405c:	8e 81       	ldd	r24, Y+6	; 0x06
    405e:	9f 81       	ldd	r25, Y+7	; 0x07
    4060:	00 97       	sbiw	r24, 0x00	; 0
    4062:	69 f7       	brne	.-38     	; 0x403e <ULTRASONIC_trigger+0x12a>
    4064:	24 c0       	rjmp	.+72     	; 0x40ae <ULTRASONIC_trigger+0x19a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4066:	68 85       	ldd	r22, Y+8	; 0x08
    4068:	79 85       	ldd	r23, Y+9	; 0x09
    406a:	8a 85       	ldd	r24, Y+10	; 0x0a
    406c:	9b 85       	ldd	r25, Y+11	; 0x0b
    406e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4072:	dc 01       	movw	r26, r24
    4074:	cb 01       	movw	r24, r22
    4076:	9f 83       	std	Y+7, r25	; 0x07
    4078:	8e 83       	std	Y+6, r24	; 0x06
    407a:	8e 81       	ldd	r24, Y+6	; 0x06
    407c:	9f 81       	ldd	r25, Y+7	; 0x07
    407e:	9b 83       	std	Y+3, r25	; 0x03
    4080:	8a 83       	std	Y+2, r24	; 0x02
    4082:	8a 81       	ldd	r24, Y+2	; 0x02
    4084:	9b 81       	ldd	r25, Y+3	; 0x03
    4086:	01 97       	sbiw	r24, 0x01	; 1
    4088:	f1 f7       	brne	.-4      	; 0x4086 <ULTRASONIC_trigger+0x172>
    408a:	9b 83       	std	Y+3, r25	; 0x03
    408c:	8a 83       	std	Y+2, r24	; 0x02
    408e:	0f c0       	rjmp	.+30     	; 0x40ae <ULTRASONIC_trigger+0x19a>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    4090:	69 89       	ldd	r22, Y+17	; 0x11
    4092:	7a 89       	ldd	r23, Y+18	; 0x12
    4094:	8b 89       	ldd	r24, Y+19	; 0x13
    4096:	9c 89       	ldd	r25, Y+20	; 0x14
    4098:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    409c:	dc 01       	movw	r26, r24
    409e:	cb 01       	movw	r24, r22
    40a0:	88 8b       	std	Y+16, r24	; 0x10
    40a2:	88 89       	ldd	r24, Y+16	; 0x10
    40a4:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    40a6:	89 81       	ldd	r24, Y+1	; 0x01
    40a8:	8a 95       	dec	r24
    40aa:	f1 f7       	brne	.-4      	; 0x40a8 <ULTRASONIC_trigger+0x194>
    40ac:	89 83       	std	Y+1, r24	; 0x01
	_delay_us(12);
	GPIO_writePin(ULTRASONIC_TRIGGER_PORT,ULTRASONIC_TRIGGER_PIN,LOW);
    40ae:	81 e0       	ldi	r24, 0x01	; 1
    40b0:	65 e0       	ldi	r22, 0x05	; 5
    40b2:	40 e0       	ldi	r20, 0x00	; 0
    40b4:	0e 94 13 0d 	call	0x1a26	; 0x1a26 <GPIO_writePin>
}
    40b8:	68 96       	adiw	r28, 0x18	; 24
    40ba:	0f b6       	in	r0, 0x3f	; 63
    40bc:	f8 94       	cli
    40be:	de bf       	out	0x3e, r29	; 62
    40c0:	0f be       	out	0x3f, r0	; 63
    40c2:	cd bf       	out	0x3d, r28	; 61
    40c4:	cf 91       	pop	r28
    40c6:	df 91       	pop	r29
    40c8:	08 95       	ret

000040ca <ULTRASONIC_readDistance>:

uint16 ULTRASONIC_readDistance(void){
    40ca:	df 93       	push	r29
    40cc:	cf 93       	push	r28
    40ce:	00 d0       	rcall	.+0      	; 0x40d0 <ULTRASONIC_readDistance+0x6>
    40d0:	cd b7       	in	r28, 0x3d	; 61
    40d2:	de b7       	in	r29, 0x3e	; 62

	uint16 distance;

	ULTRASONIC_trigger();
    40d4:	0e 94 8a 1f 	call	0x3f14	; 0x3f14 <ULTRASONIC_trigger>
	 *          = 1*10^-6 * 17000 * value of ICU
	 *
	 *          = 0.017 * value of ICU
	 */

	distance = (uint16)( (float)0.017 * g_widthOfEcho);
    40d8:	80 91 75 01 	lds	r24, 0x0175
    40dc:	88 2f       	mov	r24, r24
    40de:	90 e0       	ldi	r25, 0x00	; 0
    40e0:	aa 27       	eor	r26, r26
    40e2:	97 fd       	sbrc	r25, 7
    40e4:	a0 95       	com	r26
    40e6:	ba 2f       	mov	r27, r26
    40e8:	bc 01       	movw	r22, r24
    40ea:	cd 01       	movw	r24, r26
    40ec:	0e 94 55 04 	call	0x8aa	; 0x8aa <__floatsisf>
    40f0:	dc 01       	movw	r26, r24
    40f2:	cb 01       	movw	r24, r22
    40f4:	bc 01       	movw	r22, r24
    40f6:	cd 01       	movw	r24, r26
    40f8:	26 e9       	ldi	r18, 0x96	; 150
    40fa:	33 e4       	ldi	r19, 0x43	; 67
    40fc:	4b e8       	ldi	r20, 0x8B	; 139
    40fe:	5c e3       	ldi	r21, 0x3C	; 60
    4100:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4104:	dc 01       	movw	r26, r24
    4106:	cb 01       	movw	r24, r22
    4108:	bc 01       	movw	r22, r24
    410a:	cd 01       	movw	r24, r26
    410c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4110:	dc 01       	movw	r26, r24
    4112:	cb 01       	movw	r24, r22
    4114:	9a 83       	std	Y+2, r25	; 0x02
    4116:	89 83       	std	Y+1, r24	; 0x01
	return distance;
    4118:	89 81       	ldd	r24, Y+1	; 0x01
    411a:	9a 81       	ldd	r25, Y+2	; 0x02
}
    411c:	0f 90       	pop	r0
    411e:	0f 90       	pop	r0
    4120:	cf 91       	pop	r28
    4122:	df 91       	pop	r29
    4124:	08 95       	ret

00004126 <ULTRASONIC_edgeProcessing>:

void ULTRASONIC_edgeProcessing(void){
    4126:	df 93       	push	r29
    4128:	cf 93       	push	r28
    412a:	cd b7       	in	r28, 0x3d	; 61
    412c:	de b7       	in	r29, 0x3e	; 62

	g_edgeCount++;
    412e:	80 91 74 01 	lds	r24, 0x0174
    4132:	8f 5f       	subi	r24, 0xFF	; 255
    4134:	80 93 74 01 	sts	0x0174, r24
	if(g_edgeCount == 1){
    4138:	80 91 74 01 	lds	r24, 0x0174
    413c:	81 30       	cpi	r24, 0x01	; 1
    413e:	31 f4       	brne	.+12     	; 0x414c <ULTRASONIC_edgeProcessing+0x26>

		ICU_clearTimer();
    4140:	0e 94 a4 08 	call	0x1148	; 0x1148 <ICU_clearTimer>
		ICU_setEdgeDetectionType(FALLING);
    4144:	80 e0       	ldi	r24, 0x00	; 0
    4146:	0e 94 81 08 	call	0x1102	; 0x1102 <ICU_setEdgeDetectionType>
    414a:	0c c0       	rjmp	.+24     	; 0x4164 <ULTRASONIC_edgeProcessing+0x3e>
	}
	else if(g_edgeCount == 2){
    414c:	80 91 74 01 	lds	r24, 0x0174
    4150:	82 30       	cpi	r24, 0x02	; 2
    4152:	41 f4       	brne	.+16     	; 0x4164 <ULTRASONIC_edgeProcessing+0x3e>

		g_widthOfEcho=ICU_getInputCaptureValue();
    4154:	0e 94 99 08 	call	0x1132	; 0x1132 <ICU_getInputCaptureValue>
    4158:	80 93 75 01 	sts	0x0175, r24

		ICU_clearTimer();
    415c:	0e 94 a4 08 	call	0x1148	; 0x1148 <ICU_clearTimer>
		ICU_deInit();
    4160:	0e 94 af 08 	call	0x115e	; 0x115e <ICU_deInit>
	}
}
    4164:	cf 91       	pop	r28
    4166:	df 91       	pop	r29
    4168:	08 95       	ret

0000416a <main>:
 *  Created on: Feb 24, 2024
 *      Author: mario
 */


int main(void){}
    416a:	df 93       	push	r29
    416c:	cf 93       	push	r28
    416e:	cd b7       	in	r28, 0x3d	; 61
    4170:	de b7       	in	r29, 0x3e	; 62
    4172:	80 e0       	ldi	r24, 0x00	; 0
    4174:	90 e0       	ldi	r25, 0x00	; 0
    4176:	cf 91       	pop	r28
    4178:	df 91       	pop	r29
    417a:	08 95       	ret

0000417c <__mulsi3>:
    417c:	62 9f       	mul	r22, r18
    417e:	d0 01       	movw	r26, r0
    4180:	73 9f       	mul	r23, r19
    4182:	f0 01       	movw	r30, r0
    4184:	82 9f       	mul	r24, r18
    4186:	e0 0d       	add	r30, r0
    4188:	f1 1d       	adc	r31, r1
    418a:	64 9f       	mul	r22, r20
    418c:	e0 0d       	add	r30, r0
    418e:	f1 1d       	adc	r31, r1
    4190:	92 9f       	mul	r25, r18
    4192:	f0 0d       	add	r31, r0
    4194:	83 9f       	mul	r24, r19
    4196:	f0 0d       	add	r31, r0
    4198:	74 9f       	mul	r23, r20
    419a:	f0 0d       	add	r31, r0
    419c:	65 9f       	mul	r22, r21
    419e:	f0 0d       	add	r31, r0
    41a0:	99 27       	eor	r25, r25
    41a2:	72 9f       	mul	r23, r18
    41a4:	b0 0d       	add	r27, r0
    41a6:	e1 1d       	adc	r30, r1
    41a8:	f9 1f       	adc	r31, r25
    41aa:	63 9f       	mul	r22, r19
    41ac:	b0 0d       	add	r27, r0
    41ae:	e1 1d       	adc	r30, r1
    41b0:	f9 1f       	adc	r31, r25
    41b2:	bd 01       	movw	r22, r26
    41b4:	cf 01       	movw	r24, r30
    41b6:	11 24       	eor	r1, r1
    41b8:	08 95       	ret

000041ba <__udivmodsi4>:
    41ba:	a1 e2       	ldi	r26, 0x21	; 33
    41bc:	1a 2e       	mov	r1, r26
    41be:	aa 1b       	sub	r26, r26
    41c0:	bb 1b       	sub	r27, r27
    41c2:	fd 01       	movw	r30, r26
    41c4:	0d c0       	rjmp	.+26     	; 0x41e0 <__udivmodsi4_ep>

000041c6 <__udivmodsi4_loop>:
    41c6:	aa 1f       	adc	r26, r26
    41c8:	bb 1f       	adc	r27, r27
    41ca:	ee 1f       	adc	r30, r30
    41cc:	ff 1f       	adc	r31, r31
    41ce:	a2 17       	cp	r26, r18
    41d0:	b3 07       	cpc	r27, r19
    41d2:	e4 07       	cpc	r30, r20
    41d4:	f5 07       	cpc	r31, r21
    41d6:	20 f0       	brcs	.+8      	; 0x41e0 <__udivmodsi4_ep>
    41d8:	a2 1b       	sub	r26, r18
    41da:	b3 0b       	sbc	r27, r19
    41dc:	e4 0b       	sbc	r30, r20
    41de:	f5 0b       	sbc	r31, r21

000041e0 <__udivmodsi4_ep>:
    41e0:	66 1f       	adc	r22, r22
    41e2:	77 1f       	adc	r23, r23
    41e4:	88 1f       	adc	r24, r24
    41e6:	99 1f       	adc	r25, r25
    41e8:	1a 94       	dec	r1
    41ea:	69 f7       	brne	.-38     	; 0x41c6 <__udivmodsi4_loop>
    41ec:	60 95       	com	r22
    41ee:	70 95       	com	r23
    41f0:	80 95       	com	r24
    41f2:	90 95       	com	r25
    41f4:	9b 01       	movw	r18, r22
    41f6:	ac 01       	movw	r20, r24
    41f8:	bd 01       	movw	r22, r26
    41fa:	cf 01       	movw	r24, r30
    41fc:	08 95       	ret

000041fe <__prologue_saves__>:
    41fe:	2f 92       	push	r2
    4200:	3f 92       	push	r3
    4202:	4f 92       	push	r4
    4204:	5f 92       	push	r5
    4206:	6f 92       	push	r6
    4208:	7f 92       	push	r7
    420a:	8f 92       	push	r8
    420c:	9f 92       	push	r9
    420e:	af 92       	push	r10
    4210:	bf 92       	push	r11
    4212:	cf 92       	push	r12
    4214:	df 92       	push	r13
    4216:	ef 92       	push	r14
    4218:	ff 92       	push	r15
    421a:	0f 93       	push	r16
    421c:	1f 93       	push	r17
    421e:	cf 93       	push	r28
    4220:	df 93       	push	r29
    4222:	cd b7       	in	r28, 0x3d	; 61
    4224:	de b7       	in	r29, 0x3e	; 62
    4226:	ca 1b       	sub	r28, r26
    4228:	db 0b       	sbc	r29, r27
    422a:	0f b6       	in	r0, 0x3f	; 63
    422c:	f8 94       	cli
    422e:	de bf       	out	0x3e, r29	; 62
    4230:	0f be       	out	0x3f, r0	; 63
    4232:	cd bf       	out	0x3d, r28	; 61
    4234:	09 94       	ijmp

00004236 <__epilogue_restores__>:
    4236:	2a 88       	ldd	r2, Y+18	; 0x12
    4238:	39 88       	ldd	r3, Y+17	; 0x11
    423a:	48 88       	ldd	r4, Y+16	; 0x10
    423c:	5f 84       	ldd	r5, Y+15	; 0x0f
    423e:	6e 84       	ldd	r6, Y+14	; 0x0e
    4240:	7d 84       	ldd	r7, Y+13	; 0x0d
    4242:	8c 84       	ldd	r8, Y+12	; 0x0c
    4244:	9b 84       	ldd	r9, Y+11	; 0x0b
    4246:	aa 84       	ldd	r10, Y+10	; 0x0a
    4248:	b9 84       	ldd	r11, Y+9	; 0x09
    424a:	c8 84       	ldd	r12, Y+8	; 0x08
    424c:	df 80       	ldd	r13, Y+7	; 0x07
    424e:	ee 80       	ldd	r14, Y+6	; 0x06
    4250:	fd 80       	ldd	r15, Y+5	; 0x05
    4252:	0c 81       	ldd	r16, Y+4	; 0x04
    4254:	1b 81       	ldd	r17, Y+3	; 0x03
    4256:	aa 81       	ldd	r26, Y+2	; 0x02
    4258:	b9 81       	ldd	r27, Y+1	; 0x01
    425a:	ce 0f       	add	r28, r30
    425c:	d1 1d       	adc	r29, r1
    425e:	0f b6       	in	r0, 0x3f	; 63
    4260:	f8 94       	cli
    4262:	de bf       	out	0x3e, r29	; 62
    4264:	0f be       	out	0x3f, r0	; 63
    4266:	cd bf       	out	0x3d, r28	; 61
    4268:	ed 01       	movw	r28, r26
    426a:	08 95       	ret

0000426c <itoa>:
    426c:	fb 01       	movw	r30, r22
    426e:	9f 01       	movw	r18, r30
    4270:	e8 94       	clt
    4272:	42 30       	cpi	r20, 0x02	; 2
    4274:	c4 f0       	brlt	.+48     	; 0x42a6 <itoa+0x3a>
    4276:	45 32       	cpi	r20, 0x25	; 37
    4278:	b4 f4       	brge	.+44     	; 0x42a6 <itoa+0x3a>
    427a:	4a 30       	cpi	r20, 0x0A	; 10
    427c:	29 f4       	brne	.+10     	; 0x4288 <itoa+0x1c>
    427e:	97 fb       	bst	r25, 7
    4280:	1e f4       	brtc	.+6      	; 0x4288 <itoa+0x1c>
    4282:	90 95       	com	r25
    4284:	81 95       	neg	r24
    4286:	9f 4f       	sbci	r25, 0xFF	; 255
    4288:	64 2f       	mov	r22, r20
    428a:	77 27       	eor	r23, r23
    428c:	0e 94 67 21 	call	0x42ce	; 0x42ce <__udivmodhi4>
    4290:	80 5d       	subi	r24, 0xD0	; 208
    4292:	8a 33       	cpi	r24, 0x3A	; 58
    4294:	0c f0       	brlt	.+2      	; 0x4298 <itoa+0x2c>
    4296:	89 5d       	subi	r24, 0xD9	; 217
    4298:	81 93       	st	Z+, r24
    429a:	cb 01       	movw	r24, r22
    429c:	00 97       	sbiw	r24, 0x00	; 0
    429e:	a1 f7       	brne	.-24     	; 0x4288 <itoa+0x1c>
    42a0:	16 f4       	brtc	.+4      	; 0x42a6 <itoa+0x3a>
    42a2:	5d e2       	ldi	r21, 0x2D	; 45
    42a4:	51 93       	st	Z+, r21
    42a6:	10 82       	st	Z, r1
    42a8:	c9 01       	movw	r24, r18
    42aa:	0c 94 57 21 	jmp	0x42ae	; 0x42ae <strrev>

000042ae <strrev>:
    42ae:	dc 01       	movw	r26, r24
    42b0:	fc 01       	movw	r30, r24
    42b2:	67 2f       	mov	r22, r23
    42b4:	71 91       	ld	r23, Z+
    42b6:	77 23       	and	r23, r23
    42b8:	e1 f7       	brne	.-8      	; 0x42b2 <strrev+0x4>
    42ba:	32 97       	sbiw	r30, 0x02	; 2
    42bc:	04 c0       	rjmp	.+8      	; 0x42c6 <strrev+0x18>
    42be:	7c 91       	ld	r23, X
    42c0:	6d 93       	st	X+, r22
    42c2:	70 83       	st	Z, r23
    42c4:	62 91       	ld	r22, -Z
    42c6:	ae 17       	cp	r26, r30
    42c8:	bf 07       	cpc	r27, r31
    42ca:	c8 f3       	brcs	.-14     	; 0x42be <strrev+0x10>
    42cc:	08 95       	ret

000042ce <__udivmodhi4>:
    42ce:	aa 1b       	sub	r26, r26
    42d0:	bb 1b       	sub	r27, r27
    42d2:	51 e1       	ldi	r21, 0x11	; 17
    42d4:	07 c0       	rjmp	.+14     	; 0x42e4 <__udivmodhi4_ep>

000042d6 <__udivmodhi4_loop>:
    42d6:	aa 1f       	adc	r26, r26
    42d8:	bb 1f       	adc	r27, r27
    42da:	a6 17       	cp	r26, r22
    42dc:	b7 07       	cpc	r27, r23
    42de:	10 f0       	brcs	.+4      	; 0x42e4 <__udivmodhi4_ep>
    42e0:	a6 1b       	sub	r26, r22
    42e2:	b7 0b       	sbc	r27, r23

000042e4 <__udivmodhi4_ep>:
    42e4:	88 1f       	adc	r24, r24
    42e6:	99 1f       	adc	r25, r25
    42e8:	5a 95       	dec	r21
    42ea:	a9 f7       	brne	.-22     	; 0x42d6 <__udivmodhi4_loop>
    42ec:	80 95       	com	r24
    42ee:	90 95       	com	r25
    42f0:	bc 01       	movw	r22, r24
    42f2:	cd 01       	movw	r24, r26
    42f4:	08 95       	ret

000042f6 <_exit>:
    42f6:	f8 94       	cli

000042f8 <__stop_program>:
    42f8:	ff cf       	rjmp	.-2      	; 0x42f8 <__stop_program>
